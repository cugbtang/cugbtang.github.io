<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ✌yesplease's blog</title><link>http://cugbtang.github.io/post/</link><description>Recent content in Posts on ✌yesplease's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 30 Jul 2023 16:01:23 +0800</lastBuildDate><atom:link href="http://cugbtang.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>git 以前的许多commit中某个文件含有密钥，怎么办？</title><link>http://cugbtang.github.io/post/devops/series-git-2/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-2/</guid><description>git 以前的许多commit中某个文件含有密钥，怎么办？ 一、场景描述 在这个项目中，代码的都是在develop分支上进行的， 现在要打tag v1.0</description></item><item><title>git 合并原理</title><link>http://cugbtang.github.io/post/devops/series-git-4/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-4/</guid><description>git 合并原理 一、场景描述 记录一些常用操作 git status: 显示工作区和暂存区的状态 git diff: 显示工作区和暂存区之间的差异 git diff &amp;ndash;cached: 显示暂存区和最新提交之间的差异 git diff [</description></item><item><title>git 常用操作</title><link>http://cugbtang.github.io/post/devops/series-git-3/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-3/</guid><description>git 常用操作 一、场景描述 记录一些常用操作 git status: 显示工作区和暂存区的状态 git diff: 显示工作区和暂存区之间的差异 git diff &amp;ndash;cached: 显示暂存区和最新提交之间的差异 git diff [</description></item><item><title>git 部分功能需要先上线，怎么办？</title><link>http://cugbtang.github.io/post/devops/series-git-1/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-1/</guid><description>git 部分功能需要先上线，怎么办？ 一、场景描述 在这个项目中，代码的提交和合并都是在develop分支上进行的， 之前已经基于某个commit打了t</description></item><item><title>Container, how to play?</title><link>http://cugbtang.github.io/post/container/series-container-1/</link><pubDate>Wed, 01 Jun 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/container/series-container-1/</guid><description>&lt;p>container technology become a necessary for developer during operating the linux system.&lt;/p></description></item><item><title>kubeadm startup Kubernetes less than v1.20.0 (centos+docker+ipvs+calico)</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-2/</link><pubDate>Sun, 15 May 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-2/</guid><description>一、更新系统软件（全部节点） 由于 Docker 对系统内核有一定的要求，所以我们最好使用 yum 来更新系统软件及其内核。 1 2 3 4 5 6 7 8 9 10 11 #备份本地 yum 源 $ mv</description></item><item><title>Kubernetes, how to deploy?</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-1/</link><pubDate>Sun, 01 May 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-1/</guid><description>汇总kubernetes部署的方案： kubernetes &amp;lt; 1.20 + centos7 + docker + iptables + flannel kubernetes &amp;lt; 1.20 + centos7 + docker + ipvs + calico 1.20 &amp;lt;kubernetes &amp;lt; 1.24 + centos7 + docker + ipvs + calico kubernetes &amp;gt; 1.24 + centos7 + containerd + ipvs + calico kubernetes &amp;gt; 1.24 + centos7 + cri-o</description></item><item><title>The node was low on resource: ephemeral-storage. Evicted</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-6/</link><pubDate>Fri, 15 Apr 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-6/</guid><description>The node was low on resource: ephemeral-storage. Evicted 最近某个节点频繁出现这个问题 问题分析 解决方案 查询到的解决方案 不能让某个占用过多的资源，临时存储不允许一直占用，用超过Limi</description></item><item><title>nginx 鉴权_k8s中的服务使用proxy auth鉴权</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-5/</link><pubDate>Fri, 01 Apr 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-5/</guid><description>nginx 鉴权_k8s中的服务使用proxy auth鉴权 需求 k8s nginx ingress除了可以对服务提供basic权限验证外，也可以使用外部的鉴权服务。我们</description></item><item><title>kubernetes1.24.0, Why use docker in production environment ?</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-4/</link><pubDate>Tue, 15 Mar 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-4/</guid><description>kubernetes1.24.0, Why use docker in production environment ? if you consider Mirantis and Docker have committed to maintaining a replacement adapter for Docker Engine, and to maintain that adapter even after the in-tree dockershim is removed from Kubernetes. The replacement adapter is named cri-dockerd.
Download the cri-dockerd binary package or compile the source code yourself
1 2 3 4 5 6 # download file wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.0/cri-dockerd-v0.2.0-linux-amd64.tar.gz # unzip file tar -xvf cri-dockerd-v0.</description></item><item><title>kubeadm startup Kubernetes more than v1.20.0 (centos7+containerd+ipvs+calico)</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-3/</link><pubDate>Tue, 01 Mar 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-3/</guid><description>这篇文章的作者部署的是kubernetes v1.23，但其实是基于kubernetes对CRI的改动执行的较为流行的方案。 我绝的主要是针对D</description></item><item><title>Go, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-1/</link><pubDate>Tue, 15 Feb 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-1/</guid><description>Go 的IO 首要问题，内核中的缓冲和进程中的缓冲 内核中的缓冲 无论进程是否提供缓冲，内核都是提供缓冲的，系统对磁盘的读写都会提供一个缓冲（page</description></item><item><title>Jenkins, hot backup</title><link>http://cugbtang.github.io/post/devops/series-jenkins-3/</link><pubDate>Tue, 01 Feb 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-jenkins-3/</guid><description>jenkins 数据热备 rsync : 增量备份 inotify： 实时通知 理论 一、rsync 与传统的 cp、tar 备份方式相比，rsync 具有安全性高、备份迅速、支持增量</description></item><item><title>Jenkins, Q&amp;A</title><link>http://cugbtang.github.io/post/devops/series-jenkins-2/</link><pubDate>Sat, 15 Jan 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-jenkins-2/</guid><description>1、镜像选择 jenkinsci/blueocean , why? 安装blue ocean插件前 安装blue ocean插件后 2、启动参数都表示什么？ 1 2 3 4 5 6 7 8 docker run \ --rm \ -u root \ -p 8080:8080 \ -v jenkins-data:/var/jenkins_home</description></item><item><title>Jenkins, how to play?</title><link>http://cugbtang.github.io/post/devops/series-jenkins-1/</link><pubDate>Sat, 01 Jan 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-jenkins-1/</guid><description>how to play jenkins? 社区源码、文档1等托管在 GitHub 上。 其中基础设施部分在 jenkins-infra； 核心库以及插件在 jenkinsci2； Jenkins 中文本地化相关的</description></item><item><title/><link>http://cugbtang.github.io/post/engineer/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/engineer/api/</guid><description>API工程化：基于Proto的IDL管理和文档生成 在现代软件开发中，API工程化变得愈发重要。使用Proto作为接口定义语言（IDL），可以</description></item><item><title/><link>http://cugbtang.github.io/post/engineer/engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/engineer/engineering/</guid><description>MVC vs DDD MVC 在MVC架构中，控制器负责决定流量的传递路径，从用户请求开始，通过控制器、模型和视图之间的协作，最终将结果返回给用户。控制器作为中心</description></item><item><title/><link>http://cugbtang.github.io/post/go/compile/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/go/compile/readme/</guid><description>Introduction to the Go compiler cmd/compile contains the main packages that form the Go compiler. The compiler may be logically split in four phases, which we will briefly describe alongside the list of packages that contain their code. You may sometimes hear the terms &amp;ldquo;front-end&amp;rdquo; and &amp;ldquo;back-end&amp;rdquo; when referring to the compiler. Roughly speaking, these translate to the first two and last two phases we are going to list here.</description></item><item><title/><link>http://cugbtang.github.io/post/go/compile/series-parse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/go/compile/series-parse/</guid><description>parse cmd/compile/internal/syntax (lexer, parser, syntax tree) 一、lexer、parse token化 1 2 3 4 5 6 7 8 9 type token uint //go:generate stringer -type token -linecomment tokens.go const ( _ token = iota _EOF ... ) 其中有一句： 1 2 // Make sure we have at most 64 tokens so</description></item></channel></rss>