<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ✌yesplease's blog</title><link>http://cugbtang.github.io/post/</link><description>Recent content in Posts on ✌yesplease's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Jan 2024 16:01:23 +0800</lastBuildDate><atom:link href="http://cugbtang.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Web App, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-6/</link><pubDate>Sat, 06 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-6/</guid><description>use the net/http package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 package main import ( &amp;#34;html/template&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;regexp&amp;#34; ) type Page struct { Title string Body []byte } func (p *Page) save() error { filename := p.</description></item><item><title>Go tools, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-7/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-7/</guid><description>Delve是一个基于命令行的Go语言调试器，它提供了类似于GDB的功能，支持设置断点、单步执行、查看变量值、调用堆栈等操作。相比于GDB，D</description></item><item><title>Go test, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-2/</link><pubDate>Thu, 04 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-2/</guid><description>#go 测试 go test 后面接着的应该是一个包名 go test 可以生成覆盖率的profile文件，这个文件可以被go tool cover工具解析(go tool cover -func=cover.out/go tool cover -html=cover.out) 1、Go top-level</description></item><item><title>Go Effective, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-5/</link><pubDate>Wed, 03 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-5/</guid><description>1、介绍 Effective Go是Go语言官方提供的一份指南，旨在帮助开发人员写出高效、清晰和可读性强的Go代码。下面我会针对每个观点进行阐述，并给出相应的代</description></item><item><title>Go fundamentals, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-4/</link><pubDate>Tue, 02 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-4/</guid><description>Go Fundamentals 介绍如下： 数据类型（Data Types）： Go语言有基本数据类型，包括布尔型、数字型、字符串和字符型。 可以使用var关键字来声明变量，也</description></item><item><title>Go Proverbs, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-3/</link><pubDate>Mon, 01 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-3/</guid><description>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func main() { channel := make(chan int) // 创建一个通道 go func() { value := 42 channel &amp;lt;- value // 将值发送到通道 }() receivedValue := &amp;lt;-channel // 从通道接收值</description></item><item><title>docker, net?</title><link>http://cugbtang.github.io/post/container/series-container-3/</link><pubDate>Sat, 02 Dec 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/container/series-container-3/</guid><description/></item><item><title>docker桥接网络模式下开启端口映射，流量是如何绕过防火墙的</title><link>http://cugbtang.github.io/post/container/series-container-2/</link><pubDate>Fri, 01 Dec 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/container/series-container-2/</guid><description>一、iptables 五条链 PREROUTING链 PREROUTING链是最先生效的，当数据包到达网口时，即开始工作。同时由于其在raw,ma</description></item><item><title>micro, how to play quick?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-5/</link><pubDate>Thu, 30 Nov 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-5/</guid><description>工程化 简单模板： gin-vue-admin 自定义： nunu+vue3+el 微服务： IDL（声明+代码+文档+错误）,kratos 统一服务端回复信息格式 micro: http+json 1 2 3 4 5 6 7 func (e *Helloworld) Call(ctx context.Context, req *pb.CallRequest, rsp *pb.CallResponse)</description></item><item><title>micro, how to play api?</title><link>http://cugbtang.github.io/post/engineer/series-api-2/</link><pubDate>Wed, 29 Nov 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/engineer/series-api-2/</guid><description>API工程化：基于Proto的IDL管理和文档生成 在现代软件开发中，API工程化变得愈发重要。使用Proto作为接口定义语言（IDL），可以</description></item><item><title>micro, how to play engineer?</title><link>http://cugbtang.github.io/post/engineer/series-api-0/</link><pubDate>Wed, 29 Nov 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/engineer/series-api-0/</guid><description>grpc管理 api管理 api生命周期管理 南北流量如何slb、cdn打通 东西流量内网鉴权、api上下线、api兼容性测试 微服务治理框架（实际就</description></item><item><title>micro, how to play select engineer mode?</title><link>http://cugbtang.github.io/post/engineer/series-api-1/</link><pubDate>Wed, 29 Nov 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/engineer/series-api-1/</guid><description>MVC vs DDD MVC 在MVC架构中，控制器负责决定流量的传递路径，从用户请求开始，通过控制器、模型和视图之间的协作，最终将结果返回给用户。控制器作为中心</description></item><item><title>Go-micro, how to play advance?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-3/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-3/</guid><description>疑问 服务发现，一个服务注册到consul/etcd，客户端怎么感知到 利用注册中心的订阅能力。客户端使用 Subscribe 方法来订阅服务更新的事件。该方法接收</description></item><item><title>Go-micro, how to play cli?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-2/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-2/</guid><description>Go-micro 简介 一句话介绍 Go Micro CLI is the command line interface for developing Go Micro projects. 开始表演 安装 1 go install github.com/go-micro/cli/cmd/go-micro@latest 创建测试项目（执行命令，后续根据命令提示操作） 1 go-micro new service helloworld 创建工程化项目（执行命</description></item><item><title>Go-micro, how to play engineering?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-4/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-4/</guid><description>工程化 1、尽可能的附属到IDL 2、IDL统一仓库管理 统一服务端回复信息格式 - rpc的正确返回，状态码是200，附加正确的数据信息 - rpc的错</description></item><item><title>Go-micro, how to play introduction?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-1/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-1/</guid><description>Go-micro 简介 一句话介绍 Go Micro is a framework for distributed systems development. 多说两句 Go Micro provides the core requirements for distributed systems development including RPC and Event driven communication. The Go Micro philosophy is sane defaults with a pluggable architecture. We provide defaults to get you started quickly but everything can be easily swapped out. 介绍下具体功能</description></item><item><title>git 以前的许多commit中某个文件含有密钥，怎么办？</title><link>http://cugbtang.github.io/post/devops/series-git-2/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-2/</guid><description>git 以前的许多commit中某个文件含有密钥，怎么办？ 一、场景描述 在这个项目中，代码的都是在develop分支上进行的， 现在要打tag v1.0</description></item><item><title>git 合并原理</title><link>http://cugbtang.github.io/post/devops/series-git-4/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-4/</guid><description>git 合并原理 一、场景描述 记录一些常用操作 git status: 显示工作区和暂存区的状态 git diff: 显示工作区和暂存区之间的差异 git diff &amp;ndash;cached: 显示暂存区和最新提交之间的差异 git diff [</description></item><item><title>git 常用操作</title><link>http://cugbtang.github.io/post/devops/series-git-3/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-3/</guid><description>git 常用操作 一、场景描述 记录一些常用操作 git status: 显示工作区和暂存区的状态 git diff: 显示工作区和暂存区之间的差异 git diff &amp;ndash;cached: 显示暂存区和最新提交之间的差异 git diff [</description></item><item><title>git 部分功能需要先上线，怎么办？</title><link>http://cugbtang.github.io/post/devops/series-git-1/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-1/</guid><description>git 部分功能需要先上线，怎么办？ 一、场景描述 在这个项目中，代码的提交和合并都是在develop分支上进行的， 之前已经基于某个commit打了t</description></item></channel></rss>