<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on ✌yesplease's blog</title><link>http://cugbtang.github.io/categories/go/</link><description>Recent content in Go on ✌yesplease's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Jan 2024 16:01:23 +0800</lastBuildDate><atom:link href="http://cugbtang.github.io/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Web App, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-6/</link><pubDate>Sat, 06 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-6/</guid><description>优雅重启HTTP服务 目的 1、不关闭现有连接（正在运行中的程序） 2、新的进程启动并替代旧进程 3、新的进程接管新的连接 4、连接要随时响应用户的请</description></item><item><title>Go concurrent, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-9/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-9/</guid><description>introduction 首先，让我们来理解一下 goroutine。Goroutine 是一种轻量级的线程，由 Go 运行时环境管理。在 Go 语言中，你可以通过关键字 go 来启动一</description></item><item><title>Go function interface, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-13/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-13/</guid><description>接口型函数 在 Go 语言中，函数也可以作为接口的一部分，这种称为函数接口（Function Interface）的概念让我们可以更加灵活地定义接口和</description></item><item><title>Go function option vs builder, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-12/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-12/</guid><description>Go 构建对象模式 Function Option 是一种通过函数选项来配置函数参数的方式。通过在函数中定义多个接受选项参数的函数，可以根据需要选择性地传递这些选项，而不是像</description></item><item><title>Go tools, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-7/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-7/</guid><description>Delve是一个基于命令行的Go语言调试器，它提供了类似于GDB的功能，支持设置断点、单步执行、查看变量值、调用堆栈等操作。相比于GDB，D</description></item><item><title>Go 高级编程, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-8/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-8/</guid><description>1. 并发编程 在这一部分主要介绍了Go语言的并发模型和相关的并发编程技术，包括协程、通道、互斥锁、条件变量等。关键知识点包括： 协程的基本用法和实</description></item><item><title>Go test, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-2/</link><pubDate>Thu, 04 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-2/</guid><description>go 测试 go test 后面接着的应该是一个包名 go test 可以生成覆盖率的profile文件，这个文件可以被go tool cover工具解析(go tool cover -func=cover.out/go tool cover -html=cover.out) 1、Go top-level</description></item><item><title>Go Effective, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-5/</link><pubDate>Wed, 03 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-5/</guid><description>1、介绍 Effective Go是Go语言官方提供的一份指南，旨在帮助开发人员写出高效、清晰和可读性强的Go代码。下面我会针对每个观点进行阐述，并给出相应的代</description></item><item><title>Go fundamentals, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-4/</link><pubDate>Tue, 02 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-4/</guid><description>Go Fundamentals 是更多的Go基础知识，涵盖了数据结构（基础数据结构、数组、slice、map）、语言基础（函数、接口、反射）、关键字和并发等方面。掌握这</description></item><item><title>Go Proverbs, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-3/</link><pubDate>Mon, 01 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-3/</guid><description>需要牢记这些谚语，在使用过程中感受谚语带来的变化 Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func main() { channel := make(chan int) // 创建一个通道 go func() { value</description></item><item><title>micro quick, how to play?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-5/</link><pubDate>Thu, 30 Nov 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-5/</guid><description>工程化 简单模板： gin-vue-admin 自定义： nunu+vue3+el 微服务： IDL（声明+代码+文档+错误）,kratos 统一服务端回复信息格式 micro: http+json 1 2 3 4 5 6 7 func (e *Helloworld) Call(ctx context.Context, req *pb.CallRequest, rsp *pb.CallResponse)</description></item><item><title>Go-micro advance, how to play?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-3/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-3/</guid><description>疑问 服务发现，一个服务注册到consul/etcd，客户端怎么感知到 利用注册中心的订阅能力。客户端使用 Subscribe 方法来订阅服务更新的事件。该方法接收</description></item><item><title>Go-micro cli, how to play?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-2/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-2/</guid><description>Go-micro 简介 一句话介绍 Go Micro CLI is the command line interface for developing Go Micro projects. 开始表演 安装 1 go install github.com/go-micro/cli/cmd/go-micro@latest 创建测试项目（执行命令，后续根据命令提示操作） 1 go-micro new service helloworld 创建工程化项目（执行命</description></item><item><title>Go-micro engineering, how to play?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-4/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-4/</guid><description>工程化 1、尽可能的附属到IDL 2、IDL统一仓库管理 统一服务端回复信息格式 - rpc的正确返回，状态码是200，附加正确的数据信息 - rpc的错</description></item><item><title>Go-micro, how to play introduction?</title><link>http://cugbtang.github.io/post/go-micro/series-go-micro-1/</link><pubDate>Fri, 15 Sep 2023 15:44:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go-micro/series-go-micro-1/</guid><description>Go-micro 简介 一句话介绍 Go Micro is a framework for distributed systems development. 多说两句 Go Micro provides the core requirements for distributed systems development including RPC and Event driven communication. The Go Micro philosophy is sane defaults with a pluggable architecture. We provide defaults to get you started quickly but everything can be easily swapped out. 介绍下具体功能</description></item><item><title>Go io, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-1/</link><pubDate>Tue, 15 Feb 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-1/</guid><description>Go 的IO 首要问题，内核中的缓冲和进程中的缓冲 内核中的缓冲 无论进程是否提供缓冲，内核都是提供缓冲的，系统对磁盘的读写都会提供一个缓冲（page</description></item></channel></rss>