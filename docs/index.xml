<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>✌yesplease's blog</title><link>http://cugbtang.github.io/</link><description>Recent content on ✌yesplease's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 30 Jul 2023 16:01:23 +0800</lastBuildDate><atom:link href="http://cugbtang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>http://cugbtang.github.io/about/</link><pubDate>Sat, 01 Jan 2022 21:38:52 +0800</pubDate><guid>http://cugbtang.github.io/about/</guid><description>&lt;p>A new generation of migrant workers that peek technology in cloudnative!&lt;/p></description></item><item><title>git 以前的许多commit中某个文件含有密钥，怎么办？</title><link>http://cugbtang.github.io/post/devops/series-git-2/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-2/</guid><description>&lt;h2 id="git-以前的许多commit中某个文件含有密钥怎么办">git 以前的许多commit中某个文件含有密钥，怎么办？&lt;/h2>
&lt;h2 id="一场景描述">一、场景描述&lt;/h2>
&lt;p>在这个项目中，代码的都是在develop分支上进行的， 现在要打tag v1.0.0进行发版。然而，从项目init开始到现在有很多commit，其中某个文件中把密钥直接写在了源码中，最近几次提交才把密钥处理了。&lt;/p>
&lt;h2 id="二问问-gpt1">二、问问 gpt&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>git 一开始项目的很多提交中某个文件含有密钥，最近的几次commit中才把密钥隐藏掉，那么怎样清除之前的很多次commit中密钥; 我想把之前所有提交中密码不为&lt;em>&lt;strong>的都改为&lt;/strong>&lt;/em> 该怎么操作&lt;/p>
&lt;/blockquote>
&lt;p>要将之前所有提交中的密码更改为 &lt;code>***&lt;/code>，可以使用 &lt;code>git filter-branch&lt;/code> 命令结合自定义脚本来实现。请按照以下步骤进行操作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先，在你的项目目录下打开终端，并确保你当前在所需的分支上（例如，&lt;code>master&lt;/code> 分支）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行以下命令来备份你的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git branch backup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建一个名为 &lt;code>replace_password.sh&lt;/code> 的脚本文件，并使用文本编辑器打开它。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;code>replace_password.sh&lt;/code> 文件中，输入以下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">#!/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-files -z | while read -d &amp;#39;&amp;#39; -r file; do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [[ $file == *&amp;#34;&amp;lt;文件路径&amp;gt;&amp;#34;* ]]; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed -i &amp;#39;s/密码模式/*** /g&amp;#39; &amp;#34;$file&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">done
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>&amp;lt;文件路径&amp;gt;&lt;/code> 替换为包含密码的文件的路径或文件夹的路径。这将会在指定文件中查找并替换密码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存并关闭 &lt;code>replace_password.sh&lt;/code> 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行以下命令来添加执行权限给脚本文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">chmod +x replace_password.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>现在，运行以下命令来执行 &lt;code>git filter-branch&lt;/code> 操作，并使用脚本文件作为过滤器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git filter-branch --tree-filter &amp;#39;/path/to/replace_password.sh&amp;#39; --prune-empty HEAD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>/path/to/replace_password.sh&lt;/code> 替换为 &lt;code>replace_password.sh&lt;/code> 文件的实际路径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git 将会遍历所有的提交，并在每个提交上运行脚本文件，查找并替换指定文件中的密码。完成后，你的历史提交将被重写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你已经将这些提交推送到远程仓库，你需要使用 &lt;code>git push --force&lt;/code> 强制推送修改后的提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git push --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>这样，你就可以使用自定义脚本来批量替换之前所有提交中的密码。但请注意，执行 &lt;code>git filter-branch&lt;/code> 操作时，也要小心谨慎，因为它会修改提交历史。确保在操作之前备份代码，并在必要时咨询有经验的 Git 使用者或开发者。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>git filter-branch &amp;ndash;tree-filter &amp;lsquo;/path/to/replace_password.sh&amp;rsquo; &amp;ndash;prune-empty HEAD
解释下这个命令&lt;/p>
&lt;/blockquote>
&lt;p>当你运行 git filter-branch 命令时，它会遍历 Git 仓库的每个提交，并对每个提交应用指定的过滤器。在这个命令中，我们使用了 &amp;ndash;tree-filter 参数来指定一个以树形结构过滤提交的过滤器。&lt;/p>
&lt;p>下面解释一下命令中各个部分的含义：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>git filter-branch: 这是执行过滤操作的 Git 命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;tree-filter: 这是指定要应用的过滤器类型。&amp;ndash;tree-filter 可以在每个提交的工作目录中运行指定的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;lsquo;/path/to/replace_password.sh&amp;rsquo;: 这是具体的过滤器命令。在每个提交中，它运行 /path/to/replace_password.sh 命令来修改&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HEAD: 这是指定要过滤的提交范围。在这个命令中，我们使用 HEAD 表示过滤当前分支上的所有提交。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>通过运行上述命令，Git 将会遍历每个提交，并在每个提交上执行指定的命令，移除包含密钥文件的文件。完成后，&lt;/p>
&lt;h2 id="三小结">三、小结：&lt;/h2>
&lt;p>简化一些：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> git filter-branch --tree-filter &lt;span class="s1">&amp;#39; sed -i &amp;#34;s/aaa/*** /g&amp;#34; ./initialize/config.go&amp;#39;&lt;/span> --prune-empty HEAD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git push -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>filter-branch&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h2 id="四参考">四、参考&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="">gpt&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95">git-filter-branch&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>git 合并原理</title><link>http://cugbtang.github.io/post/devops/series-git-4/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-4/</guid><description>&lt;h2 id="git-合并原理">git 合并原理&lt;/h2>
&lt;h2 id="一场景描述">一、场景描述&lt;/h2>
&lt;p>记录一些常用操作&lt;/p>
&lt;ul>
&lt;li>git status: 显示工作区和暂存区的状态&lt;/li>
&lt;li>git diff: 显示工作区和暂存区之间的差异&lt;/li>
&lt;li>git diff &amp;ndash;cached: 显示暂存区和最新提交之间的差异&lt;/li>
&lt;li>git diff [分支1] [分支2]: 比较两个分支之间的差异&lt;/li>
&lt;li>git grep [关键词]: 在整个代码库中搜索指定关键词&lt;/li>
&lt;li>git stash: 将当前修改暂存起来，切换到其他分支&lt;/li>
&lt;li>git reset &amp;ndash;hard [提交号]: 将当前分支的 HEAD 指针指向指定的提交，并重置工作区和暂存区&lt;/li>
&lt;li>git rm [文件]: 从版本控制中移除文件&lt;/li>
&lt;li>git rebase [提交号]: 交互式地合并、重新排序或编辑提交历史的&lt;/li>
&lt;li>git cherry-pick [提交号]: 选择某个提交，并将其应用到当前分支&lt;/li>
&lt;li>git blame [文件]: 显示指定文件的每一行是谁在哪个提交中修改的&lt;/li>
&lt;li>git blame -L [起始行号],[结束行号] [文件]: 仅显示指定行范围的文件是谁修改的&lt;/li>
&lt;li>git revert [提交号]: 创建一个新的提交，用于撤销指定的提交&lt;/li>
&lt;li>git bisect start: 启动二分查找来定位引入问题的提交&lt;/li>
&lt;li>git stash apply: 恢复最近一次暂存的修改，并将其从暂存堆栈中删除&lt;/li>
&lt;li>git reflog: 显示 HEAD 和分支的历史记录，包括已经被删除的提交&lt;/li>
&lt;li>git log &amp;ndash;author=[作者]: 显示特定作者的提交历史&lt;/li>
&lt;li>git tag [标签名] [提交号]: 在指定提交上创建一个标签&lt;/li>
&lt;li>git show-branch: 显示本地分支的历史和状态&lt;/li>
&lt;/ul>
&lt;h2 id="二问问-gpt1">二、问问 gpt&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>解释下git show&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>git show&lt;/code> 是一个非常有用的 Git 命令，它用于显示提交的详细信息和更改的内容。下面是 &lt;code>git show&lt;/code> 的详细讲解：&lt;/p>
&lt;p>基本语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git show [提交]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>[提交]&lt;/code>: 可选参数，表示要查看的提交，默认为最新的提交。&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>git show&lt;/code> 命令可以获取以下信息：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>提交信息：包括提交哈希值、作者、提交日期和提交消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改的文件：列出了与该提交相关的所有修改过的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件更改的具体内容：展示了每个文件的具体更改内容，即新增、修改或删除的行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码差异：以 diff 的形式显示当前提交与其父提交之间的代码差异。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他元数据：显示提交中的其他元数据，例如签名和标签。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>示例用法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">$ git show
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将显示最新提交的详细信息和更改的内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">$ git show abcdef123456
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将显示提交哈希值为 &lt;code>abcdef123456&lt;/code> 的提交的详细信息和更改的内容。&lt;/p>
&lt;p>&lt;code>git show&lt;/code> 命令在查看历史提交、检查代码更改、审查提交信息等方面非常有用。通过查看提交的详细信息，开发者可以更好地理解代码库的演变历史并进行必要的代码审查和调试。记住，你可以使用其他参数和选项来进一步定制 &lt;code>git show&lt;/code> 命令的输出。可以通过 &lt;code>git show --help&lt;/code> 查看详细的帮助文档。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>解释下 git rebase -i commit&lt;/p>
&lt;/blockquote>
&lt;p>当你运行 &lt;code>git rebase -i commit&lt;/code> 命令时，你可以使用交互式界面对提交历史进行编辑。下面是一个示例：&lt;/p>
&lt;p>假设你有如下的提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">commit C: Add feature C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit B: Add feature B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit A: Add feature A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你想要将提交 B 和提交 C 合并为一个提交，并编辑提交 A 的消息。你可以运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git rebase -i commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git 将会打开交互式界面，其中列出了提交历史的相关信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pick abcdef1 commit A: Add feature A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pick bcdef23 commit B: Add feature B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pick def4567 commit C: Add feature C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以对这些操作进行修改，以实现你的目标。在本例中，你可以将提交 B 和提交 C 合并为一个提交，然后编辑提交 A 的消息。你可以修改交互式界面如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pick abcdef1 commit A: Add feature A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">squash bcdef23 commit B: Add feature B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s/commit A: Add feature A/Edit feature A/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存并退出编辑器。Git 将会根据你的指示执行相应的操作。此时，Git 会自动合并提交 B 到提交 A，并修改提交 A 的消息。最终的提交历史将如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">commit A: Edit feature A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit BC: Add feature B and C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，在上述示例中，使用了 &lt;code>squash&lt;/code> 命令来将提交 B 合并到提交 A，并使用 &lt;code>s/commit A: Add feature A/Edit feature A/&lt;/code> 来编辑提交 A 的消息。&lt;/p>
&lt;p>请注意，在执行类似于 &lt;code>git rebase -i&lt;/code> 这样的操作时，一定要小心审查并确认你的更改，以免不小心破坏提交历史。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>git bisect 详细介绍下&lt;/p>
&lt;/blockquote>
&lt;p>git bisect 是 Git 提供的一个命令，用于帮助我们通过二分查找定位引入问题的提交。当我们在一个大型项目中发现了一个 bug，并且我们知道在之前的某个提交中出现了这个 bug，但是不知道具体是在哪个提交引入的时候，可以使用 git bisect 命令来快速定位。&lt;/p>
&lt;p>下面是 git bisect 的详细使用步骤：&lt;/p>
&lt;p>1、首先，进入到你的项目目录中，并确保你在一个干净的状态下（没有未提交的修改）。&lt;/p>
&lt;p>2、执行 git bisect start 命令，表示开始二分查找。&lt;/p>
&lt;p>3、通过 git bisect bad 命令告诉 Git 当前的代码状态是有问题的（即包含了 bug）。&lt;/p>
&lt;p>4、使用 git bisect good [好的提交号] 或者 git bisect good [好的标签名] 命令指定一个已知的“好”（即没有问题的）的提交。&lt;/p>
&lt;p>5、Git 会自动切换到一个中间的提交，并要求你测试这个提交是否存在 bug。根据测试结果使用 git bisect bad 或者 git bisect good 命令告诉 Git 这个中间提交是否含有 bug。&lt;/p>
&lt;p>6、重复步骤 5，Git 会根据你的测试结果不断地切换到新的中间提交，直到找到引入问题的提交。&lt;/p>
&lt;p>7、当 git bisect 定位到引入问题的提交时，Git 会给出相应的提示，并自动返回到该提交。&lt;/p>
&lt;p>8、最后，执行 git bisect reset 命令结束二分查找过程，Git 会将你的 HEAD 恢复到初始状态。&lt;/p>
&lt;p>通过以上步骤，你可以使用 git bisect 在复杂的代码历史中快速定位 bug 的引入提交。这个命令在大型项目中特别有用，可以节省定位问题的时间和精力。需要注意的是，你需要根据实际情况进行好坏提交的选择，并且在测试过程中保持良好的记录和反馈。&lt;/p>
&lt;p>要将之前所有提交中的密码更改为 &lt;code>***&lt;/code>，可以使用 &lt;code>git filter-branch&lt;/code> 命令结合自定义脚本来实现。请按照以下步骤进行操作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先，在你的项目目录下打开终端，并确保你当前在所需的分支上（例如，&lt;code>master&lt;/code> 分支）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行以下命令来备份你的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git branch backup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建一个名为 &lt;code>replace_password.sh&lt;/code> 的脚本文件，并使用文本编辑器打开它。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;code>replace_password.sh&lt;/code> 文件中，输入以下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">#!/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-files -z | while read -d &amp;#39;&amp;#39; -r file; do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [[ $file == *&amp;#34;&amp;lt;文件路径&amp;gt;&amp;#34;* ]]; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed -i &amp;#39;s/密码模式/*** /g&amp;#39; &amp;#34;$file&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">done
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>&amp;lt;文件路径&amp;gt;&lt;/code> 替换为包含密码的文件的路径或文件夹的路径。这将会在指定文件中查找并替换密码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存并关闭 &lt;code>replace_password.sh&lt;/code> 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行以下命令来添加执行权限给脚本文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">chmod +x replace_password.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>现在，运行以下命令来执行 &lt;code>git filter-branch&lt;/code> 操作，并使用脚本文件作为过滤器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git filter-branch --tree-filter &amp;#39;/path/to/replace_password.sh&amp;#39; --prune-empty HEAD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>/path/to/replace_password.sh&lt;/code> 替换为 &lt;code>replace_password.sh&lt;/code> 文件的实际路径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git 将会遍历所有的提交，并在每个提交上运行脚本文件，查找并替换指定文件中的密码。完成后，你的历史提交将被重写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你已经将这些提交推送到远程仓库，你需要使用 &lt;code>git push --force&lt;/code> 强制推送修改后的提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git push --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>这样，你就可以使用自定义脚本来批量替换之前所有提交中的密码。但请注意，执行 &lt;code>git filter-branch&lt;/code> 操作时，也要小心谨慎，因为它会修改提交历史。确保在操作之前备份代码，并在必要时咨询有经验的 Git 使用者或开发者。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>sparse-checkout 详细讲解下&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>sparse-checkout&lt;/code> 是 Git 的一个功能，用于部分克隆（partial clone）仓库。它允许你只检出仓库中指定目录或文件的内容，而不是完整地克隆整个仓库。这对于大型仓库或仅需要特定部分代码的情况非常有用，可以显著节省下载和存储空间。&lt;/p>
&lt;p>下面是 &lt;code>sparse-checkout&lt;/code> 的详细讲解：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>配置 &lt;code>sparse-checkout&lt;/code>：在进行部分克隆之前，需先配置 &lt;code>sparse-checkout&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git sparse-checkout init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加感兴趣的目录或文件：通过指定要检出的目录或文件，告诉 Git 哪些部分是你感兴趣的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git sparse-checkout &lt;span class="nb">set&lt;/span> &amp;lt;目录/文件&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以多次运行该命令来添加多个目录或文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完成部分克隆：现在你可以执行部分克隆命令，只拉取感兴趣的部分。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git clone --filter&lt;span class="o">=&lt;/span>blob:none &amp;lt;远程仓库URL&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，在使用 &lt;code>--filter=blob:none&lt;/code> 标志进行部分克隆时，仓库中的大文件将不会被下载，只有文件元数据（例如文件名和文件大小）会被获取。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新和同步：一旦你进行了部分克隆，你可以像常规 Git 仓库一样更新和同步。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git pull origin &amp;lt;分支&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git 会根据你配置的 &lt;code>sparse-checkout&lt;/code> 来更新和同步你感兴趣的部分。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总结来说，&lt;code>sparse-checkout&lt;/code> 提供了一种灵活的方式来只检出仓库中特定目录或文件的内容。它可以实现部分克隆，节省带宽和存储空间，并提高代码仓库的下载速度。记住，部分克隆功能在 Git 2.25 及更高版本中才可用。&lt;/p>
&lt;h2 id="三小结">三、小结：&lt;/h2>
&lt;p>附上一些常用缩写：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gc&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git config&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git status&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ga&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git add&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gaa&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git add -all&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gp&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git push&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git pull&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gc&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git commit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gcm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git commit -m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gcam&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git commit -am&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gb&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git branch&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gbr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git branch -r&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gba&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git branch -a&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gco&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git checkout&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gcb&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git checkout -b&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git merge&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gd&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git diff&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gdw&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git diff --word-diff&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">glg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git lg&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="四参考">四、参考&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="">gpt&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>git 常用操作</title><link>http://cugbtang.github.io/post/devops/series-git-3/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-3/</guid><description>&lt;h2 id="git-常用操作">git 常用操作&lt;/h2>
&lt;h2 id="一场景描述">一、场景描述&lt;/h2>
&lt;p>记录一些常用操作&lt;/p>
&lt;ul>
&lt;li>git status: 显示工作区和暂存区的状态&lt;/li>
&lt;li>git diff: 显示工作区和暂存区之间的差异&lt;/li>
&lt;li>git diff &amp;ndash;cached: 显示暂存区和最新提交之间的差异&lt;/li>
&lt;li>git diff [分支1] [分支2]: 比较两个分支之间的差异&lt;/li>
&lt;li>git grep [关键词]: 在整个代码库中搜索指定关键词&lt;/li>
&lt;li>git stash: 将当前修改暂存起来，切换到其他分支&lt;/li>
&lt;li>git reset &amp;ndash;hard [提交号]: 将当前分支的 HEAD 指针指向指定的提交，并重置工作区和暂存区&lt;/li>
&lt;li>git rm [文件]: 从版本控制中移除文件&lt;/li>
&lt;li>git rebase [提交号]: 交互式地合并、重新排序或编辑提交历史的&lt;/li>
&lt;li>git cherry-pick [提交号]: 选择某个提交，并将其应用到当前分支&lt;/li>
&lt;li>git blame [文件]: 显示指定文件的每一行是谁在哪个提交中修改的&lt;/li>
&lt;li>git blame -L [起始行号],[结束行号] [文件]: 仅显示指定行范围的文件是谁修改的&lt;/li>
&lt;li>git revert [提交号]: 创建一个新的提交，用于撤销指定的提交&lt;/li>
&lt;li>git bisect start: 启动二分查找来定位引入问题的提交&lt;/li>
&lt;li>git stash apply: 恢复最近一次暂存的修改，并将其从暂存堆栈中删除&lt;/li>
&lt;li>git reflog: 显示 HEAD 和分支的历史记录，包括已经被删除的提交&lt;/li>
&lt;li>git log &amp;ndash;author=[作者]: 显示特定作者的提交历史&lt;/li>
&lt;li>git tag [标签名] [提交号]: 在指定提交上创建一个标签&lt;/li>
&lt;li>git show-branch: 显示本地分支的历史和状态&lt;/li>
&lt;/ul>
&lt;h2 id="二问问-gpt1">二、问问 gpt&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>解释下git show&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>git show&lt;/code> 是一个非常有用的 Git 命令，它用于显示提交的详细信息和更改的内容。下面是 &lt;code>git show&lt;/code> 的详细讲解：&lt;/p>
&lt;p>基本语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git show [提交]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>[提交]&lt;/code>: 可选参数，表示要查看的提交，默认为最新的提交。&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>git show&lt;/code> 命令可以获取以下信息：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>提交信息：包括提交哈希值、作者、提交日期和提交消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改的文件：列出了与该提交相关的所有修改过的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件更改的具体内容：展示了每个文件的具体更改内容，即新增、修改或删除的行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码差异：以 diff 的形式显示当前提交与其父提交之间的代码差异。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他元数据：显示提交中的其他元数据，例如签名和标签。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>示例用法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">$ git show
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将显示最新提交的详细信息和更改的内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">$ git show abcdef123456
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将显示提交哈希值为 &lt;code>abcdef123456&lt;/code> 的提交的详细信息和更改的内容。&lt;/p>
&lt;p>&lt;code>git show&lt;/code> 命令在查看历史提交、检查代码更改、审查提交信息等方面非常有用。通过查看提交的详细信息，开发者可以更好地理解代码库的演变历史并进行必要的代码审查和调试。记住，你可以使用其他参数和选项来进一步定制 &lt;code>git show&lt;/code> 命令的输出。可以通过 &lt;code>git show --help&lt;/code> 查看详细的帮助文档。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>解释下 git rebase -i commit&lt;/p>
&lt;/blockquote>
&lt;p>当你运行 &lt;code>git rebase -i commit&lt;/code> 命令时，你可以使用交互式界面对提交历史进行编辑。下面是一个示例：&lt;/p>
&lt;p>假设你有如下的提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">commit C: Add feature C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit B: Add feature B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit A: Add feature A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你想要将提交 B 和提交 C 合并为一个提交，并编辑提交 A 的消息。你可以运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git rebase -i commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git 将会打开交互式界面，其中列出了提交历史的相关信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pick abcdef1 commit A: Add feature A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pick bcdef23 commit B: Add feature B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pick def4567 commit C: Add feature C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以对这些操作进行修改，以实现你的目标。在本例中，你可以将提交 B 和提交 C 合并为一个提交，然后编辑提交 A 的消息。你可以修改交互式界面如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pick abcdef1 commit A: Add feature A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">squash bcdef23 commit B: Add feature B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s/commit A: Add feature A/Edit feature A/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存并退出编辑器。Git 将会根据你的指示执行相应的操作。此时，Git 会自动合并提交 B 到提交 A，并修改提交 A 的消息。最终的提交历史将如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">commit A: Edit feature A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">commit BC: Add feature B and C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，在上述示例中，使用了 &lt;code>squash&lt;/code> 命令来将提交 B 合并到提交 A，并使用 &lt;code>s/commit A: Add feature A/Edit feature A/&lt;/code> 来编辑提交 A 的消息。&lt;/p>
&lt;p>请注意，在执行类似于 &lt;code>git rebase -i&lt;/code> 这样的操作时，一定要小心审查并确认你的更改，以免不小心破坏提交历史。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>git bisect 详细介绍下&lt;/p>
&lt;/blockquote>
&lt;p>git bisect 是 Git 提供的一个命令，用于帮助我们通过二分查找定位引入问题的提交。当我们在一个大型项目中发现了一个 bug，并且我们知道在之前的某个提交中出现了这个 bug，但是不知道具体是在哪个提交引入的时候，可以使用 git bisect 命令来快速定位。&lt;/p>
&lt;p>下面是 git bisect 的详细使用步骤：&lt;/p>
&lt;p>1、首先，进入到你的项目目录中，并确保你在一个干净的状态下（没有未提交的修改）。&lt;/p>
&lt;p>2、执行 git bisect start 命令，表示开始二分查找。&lt;/p>
&lt;p>3、通过 git bisect bad 命令告诉 Git 当前的代码状态是有问题的（即包含了 bug）。&lt;/p>
&lt;p>4、使用 git bisect good [好的提交号] 或者 git bisect good [好的标签名] 命令指定一个已知的“好”（即没有问题的）的提交。&lt;/p>
&lt;p>5、Git 会自动切换到一个中间的提交，并要求你测试这个提交是否存在 bug。根据测试结果使用 git bisect bad 或者 git bisect good 命令告诉 Git 这个中间提交是否含有 bug。&lt;/p>
&lt;p>6、重复步骤 5，Git 会根据你的测试结果不断地切换到新的中间提交，直到找到引入问题的提交。&lt;/p>
&lt;p>7、当 git bisect 定位到引入问题的提交时，Git 会给出相应的提示，并自动返回到该提交。&lt;/p>
&lt;p>8、最后，执行 git bisect reset 命令结束二分查找过程，Git 会将你的 HEAD 恢复到初始状态。&lt;/p>
&lt;p>通过以上步骤，你可以使用 git bisect 在复杂的代码历史中快速定位 bug 的引入提交。这个命令在大型项目中特别有用，可以节省定位问题的时间和精力。需要注意的是，你需要根据实际情况进行好坏提交的选择，并且在测试过程中保持良好的记录和反馈。&lt;/p>
&lt;p>要将之前所有提交中的密码更改为 &lt;code>***&lt;/code>，可以使用 &lt;code>git filter-branch&lt;/code> 命令结合自定义脚本来实现。请按照以下步骤进行操作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先，在你的项目目录下打开终端，并确保你当前在所需的分支上（例如，&lt;code>master&lt;/code> 分支）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行以下命令来备份你的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git branch backup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建一个名为 &lt;code>replace_password.sh&lt;/code> 的脚本文件，并使用文本编辑器打开它。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;code>replace_password.sh&lt;/code> 文件中，输入以下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">#!/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-files -z | while read -d &amp;#39;&amp;#39; -r file; do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [[ $file == *&amp;#34;&amp;lt;文件路径&amp;gt;&amp;#34;* ]]; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed -i &amp;#39;s/密码模式/*** /g&amp;#39; &amp;#34;$file&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">done
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>&amp;lt;文件路径&amp;gt;&lt;/code> 替换为包含密码的文件的路径或文件夹的路径。这将会在指定文件中查找并替换密码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存并关闭 &lt;code>replace_password.sh&lt;/code> 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行以下命令来添加执行权限给脚本文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">chmod +x replace_password.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>现在，运行以下命令来执行 &lt;code>git filter-branch&lt;/code> 操作，并使用脚本文件作为过滤器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git filter-branch --tree-filter &amp;#39;/path/to/replace_password.sh&amp;#39; --prune-empty HEAD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &lt;code>/path/to/replace_password.sh&lt;/code> 替换为 &lt;code>replace_password.sh&lt;/code> 文件的实际路径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git 将会遍历所有的提交，并在每个提交上运行脚本文件，查找并替换指定文件中的密码。完成后，你的历史提交将被重写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你已经将这些提交推送到远程仓库，你需要使用 &lt;code>git push --force&lt;/code> 强制推送修改后的提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">git push --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>这样，你就可以使用自定义脚本来批量替换之前所有提交中的密码。但请注意，执行 &lt;code>git filter-branch&lt;/code> 操作时，也要小心谨慎，因为它会修改提交历史。确保在操作之前备份代码，并在必要时咨询有经验的 Git 使用者或开发者。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>sparse-checkout 详细讲解下&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>sparse-checkout&lt;/code> 是 Git 的一个功能，用于部分克隆（partial clone）仓库。它允许你只检出仓库中指定目录或文件的内容，而不是完整地克隆整个仓库。这对于大型仓库或仅需要特定部分代码的情况非常有用，可以显著节省下载和存储空间。&lt;/p>
&lt;p>下面是 &lt;code>sparse-checkout&lt;/code> 的详细讲解：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>配置 &lt;code>sparse-checkout&lt;/code>：在进行部分克隆之前，需先配置 &lt;code>sparse-checkout&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git sparse-checkout init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加感兴趣的目录或文件：通过指定要检出的目录或文件，告诉 Git 哪些部分是你感兴趣的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git sparse-checkout &lt;span class="nb">set&lt;/span> &amp;lt;目录/文件&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以多次运行该命令来添加多个目录或文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完成部分克隆：现在你可以执行部分克隆命令，只拉取感兴趣的部分。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git clone --filter&lt;span class="o">=&lt;/span>blob:none &amp;lt;远程仓库URL&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，在使用 &lt;code>--filter=blob:none&lt;/code> 标志进行部分克隆时，仓库中的大文件将不会被下载，只有文件元数据（例如文件名和文件大小）会被获取。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新和同步：一旦你进行了部分克隆，你可以像常规 Git 仓库一样更新和同步。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git pull origin &amp;lt;分支&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git 会根据你配置的 &lt;code>sparse-checkout&lt;/code> 来更新和同步你感兴趣的部分。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总结来说，&lt;code>sparse-checkout&lt;/code> 提供了一种灵活的方式来只检出仓库中特定目录或文件的内容。它可以实现部分克隆，节省带宽和存储空间，并提高代码仓库的下载速度。记住，部分克隆功能在 Git 2.25 及更高版本中才可用。&lt;/p>
&lt;h2 id="三小结">三、小结：&lt;/h2>
&lt;p>附上一些常用缩写：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gc&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git config&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git status&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">g&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ga&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git add&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gaa&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git add -all&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gp&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git push&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git pull&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gc&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git commit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gcm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git commit -m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gcam&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git commit -am&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gb&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git branch&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gbr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git branch -r&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gba&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git branch -a&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gco&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git checkout&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gcb&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git checkout -b&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git merge&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gd&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git diff&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gdw&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git diff --word-diff&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">glg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;git lg&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="四参考">四、参考&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="">gpt&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>git 部分功能需要先上线，怎么办？</title><link>http://cugbtang.github.io/post/devops/series-git-1/</link><pubDate>Sun, 30 Jul 2023 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-git-1/</guid><description>&lt;h2 id="git-部分功能需要先上线怎么办">git 部分功能需要先上线，怎么办？&lt;/h2>
&lt;h2 id="一场景描述">一、场景描述&lt;/h2>
&lt;p>在这个项目中，代码的提交和合并都是在develop分支上进行的， 之前已经基于某个commit打了tag v1.0.0。然而，这次由于迭代过程中需要提前上线部分功能，我们需要将这部分功能的commit摘出来，并打上一个tag v1.1.0 作为标识。&lt;/p>
&lt;h2 id="二问问-gpt1">二、问问 gpt&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>首先，我们可以使用Git命令行或者图形化界面工具来处理这个需求。假设我们当前的工作目录在develop分支上。&lt;/p>
&lt;ul>
&lt;li>确保你的本地develop分支是最新的，可以执行以下命令拉取最新的代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git pull origin develop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>查看git log，找到需要提前上线的commit的哈希值或者commit消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用以下命令将指定的commit摘出来并创建一个新的分支（例如feature-branch）：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git checkout -b feature-branch &amp;lt;commit&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将创建一个新的分支，并将代码库中指定的commit复制到该分支上。&lt;/p>
&lt;ul>
&lt;li>使用以下命令将涉及到这次提前发布需要的commit提交应用到feature-branch分支：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git cherry-pick &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt; &amp;lt;commit1&amp;gt; &amp;lt;commit1&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，&lt;code>&amp;lt;commit&amp;gt;&lt;/code> 可以是提交的哈希值或者提交消息。&lt;/p>
&lt;ul>
&lt;li>接下来，我们需要打上一个tag来标识这个版本。使用以下命令创建一个tag（例如v1.1.0）：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git tag v1.1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将在当前commit上创建一个tag。&lt;/p>
&lt;ul>
&lt;li>最后，将创建的分支和tag推送到远程仓库：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git push origin feature-branch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin v1.1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将把新的分支和tag推送到远程仓库中，以便团队成员可以访问和查看。&lt;/p>
&lt;h2 id="三小结">三、小结：&lt;/h2>
&lt;ul>
&lt;li>基于某个commit checkout&lt;/li>
&lt;li>cherry-pick&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;h2 id="四参考">四、参考&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="">gpt&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://www.git-scm.com/docs/git-cherry-pick">git-cherry-pick&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Container, how to play?</title><link>http://cugbtang.github.io/post/container/series-container-1/</link><pubDate>Wed, 01 Jun 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/container/series-container-1/</guid><description>&lt;p>container technology become a necessary for developer during operating the linux system.&lt;/p>
&lt;h2 id="1namespace">1、namespace&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定义&lt;/p>
&lt;p>namespace是 Linux 内核的一项功能，该功能对内核资源进行分区，以使一组进程看到一组资源，而另一组进程看到另一组资源。namespace 的工作方式通过为一组资源和进程设置相同的 namespace 而起作用，但是这些 namespace 引用了不同的资源。资源可能存在于多个 namespace 中。这些资源可以是进程ID、主机名、用户ID、文件名、与网络访问相关的名称和进程间通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特征&lt;/p>
&lt;p>可以实现在同一主机系统中对进程ID、主机名、用户名ID、文件名、网络和进程间通信等资源的隔离。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">namespace&lt;/th>
&lt;th style="text-align:center">summary&lt;/th>
&lt;th style="text-align:center">kernel&lt;/th>
&lt;th>describe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Mount(mnt)&lt;/td>
&lt;td style="text-align:center">隔离挂载点&lt;/td>
&lt;td style="text-align:center">2.4.19&lt;/td>
&lt;td>隔离不同的进程或进程组看到的挂载点，实现容器内只能看到自己的挂在信息，在容器内的挂载操作不会影响主机的挂载目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Process ID(pid)&lt;/td>
&lt;td style="text-align:center">隔离进程 ID&lt;/td>
&lt;td style="text-align:center">2.6.24&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Network(net)&lt;/td>
&lt;td style="text-align:center">隔离网络设备，端口号等&lt;/td>
&lt;td style="text-align:center">2.6.29&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Interprocess Communication(ipc)&lt;/td>
&lt;td style="text-align:center">隔离 System VIPC 和 POSIX message queues&lt;/td>
&lt;td style="text-align:center">2.6.19&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">UTS Namespace(uts)&lt;/td>
&lt;td style="text-align:center">隔离主机名和域名&lt;/td>
&lt;td style="text-align:center">2.6.19&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">User Namespace(user)&lt;/td>
&lt;td style="text-align:center">隔离用户和用户组&lt;/td>
&lt;td style="text-align:center">3.8&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Control group(cgroup) Namespce&lt;/td>
&lt;td style="text-align:center">隔离 Cgroups 根目录&lt;/td>
&lt;td style="text-align:center">4.6&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Time Namespace&lt;/td>
&lt;td style="text-align:center">隔离系统时间&lt;/td>
&lt;td style="text-align:center">5.6&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="mount-namespace">Mount Namespace&lt;/h3>
&lt;p>使用 unshare 命令可以新建 Mount Namespace，并且在新建的 Mount Namespace 内 mount 是和外部完全隔离的。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>创建一个bash 进程并且新建一个 Mount Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ sudo unshare --mount --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>验证在独立的 namespce 内挂载文件，不影响别的&lt;/p>
&lt;p>在 /tmp 目录下创建一个目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># mkdir /tmp/tmpfs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 mount 命令挂载一个 tmpfs 类型的目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># mount -t tmpfs -o size=20m tmpfs /tmp/tmpfs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 df 命令查看已经挂载的目录信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># df -h&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/dev/sda1 40G 3.8G 37G 10% /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtmpfs 457M &lt;span class="m">0&lt;/span> 457M 0% /dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /dev/shm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /sys/fs/cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M 13M 451M 3% /run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 93M &lt;span class="m">0&lt;/span> 93M 0% /run/user/1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//172.29.0.1/vgt-2469b42ebff188de622646551002b263-6ad5fdbcbf2eaa93bd62f92333a2e6e5 466G 171G 295G 37% /vagrant
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 20M &lt;span class="m">0&lt;/span> 20M 0% /tmp/tmpfs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>新打开一个命令窗口，执行 df 命令查看主机的挂载信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ df -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtmpfs 457M &lt;span class="m">0&lt;/span> 457M 0% /dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /dev/shm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M 13M 451M 3% /run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /sys/fs/cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/dev/sda1 40G 3.8G 37G 10% /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//172.29.0.1/vgt-2469b42ebff188de622646551002b263-6ad5fdbcbf2eaa93bd62f92333a2e6e5 466G 171G 295G 37% /vagrant
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 93M &lt;span class="m">0&lt;/span> 93M 0% /run/user/1000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>基本验证完毕。接着我们查看新的mount namespace 信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ls -l /proc/self/ns/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 ipc -&amp;gt; ipc:&lt;span class="o">[&lt;/span>4026531839&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 mnt -&amp;gt; mnt:&lt;span class="o">[&lt;/span>4026532117&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 net -&amp;gt; net:&lt;span class="o">[&lt;/span>4026531956&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 pid -&amp;gt; pid:&lt;span class="o">[&lt;/span>4026531836&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 user -&amp;gt; user:&lt;span class="o">[&lt;/span>4026531837&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 uts -&amp;gt; uts:&lt;span class="o">[&lt;/span>4026531838&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>新打开一个命令窗口，使用相同的命令查看主机上的 namespace 信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ ls -l /proc/self/ns/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 ipc -&amp;gt; ipc:&lt;span class="o">[&lt;/span>4026531839&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 mnt -&amp;gt; mnt:&lt;span class="o">[&lt;/span>4026531840&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 net -&amp;gt; net:&lt;span class="o">[&lt;/span>4026531956&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 pid -&amp;gt; pid:&lt;span class="o">[&lt;/span>4026531836&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 user -&amp;gt; user:&lt;span class="o">[&lt;/span>4026531837&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 uts -&amp;gt; uts:&lt;span class="o">[&lt;/span>4026531838&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="pid-namespace">PID Namespace&lt;/h3>
&lt;blockquote>
&lt;p>用来隔离进程，在不同的namespace内可以拥有相同的进程号&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>创建一个 bash 进程，并且新建一个 PID Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ sudo unshare --pid --fork --mount-proc /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在当前的命令行窗口使用 ps aux 命令查看进程信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ps aux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root &lt;span class="m">1&lt;/span> 0.0 0.2 &lt;span class="m">15792&lt;/span> &lt;span class="m">2616&lt;/span> pts/3 S 13:59 0:00 /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root &lt;span class="m">16&lt;/span> 0.0 0.1 &lt;span class="m">55192&lt;/span> &lt;span class="m">1844&lt;/span> pts/3 R+ 14:02 0:00 ps aux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="uts-namespace">UTS Namespace&lt;/h3>
&lt;blockquote>
&lt;p>它允许每个UTS Namespace 拥有一个独立的主机名&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>使用 unshare 命令创建一个 UTS Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ sudo unshare --uts --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 hostname 命令设置主机&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># hostname -b docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>新打开一个命令行窗口，使用相同的命令查看主机的hostname&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># localhost&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="ipc-namespace">IPC Namespace&lt;/h3>
&lt;blockquote>
&lt;p>主要用来隔离进程间通信的。PID Namespace 和 IPC Namespace一起使用可以实现同一 IPC Namespace 内的进程彼此可以通信，不同 IPC Namespace 的进程却不能通信。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>使用 unshare 命令创建一个 IPC Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ sudo unshare --ipc --fork /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>另起一个窗口，查看系统的通信进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ ipcs -q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------ Message Queues --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key msqid owner perms used-bytes messages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在新的ipc namespace下新建一个进程通信队列&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ipcmk -Q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Message queue id: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看当前ipc namespace 下的系统通信队列列表&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ipcs -q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------ Message Queues --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key msqid owner perms used-bytes messages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x2ae315e9 &lt;span class="m">0&lt;/span> root &lt;span class="m">644&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>再次查看主机的系统通信队列&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ ipcs -q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------ Message Queues --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key msqid owner perms used-bytes messages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="user-namespace">User Namespace&lt;/h3>
&lt;blockquote>
&lt;p>主要用来隔离用户和用户组。可以实现进程在容器内拥有 root 权限， 而在主机上却只是普通用户。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>以普通用户的身份创建一个 User Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ unshare --user --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">unshare: unshare failed: Invalid argument
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看内核版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ uname -a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Linux docker 3.10.0-1127.el7.x86_64 &lt;span class="c1">#1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查阅资料&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># max_user_namespaces文件记录了允许创建的user namespace数量，我的CentOS 7.5默认是0，修改之&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="m">2147483647&lt;/span> &amp;gt; /proc/sys/user/max_user_namespaces
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 再次运行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ unshare --user -r /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker ~&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行 id 命令查看当前的用户信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">uid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span> &lt;span class="nv">gid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span> &lt;span class="nv">groups&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span>,65534&lt;span class="o">(&lt;/span>nfsnobody&lt;span class="o">)&lt;/span> &lt;span class="nv">context&lt;/span>&lt;span class="o">=&lt;/span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在当前窗口执行 reboot 命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># reboot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Failed to open /dev/initctl: Permission denied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Failed to talk to init daemon.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="net-namespace">Net Namespace&lt;/h3>
&lt;blockquote>
&lt;p>用来隔离网络设备、IP地址和端口等信息。&lt;/p>
&lt;p>可以让每个进程拥有自己独立的IP地址，端口和网卡信息&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>首先查看主机上的ip 信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ ip a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">65536&lt;/span> qdisc noqueue state UNKNOWN group default qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet 127.0.0.1/8 scope host lo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet6 ::1/128 scope host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">1500&lt;/span> qdisc mq state UP group default qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/ether 00:15:5d:25:01:09 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet 172.29.5.132/20 brd 172.29.15.255 scope global noprefixroute dynamic eth0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft 82979sec preferred_lft 82979sec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet6 fe80::215:5dff:fe25:109/64 scope link
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3: docker0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span class="m">1500&lt;/span> qdisc noqueue state DOWN group default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/ether 02:42:f0:82:11:e0 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建 net namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ sudo unshare --net --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 ip a命令查看当前namespace的网络信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ip a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: lo: &amp;lt;LOOPBACK&amp;gt; mtu &lt;span class="m">65536&lt;/span> qdisc noop state DOWN group default qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="为什么-docker-需要-namespace">为什么 docker 需要 namespace?&lt;/h3>
&lt;p>Linux 内核从2002年2.4.19版本开始加入了 Mount Namspace&lt;/p>
&lt;p>内核3.8版本加入了 User Namespace 为容器提供了足够的支持功能&lt;/p>
&lt;p>当 docker 新建一个容器时&lt;/p>
&lt;p>会创建这六种 namespace， 然后将容器中的进程加入这些 namespace之中&lt;/p>
&lt;h1 id="cgroups">Cgroups&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>定义&lt;/p>
&lt;p>全程是 control groups， 是Linux 内核的一个功能。可以实现限制进程或者进程组的资源（cpu、mem、磁盘IO等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特征&lt;/p>
&lt;p>资源限制：限制资源的使用量&lt;/p>
&lt;p>优先级控制： 不同的组可以有不用的资源使用优先级&lt;/p>
&lt;p>审计：计算控制组的资源使用情况&lt;/p>
&lt;p>控制： 控制进程的挂起或恢复&lt;/p>
&lt;/li>
&lt;li>
&lt;p>核心&lt;/p>
&lt;p>subsystem: 一个内核的组件，代表一类资源调度控制器&lt;/p>
&lt;p>cgroup： 表示一组进程和一组带有参数的子系统的关联关系&lt;/p>
&lt;p>hierarchy：由一些列的控制组按照树状结构排列组成的子控制组默认拥有父控制组的属性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="subsystem">subsystem&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>查看当前主机使用了哪些子系统&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ sudo mount -t cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/systemd &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent&lt;span class="o">=&lt;/span>/usr/lib/systemd/systemd-cgroups-agent,name&lt;span class="o">=&lt;/span>systemd&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/cpuset &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuset&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/cpu,cpuacct &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/perf_event &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,perf_event&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/blkio &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,blkio&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/memory &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,memory&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/hugetlb &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/freezer &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,freezer&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/net_cls,net_prio &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/devices &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,devices&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/pids &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,pids&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>以 cpu 子系统为例，演示 cgroups 如何限制进程的 cpu使用时间&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#在cpu子系统下创建测试文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir /sys/fs/cgroup/cpu/mydocker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#查看&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ls /sys/fs/cgroup/cpu/mydocker -l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cgroup.clone_children
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--w--w--w-. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cgroup.event_control
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cgroup.procs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpuacct.stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpuacct.usage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpuacct.usage_percpu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.cfs_period_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.cfs_quota_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.rt_period_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.rt_runtime_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.shares
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 notify_on_release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 tasks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将当前shell进程加入cgroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># echo $$&amp;gt; tasks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看tasks文件内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>mem&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在memory子系统下创建cgroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># mkdir /sys/fs/cgroup/memory/mydocker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看新建目录中的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># ls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup.clone_children
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup.event_control
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup.procs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.force_empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.slabinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.move_charge_at_immigrate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.numa_stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.oom_control
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.pressure_level
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.soft_limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.swappiness
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.use_hierarchy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">notify_on_release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tasks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 限制内存使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># echo 1073741824 &amp;gt; memory.limit_in_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将当前shell写入tasks内&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># echo $$&amp;gt;tasks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># cat tasks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3356&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3484&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 申请内存，当达到1G时 被杀死&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># memtester 1500M 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memtester version 4.3.0 &lt;span class="o">(&lt;/span>64-bit&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span> 2001-2012 Charles Cazabon.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Licensed under the GNU General Public License version &lt;span class="m">2&lt;/span> &lt;span class="o">(&lt;/span>only&lt;span class="o">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesize is &lt;span class="m">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesizemask is 0xfffffffffffff000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">want 1500MB &lt;span class="o">(&lt;/span>&lt;span class="m">1572864000&lt;/span> bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">got 1500MB &lt;span class="o">(&lt;/span>&lt;span class="m">1572864000&lt;/span> bytes&lt;span class="o">)&lt;/span>, trying mlock ...Killed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改申请大小，完美&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># memtester 500M 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memtester version 4.3.0 &lt;span class="o">(&lt;/span>64-bit&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span> 2001-2012 Charles Cazabon.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Licensed under the GNU General Public License version &lt;span class="m">2&lt;/span> &lt;span class="o">(&lt;/span>only&lt;span class="o">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesize is &lt;span class="m">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesizemask is 0xfffffffffffff000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">want 500MB &lt;span class="o">(&lt;/span>&lt;span class="m">524288000&lt;/span> bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">got 500MB &lt;span class="o">(&lt;/span>&lt;span class="m">524288000&lt;/span> bytes&lt;span class="o">)&lt;/span>, trying mlock ...locked.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Loop 1/1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Stuck Address : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Random Value : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare XOR : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare SUB : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare MUL : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare DIV : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare OR : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare AND : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Sequential Increment: ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Solid Bits : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Block Sequential : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Checkerboard : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Bit Spread : ok
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>docker 是如何使用cgroups的？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run -ti -m&lt;span class="o">=&lt;/span>1g nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>kubeadm startup Kubernetes less than v1.20.0 (centos+docker+ipvs+calico)</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-2/</link><pubDate>Sun, 15 May 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-2/</guid><description>&lt;h2 id="一更新系统软件全部节点">一、更新系统软件（全部节点）&lt;/h2>
&lt;p>由于 Docker 对系统内核有一定的要求，所以我们最好使用 yum 来更新系统软件及其内核。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#备份本地 yum 源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取阿里 yum 源配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#清理 yum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum clean all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#更新软件版本并且更新现有软件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum -y update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="二基础环境设置全部节点">二、基础环境设置（全部节点）&lt;/h2>
&lt;p>Kubernetes 需要一定的环境来保证正常运行，如各个节点时间同步，主机名称解析，关闭防火墙等等。&lt;/p>
&lt;h3 id="1修改-host">1、修改 Host&lt;/h3>
&lt;p>分布式系统环境中的多主机通信通常基于主机名称进行，这在 IP 地址存在变化的可能性时为主机提供了固定的访问入口，因此一般需要有专用的 DNS 服务负责解析各节点主机。考虑到此处部署的是&lt;strong>测试集群&lt;/strong>，因此为了降低系复杂度，这里将基于 hosts 的文件进行主机名称解析。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ vim /etc/hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 加入以下内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.2.11 k8s-master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.2.12 k8s-node-01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.2.13 k8s-node-02
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2修改-hostname">2、修改 Hostname&lt;/h3>
&lt;p>kubernetes 中会以各个服务的 hostname 为其节点命名，所以需要进入不同的服务器修改 hostname 名称。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#修改 192.168.2.11 服务器，设置 hostname，然后将 hostname 写入 hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ hostnamectl set-hostname k8s-master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1 &lt;/span>&lt;span class="k">$(&lt;/span>hostname&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#修改 192.168.2.12 服务器，设置 hostname，然后将 hostname 写入 hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ hostnamectl set-hostname k8s-node-01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1 &lt;/span>&lt;span class="k">$(&lt;/span>hostname&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#修改 192.168.2.13 服务器，设置 hostname，然后将 hostname 写入 hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ hostnamectl set-hostname k8s-node-02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1 &lt;/span>&lt;span class="k">$(&lt;/span>hostname&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/hosts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3主机时间同步">3、主机时间同步&lt;/h3>
&lt;p>etcd 集群各机器需要时间同步，chrony 用于系统时间同步；&lt;/p>
&lt;p>将各个服务器的时间同步，并设置开机启动同步时间服务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> $ timedatectl set-timezone Asia/Shanghai
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ systemctl start chronyd.service &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> systemctl &lt;span class="nb">enable&lt;/span> chronyd.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#查看&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ timedatectl status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#System clock synchronized: yes,表示时钟已同步；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># NTP service: active,表示开启了时钟同步服务；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># RTC in local TZ: no&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 将当前的 UTC 时间写入硬件时钟&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timedatectl set-local-rtc &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 重启依赖于系统时间的服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl restart rsyslog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl restart crond
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4关闭防火墙服务">4、关闭防火墙服务&lt;/h3>
&lt;p>关闭防火墙，并禁止开启启动；顺便清理一下规则。&lt;/p>
&lt;p>注意：因为是测试环境，为了&lt;strong>方便、简单&lt;/strong>，直接关闭；但最好&lt;strong>不要关闭&lt;/strong>，通过操作防火墙，让固定流量放行即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">systemctl stop firewalld &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> systemctl disable firewalld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iptables -F &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> iptables -X &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> iptables -F -t nat &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> iptables -X -t nat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如果各个主机启用了防火墙策略，需要开放Kubernetes各个组件所需要的端口，可以查看&lt;a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/">Installing kubeadm&lt;/a>中的&amp;quot;Check required ports&amp;quot;一节开放相关端口或者关闭主机的防火墙&lt;/p>
&lt;/blockquote>
&lt;h3 id="5关闭并禁用selinux">5、关闭并禁用SELinux&lt;/h3>
&lt;p>关闭SELinux，并编辑 /etc/sysconfig selinux 文件，以彻底禁用 SELinux&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ setenforce &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sed -i &lt;span class="s1">&amp;#39;s/^SELINUX=enforcing$/SELINUX=disabled/&amp;#39;&lt;/span> /etc/selinux/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sed -i &lt;span class="s1">&amp;#39;s/^SELINUX=.*/SELINUX=disabled/&amp;#39;&lt;/span> /etc/selinux/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看selinux状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ getenforce
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="6禁用-swap-设备">6、禁用 Swap 设备&lt;/h3>
&lt;p>关闭当前已启用的所有 Swap 设备：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ swapoff -a &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sysctl -w vm.swappiness&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑 fstab 配置文件，注释掉标识为 Swap 设备的所有行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ vi /etc/fstab
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#/dev/mapper/centos-swap swap swap defaults 0 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sed -i &lt;span class="s1">&amp;#39;/ swap / s/^\(.*\)$/#\1/g&amp;#39;&lt;/span> /etc/fstab
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="7设置内核网络模块参数">7、设置内核网络模块参数&lt;/h3>
&lt;p>加载netfilter模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/modules-load.d/k8s-net-modules.conf.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">br_netfilter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EOF
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行以下命令使模块生效:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#挂载 br_netfilter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ modprobe br_netfilter
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置内核参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/k8s.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_slow_start_after_idle=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.core.rmem_max=16777216
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">fs.inotify.max_user_watches=1048576
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.softlockup_all_cpu_backtrace=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.softlockup_panic=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">fs.file-max=2097152
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">fs.nr_open=2097152
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">fs.inotify.max_user_instances=8192
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">fs.inotify.max_queued_events=16384
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">vm.max_map_count=262144
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.core.netdev_max_backlog=16384
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_wmem=4096 12582912 16777216
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.core.wmem_max=16777216
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.core.somaxconn=32768
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.ip_forward=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_max_syn_backlog=8096
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.bridge.bridge-nf-call-iptables=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.bridge.bridge-nf-call-ip6tables=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.bridge.bridge-nf-call-arptables=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_rmem=4096 12582912 16777216
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">vm.swappiness=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.sysrq=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.neigh.default.gc_stale_time=120
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.conf.all.rp_filter=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.conf.default.rp_filter=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.conf.default.arp_announce=2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.conf.lo.arp_announce=2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.conf.all.arp_announce=2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_max_tw_buckets=5000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_syncookies=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_synack_retries=2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv6.conf.lo.disable_ipv6=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv6.conf.all.disable_ipv6=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv6.conf.default.disable_ipv6=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv6.conf.all.forwarding=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.ip_local_port_range=1024 65535
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_keepalive_time=600
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_keepalive_probes=10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_keepalive_intvl=30
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.nf_conntrack_max=25000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.netfilter.nf_conntrack_max=25000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.netfilter.nf_conntrack_tcp_timeout_established=180
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.netfilter.nf_conntrack_tcp_timeout_time_wait=120
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.netfilter.nf_conntrack_tcp_timeout_close_wait=60
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.netfilter.nf_conntrack_tcp_timeout_fin_wait=12
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_timestamps=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_orphan_retries=3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.pid_max=4194303
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_tw_reuse=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.tcp_fin_timeout=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">vm.min_free_kbytes=262144
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.msgmnb=65535
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.msgmax=65535
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.shmmax=68719476736
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.shmall=4294967296
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kernel.core_uses_pid=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.neigh.default.gc_thresh1=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.neigh.default.gc_thresh2=4096
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.neigh.default.gc_thresh3=8192
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.netfilter.nf_conntrack_tcp_timeout_close=3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.conf.all.route_localnet=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：关闭 tcp_tw_recycle，否则与 NAT 冲突，可能导致服务不通；
内核低于4版本添加 fs.may_detach_mounts=1&lt;/p>
&lt;/blockquote>
&lt;p>使配置生效：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#使配置生效&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sysctl -p /etc/sysctl.d/k8s.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#查看是否生成相关文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ls /proc/sys/net/bridge
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="8设置内核-ipvs-模块">8、设置内核 IPVS 模块&lt;/h3>
&lt;p>由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：&lt;/p>
&lt;ul>
&lt;li>ip_vs&lt;/li>
&lt;li>ip_vs_rr&lt;/li>
&lt;li>ip_vs_wrr&lt;/li>
&lt;li>ip_vs_sh&lt;/li>
&lt;li>nf_conntrack_ipv4 （内核4版本以上 nf_conntrack 替换 nf_conntrack_ipv4）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ cat &amp;gt; /etc/sysconfig/modules/ipvs.modules &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs_rr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs_wrr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs_sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- nf_conntrack_ipv4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行脚本并查看是否正常加载内核模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#修改脚本权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">755&lt;/span> /etc/sysconfig/modules/ipvs.modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#执行脚本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bash /etc/sysconfig/modules/ipvs.modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#查看是否已经正确加载所需的内核模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ lsmod &lt;span class="p">|&lt;/span> grep -e ip_vs -e nf_conntrack_ipv4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注：上面脚本创建了的&lt;code>/etc/sysconfig/modules/ipvs.modules&lt;/code>文件，保证在节点重启后能自动加载所需模块。 使用&lt;code>lsmod | grep -e ip_vs -e nf_conntrack_ipv4&lt;/code>命令查看是否已经正确加载所需的内核模块。&lt;/p>
&lt;/blockquote>
&lt;p>接下来还需要确保各个节点上已经安装了ipset软件包，为了便于查看ipvs的代理规则，最好安装一下管理工具ipvsadm。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ yum install -y ipset ipvsadm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如果以上前提条件如果不满足，则即使kube-proxy的配置开启了ipvs模式，也会退回到iptables模式&lt;/p>
&lt;/blockquote>
&lt;h3 id="9配置资源限制">9、配置资源限制&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* soft nofile 655360&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/security/limits.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* hard nofile 655360&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/security/limits.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* soft nproc 655360&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/security/limits.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* hard nproc 655360&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/security/limits.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* soft memlock unlimited&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/security/limits.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* hard memlock unlimited&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/security/limits.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>centos7还需修改：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sed -i &lt;span class="s1">&amp;#39;s/4096/655350/&amp;#39;&lt;/span> /etc/security/limits.d/20-nproc.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="10安装依赖包以及相关工具">10、安装依赖包以及相关工具&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ yum install -y epel-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install -y yum-utils device-mapper-persistent-data lvm2 net-tools conntrack-tools wget vim ntpdate libseccomp libtool-ltdl chrony conntrack jq iptables curl sysstat libseccomp wget socat git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="三规划">三、规划&lt;/h2>
&lt;blockquote>
&lt;p>先安装kubeadm(跳到第四步)，初步查看本次安装的kubernetes各个组件的版本&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 例如：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubeadm config images list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I0516 11:23:19.087877 &lt;span class="m">1340&lt;/span> version.go:255&lt;span class="o">]&lt;/span> remote version is much newer: v1.24.0&lt;span class="p">;&lt;/span> falling back to: stable-1.23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/kube-apiserver:v1.16.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/kube-controller-manager:v1.16.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/kube-scheduler:v1.16.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/kube-proxy:v1.16.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/pause:3.6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/etcd:3.5.1-0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/coredns/coredns:v1.8.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="四系统环境">四、系统环境&lt;/h2>
&lt;ul>
&lt;li>CentOS 版本：7.7&lt;/li>
&lt;li>Docker 版本：18.09.9-3&lt;/li>
&lt;li>Calico 版本：v3.10&lt;/li>
&lt;li>Kubernetes 版本：1.16.3&lt;/li>
&lt;li>Kubernetes Newwork 模式：IPVS&lt;/li>
&lt;li>Kubernetes Dashboard 版本：dashboard:v2.0.0-beta6&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>地址&lt;/th>
&lt;th>主机名&lt;/th>
&lt;th>内存&amp;amp;CPU&lt;/th>
&lt;th>角色&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>192.168.2.11&lt;/td>
&lt;td>k8s-master&lt;/td>
&lt;td>2C &amp;amp; 2G&lt;/td>
&lt;td>master&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>192.168.2.12&lt;/td>
&lt;td>k8s-node-01&lt;/td>
&lt;td>4c &amp;amp; 8G&lt;/td>
&lt;td>node&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>192.168.2.13&lt;/td>
&lt;td>k8s-node-02&lt;/td>
&lt;td>4c &amp;amp; 8G&lt;/td>
&lt;td>node&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="五安装docker全部节点">五、安装Docker（全部节点）&lt;/h2>
&lt;h3 id="1移除之前安装过的docker">1、移除之前安装过的Docker&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo yum -y remove docker &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-client &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-client-latest &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-common &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-latest &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-latest-logrotate &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-logrotate &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-selinux &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-engine-selinux &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-ce-cli &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> docker-engine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看还有没有存在的 Docker 组件，一定要确保删除干净：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ rpm -qa &lt;span class="p">|&lt;/span> grep docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有则通过命令 yum -y remove XXX 来删除，比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ yum remove docker-ce-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2更换-docker-的-yum-源">2、更换 Docker 的 yum 源&lt;/h3>
&lt;p>由于官方下载速度比较慢，所以需要更改 Docker 安装的 yum 源，这里推荐用阿里镜像源：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3显示-docker-所有可安装版本">3、显示 docker 所有可安装版本：&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> sudo yum list docker-ce --showduplicates &lt;span class="p">|&lt;/span>sort -r
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * updates: mirrors.aliyun.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Loading mirror speeds from cached hostfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Loaded plugins: fastestmirror
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Installed Packages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * extras: mirrors.aliyun.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.9-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.8-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.7-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.6-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.5-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.4-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.3-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.2-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.16-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.15-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.14-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.1-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.13-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.12-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.11-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.10-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-ce.x86_64 3:20.10.0-3.el7 docker-ce-stable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4安装指定版本-docker">4、安装指定版本 docker&lt;/h3>
&lt;blockquote>
&lt;p>注意：安装前&lt;strong>一定要&lt;/strong>提前查询将要安装的 Kubernetes 版本是否和 Docker 版本对应。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ yum install -y docker-ce-18.09.9-3.el7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置镜像存储目录，找到大点的挂载的目录进行存储&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ vi /lib/systemd/system/docker.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#找到这行，往后面加上存储目录，例如这里是 --graph /apps/docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>/usr/bin/docker --graph /apps/docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="5配置-docker-参数和镜像加速器">5、配置 Docker 参数和镜像加速器&lt;/h3>
&lt;p>Kubernetes 推荐的一些 Docker 配置参数，这里配置一下。还有就是由于国内访问 Docker 仓库速度很慢，所以国内几家云厂商推出镜像加速下载的代理加速器，这里也需要配置一下。&lt;/p>
&lt;p>创建 Docker 配置文件的目录并添加配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ mkdir -p /etc/docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat &amp;gt; /etc/docker/daemon.json &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;exec-opts&amp;#34;: [&amp;#34;native.cgroupdriver=systemd&amp;#34;],
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;registry-mirrors&amp;#34;: [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;https://dockerhub.azk8s.cn&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;http://hub-mirror.c.163.com&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;https://registry.docker-cn.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> ],
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;storage-driver&amp;#34;: &amp;#34;overlay2&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;storage-opts&amp;#34;: [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;overlay2.override_kernel_check=true&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> ],
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;log-opts&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;max-file&amp;#34;:&amp;#34;5&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="6启动-docker-并设置-docker-开机启动">6、启动 docker 并设置 docker 开机启动&lt;/h3>
&lt;p>启动 Docker：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ systemctl start docker &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> systemctl &lt;span class="nb">enable&lt;/span> docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果 Docker 已经启动，则需要重启 Docker：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ systemctl daemon-reload &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> systemctl restart docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="六安装-kubeletkubectlkubeadm全部节点">六、安装 kubelet、kubectl、kubeadm（全部节点）&lt;/h2>
&lt;h3 id="1配置可用的国内-yum-源">1、配置可用的国内 yum 源&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">[kubernetes]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">name=Kubernetes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">enabled=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">gpgcheck=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">repo_gpgcheck=0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2安装-kubeletkubectlkubeadm">2、安装 kubelet、kubectl、kubeadm&lt;/h3>
&lt;ul>
&lt;li>kubelet: 在集群中的每个节点上用来启动 pod 和 container 等。&lt;/li>
&lt;li>kubectl: 用来与集群通信的命令行工具。&lt;/li>
&lt;li>kubeadm: 用来初始化集群的指令。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意安装顺序，一定不要先安装 kubeadm，因为 kubeadm 会自动安装最新版本的 kubelet 与 kubectl，导致版本不一致问题。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装 kubelet&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install -y kubelet-1.16.3-0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装 kubectl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install -y kubectl-1.16.3-0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装 kubeadm&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install -y kubeadm-1.16.3-0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3启动-kubelet-并配置开机启动">3、启动 kubelet 并配置开机启动&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ systemctl start kubelet &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> systemctl &lt;span class="nb">enable&lt;/span> kubelet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>检查状态时会发现 kubelet 是 failed 状态，等初 master 节点初始化完成后即可显示正常。&lt;/p>
&lt;/blockquote>
&lt;h2 id="七kubeadm-安装-kubernetesmaster-节点">七、kubeadm 安装 kubernetes（Master 节点）&lt;/h2>
&lt;p>创建 kubeadm 配置文件 kubeadm-config.yaml，然后需要配置一些参数：&lt;/p>
&lt;ul>
&lt;li>配置 localAPIEndpoint.advertiseAddress 参数，调整为你的 Master 服务器地址。&lt;/li>
&lt;li>配置 imageRepository 参数，调整 kubernetes 镜像下载地址为阿里云。&lt;/li>
&lt;li>配置 networking.podSubnet 参数，调整为你要设置的网络范围。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>kubeadm-config.yaml&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ cat &amp;gt; kubeadm-config.yaml &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">apiVersion: kubeadm.k8s.io/v1beta2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kind: InitConfiguration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">localAPIEndpoint:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> advertiseAddress: 192.168.2.11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> bindPort: 6443
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">nodeRegistration:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> taints:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> - effect: PreferNoSchedule
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> key: node-role.kubernetes.io/master
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">---
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">apiVersion: kubeadm.k8s.io/v1beta2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kind: ClusterConfiguration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">imageRepository: registry.aliyuncs.com/google_containers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kubernetesVersion: v1.16.3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">networking:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> podSubnet: 10.244.0.0/16
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> serviceSubnet: 10.96.0.0/12
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">---
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">apiVersion: kubeproxy.config.k8s.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kind: KubeProxyConfiguration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">mode: ipvs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>kubeadm 初始化 kubernetes 集群：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubeadm init --config kubeadm-config.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>部署日志信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>init&lt;span class="o">]&lt;/span> Using Kubernetes version: v1.16.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> Running pre-flight checks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span>WARNING Firewalld&lt;span class="o">]&lt;/span>: firewalld is active, please ensure ports &lt;span class="o">[&lt;/span>&lt;span class="m">6443&lt;/span> 10250&lt;span class="o">]&lt;/span> are open or your cluster rrectly &lt;span class="k">function&lt;/span> co&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> Pulling images required &lt;span class="k">for&lt;/span> setting up a Kubernetes cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> This might take a minute or two, depending on the speed of your internet connection
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> You can also perform this action in beforehand using &lt;span class="s1">&amp;#39;kubeadm config images pull&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Using certificateDir folder &lt;span class="s2">&amp;#34;/etc/kubernetes/pki&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;ca&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;apiserver&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> apiserver serving cert is signed &lt;span class="k">for&lt;/span> DNS names &lt;span class="o">[&lt;/span>kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local master01&lt;span class="o">]&lt;/span> and IPs &lt;span class="o">[&lt;/span>10.96.0.1 172.21.51.20&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;apiserver-kubelet-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;front-proxy-ca&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;front-proxy-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/ca&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/server&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> etcd/server serving cert is signed &lt;span class="k">for&lt;/span> DNS names &lt;span class="o">[&lt;/span>localhost master01&lt;span class="o">]&lt;/span> and IPs &lt;span class="o">[&lt;/span>172.21.51.20 127.0.0.1 ::1&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/peer&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> etcd/peer serving cert is signed &lt;span class="k">for&lt;/span> DNS names &lt;span class="o">[&lt;/span>localhost master01&lt;span class="o">]&lt;/span> and IPs &lt;span class="o">[&lt;/span>172.21.51.20 127.0.0.1 ::1&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/healthcheck-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;apiserver-etcd-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;sa&amp;#34;&lt;/span> key and public key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Using kubeconfig folder &lt;span class="s2">&amp;#34;/etc/kubernetes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;admin.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;kubelet.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;controller-manager.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;scheduler.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-start&lt;span class="o">]&lt;/span> Writing kubelet environment file with flags to file &lt;span class="s2">&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-start&lt;span class="o">]&lt;/span> Writing kubelet configuration to file &lt;span class="s2">&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-start&lt;span class="o">]&lt;/span> Starting the kubelet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Using manifest folder &lt;span class="s2">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="s2">&amp;#34;kube-apiserver&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="s2">&amp;#34;kube-controller-manager&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="s2">&amp;#34;kube-scheduler&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>etcd&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="nb">local&lt;/span> etcd in &lt;span class="s2">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>wait-control-plane&lt;span class="o">]&lt;/span> Waiting &lt;span class="k">for&lt;/span> the kubelet to boot up the control plane as static Pods from directory &lt;span class="s2">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>. This can take up to 4m0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>apiclient&lt;span class="o">]&lt;/span> All control plane components are healthy after 8.504005 seconds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>upload-config&lt;span class="o">]&lt;/span> Storing the configuration used in ConfigMap &lt;span class="s2">&amp;#34;kubeadm-config&amp;#34;&lt;/span> in the &lt;span class="s2">&amp;#34;kube-system&amp;#34;&lt;/span> Namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet&lt;span class="o">]&lt;/span> Creating a ConfigMap &lt;span class="s2">&amp;#34;kubelet-config-1.23&amp;#34;&lt;/span> in namespace kube-system with the configuration &lt;span class="k">for&lt;/span> the kubelets in the cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NOTE: The &lt;span class="s2">&amp;#34;kubelet-config-1.23&amp;#34;&lt;/span> naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just &lt;span class="s2">&amp;#34;kubelet-config&amp;#34;&lt;/span>. Kubeadm upgrade will handle this transition transparently.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>upload-certs&lt;span class="o">]&lt;/span> Skipping phase. Please see --upload-certs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mark-control-plane&lt;span class="o">]&lt;/span> Marking the node master01 as control-plane by adding the labels: &lt;span class="o">[&lt;/span>node-role.kubernetes.io/master&lt;span class="o">(&lt;/span>deprecated&lt;span class="o">)&lt;/span> node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mark-control-plane&lt;span class="o">]&lt;/span> Marking the node master01 as control-plane by adding the taints &lt;span class="o">[&lt;/span>node-role.kubernetes.io/master:NoSchedule&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> Using token: tqtgb2.yr26dau6tm617rgy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow Node Bootstrap tokens to get nodes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order &lt;span class="k">for&lt;/span> nodes to get long term certificate credentials
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow certificate rotation &lt;span class="k">for&lt;/span> all node client certificates in the cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> Creating the &lt;span class="s2">&amp;#34;cluster-info&amp;#34;&lt;/span> ConfigMap in the &lt;span class="s2">&amp;#34;kube-public&amp;#34;&lt;/span> namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-finalize&lt;span class="o">]&lt;/span> Updating &lt;span class="s2">&amp;#34;/etc/kubernetes/kubelet.conf&amp;#34;&lt;/span> to point to a rotatable kubelet client certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>addons&lt;span class="o">]&lt;/span> Applied essential addon: CoreDNS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>addons&lt;span class="o">]&lt;/span> Applied essential addon: kube-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your Kubernetes control-plane has initialized successfully!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To start using your cluster, you need to run the following as a regular user:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Alternatively, &lt;span class="k">if&lt;/span> you are the root user, you can run:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>/etc/kubernetes/admin.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">You should now deploy a pod network to the cluster.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Run &lt;span class="s2">&amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34;&lt;/span> with one of the options listed at:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> https://kubernetes.io/docs/concepts/cluster-administration/addons/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Then you can join any number of worker nodes by running the following on each as root:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubeadm join 192.168.2.11:6443 --token tqtgb2.yr26dau6tm617rgy &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --discovery-token-ca-cert-hash sha256:c38fa7ed7a99fe928980b4a9dc1df31f26ae60547dfd6599c055ca652f7ad985
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在此处看日志可以知道，可以通过下面命令，添加 kubernetes 相关环境变量：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="八工作节点加入集群work-node-节点">八、工作节点加入集群（Work Node 节点）&lt;/h2>
&lt;p>根据上面 Master 节点创建 Kubernetes 集群时的日志信息，可以知道在各个节点上执行下面命令来让工作节点加入主节点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubeadm join 192.168.2.11:6443 --token 4udy8a.f77ai0zun477kx0p &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --discovery-token-ca-cert-hash sha256:4645472f24b438e0ecf5964b6dcd64913f68e0f9f7458768cfb96a9ab16b4212
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果上面 token 过期，则可以通过 &lt;code>kubeadm token create --print-join-command&lt;/code> 命令重新获取加入集群的指令。&lt;/p>
&lt;h2 id="九部署网络插件master-节点">九、部署网络插件（Master 节点）&lt;/h2>
&lt;p>Kubernetes 中可以部署很多种网络插件，不过比较流行也推荐的有两种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Flannel：&lt;/strong> Flannel 是基于 Overlay 网络模型的网络插件，能够方便部署，一般部署后只要不出问题，一般不需要管它。&lt;/li>
&lt;li>&lt;strong>Calico：&lt;/strong> 与 Flannel 不同，Calico 是一个三层的数据中心网络方案，使用 BGP 路由协议在主机之间路由数据包，可以灵活配置网络策略。&lt;/li>
&lt;/ul>
&lt;p>这两种网络根据环境任选其一即可，这里使用的是 Calico，可以按下面步骤部署：&lt;/p>
&lt;h3 id="1部署-calico-网络插件">1、部署 Calico 网络插件&lt;/h3>
&lt;p>下载 Calico 部署文件，并替换里面的网络范围为上面 kubeadm 中 networking.podSubnet 配置的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#下载 calico 部署文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ wget https://docs.projectcalico.org/v3.10/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#替换 calico 部署文件的 IP 为 kubeadm 中的 networking.podSubnet 参数 10.244.0.0。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sed -i &lt;span class="s1">&amp;#39;s/192.168.0.0/10.244.0.0/g&amp;#39;&lt;/span> calico.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#部署 Calico 插件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f calico.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看一下calico向k8s中添加的api资源:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl api-resources &lt;span class="p">|&lt;/span> grep calico
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bgpconfigurations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> BGPConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bgppeers crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> BGPPeer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">blockaffinities crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> BlockAffinity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caliconodestatuses crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> CalicoNodeStatus
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clusterinformations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> ClusterInformation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">felixconfigurations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> FelixConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">globalnetworkpolicies crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> GlobalNetworkPolicy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">globalnetworksets crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> GlobalNetworkSet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hostendpoints crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> HostEndpoint
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipamblocks crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPAMBlock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipamconfigs crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPAMConfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipamhandles crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPAMHandle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ippools crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPPool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipreservations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPReservation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubecontrollersconfigurations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> KubeControllersConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networkpolicies crd.projectcalico.org/v1 &lt;span class="nb">true&lt;/span> NetworkPolicy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networksets crd.projectcalico.org/v1 &lt;span class="nb">true&lt;/span> NetworkSet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些api资源是属于calico的，因此不建议使用kubectl来管理，推荐按照calicoctl来管理这些api资源。 将calicoctl安装为kubectl的插件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /usr/local/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -o kubectl-calico -O -L &lt;span class="s2">&amp;#34;https://github.com/projectcalico/calicoctl/releases/download/v3.21.2/calicoctl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x kubectl-calico
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>验证插件正常工作:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl calico -h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2查看-pod-是否成功启动">2、查看 Pod 是否成功启动&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pod -n kube-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calico-kube-controllers-6b64bcd855-jn8pz 1/1 Running &lt;span class="m">0&lt;/span> 2m40s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calico-node-5wssd 1/1 Running &lt;span class="m">0&lt;/span> 2m40s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calico-node-7tw94 1/1 Running &lt;span class="m">0&lt;/span> 2m40s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calico-node-xzfp4 1/1 Running &lt;span class="m">0&lt;/span> 2m40s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">coredns-58cc8c89f4-hv4fn 1/1 Running &lt;span class="m">0&lt;/span> 21m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">coredns-58cc8c89f4-k97x6 1/1 Running &lt;span class="m">0&lt;/span> 21m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etcd-k8s-master 1/1 Running &lt;span class="m">0&lt;/span> 20m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-apiserver-k8s-master 1/1 Running &lt;span class="m">0&lt;/span> 20m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-controller-manager-k8s-master 1/1 Running &lt;span class="m">0&lt;/span> 20m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-9dlpz 1/1 Running &lt;span class="m">0&lt;/span> 14m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-krd5n 1/1 Running &lt;span class="m">0&lt;/span> 14m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-tntpr 1/1 Running &lt;span class="m">0&lt;/span> 21m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-scheduler-k8s-master 1/1 Running &lt;span class="m">0&lt;/span> 20m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到所以 Pod 都已经成功启动。&lt;/p>
&lt;h2 id="3验证k8s-dns是否可用">3、验证k8s DNS是否可用&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl run curl --image&lt;span class="o">=&lt;/span>radial/busyboxplus:curl -it
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">If you don&lt;span class="err">&amp;#39;&lt;/span>t see a &lt;span class="nb">command&lt;/span> prompt, try pressing enter.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> root@curl:/ &lt;span class="o">]&lt;/span>$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进入后执行&lt;code>nslookup kubernetes.default&lt;/code>确认解析正常:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">nslookup kubernetes.default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: 10.96.0.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: kubernetes.default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="十查看是否开启-ipvsmaster-节点">十、查看是否开启 IPVS（Master 节点）&lt;/h2>
&lt;p>上面全部组件都已经部署完成，不过还需要确认是否成功将网络模式设置为 IPVS，可以查看 kube-proxy 日志，在日志信息中查找是否存在 IPVS 关键字信息来确认。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pod -n kube-system &lt;span class="p">|&lt;/span> grep kube-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-9dlpz 1/1 Running &lt;span class="m">0&lt;/span> 42m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-krd5n 1/1 Running &lt;span class="m">0&lt;/span> 42m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-tntpr 1/1 Running &lt;span class="m">0&lt;/span> 49m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>选择其中一个 Pod ，查看该 Pod 中的日志信息中是否存在 ipvs 信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ kubectl logs kube-proxy-9dlpz -n kube-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.357178 1 node.go:135] Successfully retrieved node IP: 192.168.2.13
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.357265 1 server_others.go:176] Using ipvs Proxier.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">W1120 18:13:46.358005 1 proxier.go:420] IPVS scheduler not specified, use rr by default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.358919 1 server.go:529] Version: v1.16.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359327 1 conntrack.go:100] Set sysctl &amp;#39;net/netfilter/nf_conntrack_max&amp;#39; to 131072
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359379 1 conntrack.go:52] Setting nf_conntrack_max to 131072
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359426 1 conntrack.go:100] Set sysctl &amp;#39;net/netfilter/nf_conntrack_tcp_timeout_established&amp;#39; to 86400
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359452 1 conntrack.go:100] Set sysctl &amp;#39;net/netfilter/nf_conntrack_tcp_timeout_close_wait&amp;#39; to 3600
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359626 1 config.go:313] Starting service config controller
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359685 1 shared_informer.go:197] Waiting for caches to sync for service config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359833 1 config.go:131] Starting endpoints config controller
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.359889 1 shared_informer.go:197] Waiting for caches to sync for endpoints config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.460013 1 shared_informer.go:204] Caches are synced for service config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I1120 18:13:46.460062 1 shared_informer.go:204] Caches are synced for endpoints config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如上，在日志中查到了 IPVS 字样，则代表使用了 IPVS 模式。&lt;/p>
&lt;h2 id="十一部署周边生态">十一、部署周边生态&lt;/h2>
&lt;h3 id="1安装包管理器helm-3">1、安装包管理器helm 3&lt;/h3>
&lt;p>Helm是Kubernetes的包管理器，后续流程也将使用Helm安装Kubernetes的常用组件。 这里先在master节点node1上按照helm。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SH" data-lang="SH">&lt;span class="line">&lt;span class="cl">wget https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -zxvf helm-v3.7.2-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv linux-amd64/helm /usr/local/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行&lt;code>helm list&lt;/code>确认没有错误输出。&lt;/p>
&lt;p>接下来我们将部署 Kubernetes 的控制看板，由于集群为 1.16.3，所以我们直接使用 Kubernetes Dashboard 2.0.0 版本。&lt;/p>
&lt;p>由于 Dashboard 部署流程也比较多，所以写在另一篇博文中，可以参考 &lt;a href="http://www.mydlq.club/article/28/">Kubernetes 部署 Kubernetes-Dashboard v2.0.0&lt;/a>&lt;/p>
&lt;p>当 Kubernetes Dashboard 部署好了后，输入 Kubernetes 集群任意节点地址配置上面配置的 Service 的 NodePort 30001 来访问看板。输入地址 https://192.168.2.11:30001 进入看板页面，输入上面获取的 Token 串进行验证登录。&lt;/p>
&lt;blockquote>
&lt;p>提醒一下，由于谷歌浏览器访问自签名证书的网址时，可能会被拒绝访问，所以，这里推荐最好使用火狐浏览器访问。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://mydlq-club.oss-cn-beijing.aliyuncs.com/images/kubernetes-kubeadm-install-1002.png?x-oss-process=style/shuiyin" alt="img">&lt;/p>
&lt;h2 id="十配置-kubectl-命令自动补全master-节点">十、配置 Kubectl 命令自动补全（Master 节点）&lt;/h2>
&lt;p>安装补全工具：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ yum install -y bash-completion
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加补全配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ source /usr/share/bash-completion/bash_completion
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ source &amp;lt;(kubectl completion bash)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ echo &amp;#34;source &amp;lt;(kubectl completion bash)&amp;#34; &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加完成就可以通过输入 kubectl 后，按补全键（一般为 tab）会自动补全对应的命令。&lt;/p>
&lt;h2 id="九faq">九、FAQ&lt;/h2>
&lt;h3 id="1修正-kubelet-无法读取资源错误">1、修正 kubelet 无法读取资源错误&lt;/h3>
&lt;p>CentOS 系统上安装 Kubernetes 后 kubelet 组件会一直报 &lt;code>failed to get cgroup stats for &amp;quot;/system.slice/docker.service&amp;quot;&lt;/code> 错误，而引起该问题的原因是 kubelet 启动时，会执行节点资源统计，需要 systemd 中开启对应的选项，如下：&lt;/p>
&lt;ul>
&lt;li>CPUAccounting：是否开启该 unit 的 CPU 使用统计，bool 类型，可配置 true 或者 false。&lt;/li>
&lt;li>MemoryAccounting：是否开启该 unit 的 Memory 使用统计，bool 类型，可配置 true 或者 false。&lt;/li>
&lt;/ul>
&lt;p>如果不设置这两项，kubelet 是无法执行该统计命令，导致 kubelet 一致报错误上面错误信息。所以需要修改 systemd 里面的 kubelet 服务配置，操作如下：&lt;/p>
&lt;p>编辑 /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf 文件，并添加下面配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ vi /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Service&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CPUAccounting&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> &lt;span class="c1">## 添加 CPUAccounting=true 选项，开启 systemd CPU 统计功能&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">MemoryAccounting&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> &lt;span class="c1">## 添加 MemoryAccounting=true 选项，开启 systemd Memory 统计功能&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Environment&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Environment&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">EnvironmentFile&lt;/span>&lt;span class="o">=&lt;/span>-/var/lib/kubelet/kubeadm-flags.env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">EnvironmentFile&lt;/span>&lt;span class="o">=&lt;/span>-/etc/sysconfig/kubelet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>/usr/bin/kubelet &lt;span class="nv">$KUBELET_KUBECONFIG_ARGS&lt;/span> &lt;span class="nv">$KUBELET_CONFIG_ARGS&lt;/span> &lt;span class="nv">$KUBELET_KUBEADM_ARGS&lt;/span> &lt;span class="nv">$KUBELET_EXTRA_ARGS&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Kubernetes, how to deploy?</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-1/</link><pubDate>Sun, 01 May 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-1/</guid><description>&lt;p>汇总kubernetes部署的方案：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>kubernetes &amp;lt; 1.20 + centos7 + docker + iptables + flannel&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;lt; 1.20 + centos7 + docker + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1.20 &amp;lt;kubernetes &amp;lt; 1.24 + centos7 + docker + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;gt; 1.24 + centos7 + containerd + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;gt; 1.24 + centos7 + cri-o + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;gt; 1.24 + centos7 + cri-dockerd + docker + ipvs + calico&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>The node was low on resource: ephemeral-storage. Evicted</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-6/</link><pubDate>Fri, 15 Apr 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-6/</guid><description>&lt;h2 id="the-node-was-low-on-resource-ephemeral-storage-evicted">The node was low on resource: ephemeral-storage. Evicted&lt;/h2>
&lt;p>最近某个节点频繁出现这个问题&lt;/p>
&lt;h2 id="问题分析">问题分析&lt;/h2>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>查询到的解决方案&lt;/p>
&lt;p>不能让某个占用过多的资源，临时存储不允许一直占用，用超过Limit， kubernetes就会干掉这个Pod，当然也会迅速拉起一个&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> resources:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> requests:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ephemeral-storage: &lt;span class="s2">&amp;#34;100Mi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> limits:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ephemeral-storage: &lt;span class="s2">&amp;#34;4Gi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>我们的改进方案&lt;/p>
&lt;p>1、在 CICD 部署模板中添加请求和限制，包括包括cpu、mem、ephemeral-storage&lt;/p>
&lt;p>2、修改docker 容器日志的限制， 在 &lt;code>/etc/docker/daemon.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;log-driver&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;json-file&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;log-opts&amp;#34;&lt;/span>: &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;max-size&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;300m&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;max-file&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">max-size&lt;span class="o">=&lt;/span>300m，意味着一个容器日志大小上限是300M
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">max-file&lt;span class="o">=&lt;/span>3，意味着一个容器有三个日志
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="引用">引用&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/59906810/the-node-was-low-on-resource-ephemeral-storage">https://stackoverflow.com/questions/59906810/the-node-was-low-on-resource-ephemeral-storage&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>nginx 鉴权_k8s中的服务使用proxy auth鉴权</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-5/</link><pubDate>Fri, 01 Apr 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-5/</guid><description>&lt;h2 id="nginx-鉴权_k8s中的服务使用proxy-auth鉴权">nginx 鉴权_k8s中的服务使用proxy auth鉴权&lt;/h2>
&lt;h2 id="需求">需求&lt;/h2>
&lt;p>k8s nginx ingress除了可以对服务提供basic权限验证外，也可以使用外部的鉴权服务。我们集群内肯定会有很多服务， 比如我们会有论坛博客、有视频点播等等服务，我们肯定为了避免用户在各个子服务内重复登陆而采用了单点登录服务。很好，而nginx ingress也可以帮我们做一些工作。&lt;/p>
&lt;p>比如，我们建立了一套登录与鉴权服务，登录页面URL是http://example.com/login ，鉴权URL是http://example.com/auth，我们约定登录用户会设定一个Header X-Forwarded-User来记录用户名，子服务收到请求直接检查有无此Header即可判断是否是已登录的某用户。&lt;/p></description></item><item><title>kubernetes1.24.0, Why use docker in production environment ?</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-4/</link><pubDate>Tue, 15 Mar 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-4/</guid><description>&lt;h2 id="kubernetes1240-why-use-docker--in-production-environment-">kubernetes1.24.0, Why use docker in production environment ?&lt;/h2>
&lt;h2 id="if-you-consider">if you consider&lt;/h2>
&lt;p>Mirantis and Docker have &lt;a href="https://www.mirantis.com/blog/mirantis-to-take-over-support-of-kubernetes-dockershim-2/">committed&lt;/a> to maintaining a replacement adapter for Docker Engine, and to maintain that adapter even after the in-tree dockershim is removed from Kubernetes. The replacement adapter is named &lt;a href="https://github.com/Mirantis/cri-dockerd">&lt;code>cri-dockerd&lt;/code>&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Download the cri-dockerd binary package or compile the source code yourself&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># download file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.0/cri-dockerd-v0.2.0-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># unzip file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -xvf cri-dockerd-v0.2.0-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copy the binary file to the specified directory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp cri-dockerd /usr/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Configure startup files&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">vim /usr/lib/systemd/system/cri-docker.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Unit&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Description&lt;/span>&lt;span class="o">=&lt;/span>CRI Interface &lt;span class="k">for&lt;/span> Docker Application Container Engine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Documentation&lt;/span>&lt;span class="o">=&lt;/span>https://docs.mirantis.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">After&lt;/span>&lt;span class="o">=&lt;/span>network-online.target firewalld.service docker.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Wants&lt;/span>&lt;span class="o">=&lt;/span>network-online.target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Requires&lt;/span>&lt;span class="o">=&lt;/span>cri-docker.socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Service&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Type&lt;/span>&lt;span class="o">=&lt;/span>notify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>/usr/bin/cri-dockerd --container-runtime-endpoint&lt;span class="o">=&lt;/span>unix:///var/run/cri-docker.sock --network-plugin&lt;span class="o">=&lt;/span>cni --cni-bin-dir&lt;span class="o">=&lt;/span>/opt/cni/bin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --cni-conf-dir&lt;span class="o">=&lt;/span>/etc/cni/net.d --image-pull-progress-deadline&lt;span class="o">=&lt;/span>30s --pod-infra-container-image&lt;span class="o">=&lt;/span>docker.io/juestnow/pause:3.6 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --docker-endpoint&lt;span class="o">=&lt;/span>unix:///var/run/docker.sock --cri-dockerd-root-directory&lt;span class="o">=&lt;/span>/var/lib/docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ExecReload&lt;/span>&lt;span class="o">=&lt;/span>/bin/kill -s HUP &lt;span class="nv">$MAINPID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TimeoutSec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">RestartSec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Restart&lt;/span>&lt;span class="o">=&lt;/span>always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Note that StartLimit* options were moved from &amp;#34;Service&amp;#34; to &amp;#34;Unit&amp;#34; in systemd 229.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Both the old, and new location are accepted by systemd 229 and up, so using the old location&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># to make them work for either version of systemd.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">StartLimitBurst&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Both the old, and new name are accepted by systemd 230 and up, so using the old name to make&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># this option work for either version of systemd.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">StartLimitInterval&lt;/span>&lt;span class="o">=&lt;/span>60s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Having non-zero Limit*s causes performance problems due to accounting overhead&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># in the kernel. We recommend using cgroups to do container-local accounting.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LimitNOFILE&lt;/span>&lt;span class="o">=&lt;/span>infinity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LimitNPROC&lt;/span>&lt;span class="o">=&lt;/span>infinity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LimitCORE&lt;/span>&lt;span class="o">=&lt;/span>infinity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Comment TasksMax if your systemd version does not support it.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Only systemd 226 and above support this option.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TasksMax&lt;/span>&lt;span class="o">=&lt;/span>infinity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Delegate&lt;/span>&lt;span class="o">=&lt;/span>yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">KillMode&lt;/span>&lt;span class="o">=&lt;/span>process
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Install&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>multi-user.target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Generate socket file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim /usr/lib/systemd/system/cri-docker.socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Unit&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Description&lt;/span>&lt;span class="o">=&lt;/span>CRI Docker Socket &lt;span class="k">for&lt;/span> the API
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PartOf&lt;/span>&lt;span class="o">=&lt;/span>cri-docker.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Socket&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ListenStream&lt;/span>&lt;span class="o">=&lt;/span>/var/run/cri-dockerd.sock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SocketMode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0660&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SocketUser&lt;/span>&lt;span class="o">=&lt;/span>root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SocketGroup&lt;/span>&lt;span class="o">=&lt;/span>docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Install&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>sockets.target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># start up cri-dockerd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl daemon-reload
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl start cri-docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># set startup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl &lt;span class="nb">enable&lt;/span> cri-docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># view startup status&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl status cri-docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Download cri-tools to verify whether cri-docker is normal&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Download binaries&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.24.0/crictl-v1.24.0-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># unzip&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -xvf crictl-v1.24.0-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copy the binaries to the specified directory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp crictl /usr/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create configuration file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim /etc/crictl.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">runtime-endpoint: &lt;span class="s2">&amp;#34;unix:///var/run/cri-docker.sock&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">image-endpoint: &lt;span class="s2">&amp;#34;unix:///var/run/cri-docker.sock&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timeout: &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">debug: &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pull-image-on-create: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">disable-pull-on-run: &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Test if you can access docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># View running containers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crictl ps
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># View pulled images&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crictl images
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pull image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crictl pull busybox
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@k8s-node-4 ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># crictl pull busybox&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Image is up to date &lt;span class="k">for&lt;/span> busybox@sha256:5acba83a746c7608ed544dc1533b87c737a0b0fb730301639a0179f9344b1678
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Return true, cri-dockerd access to docker is complete&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>1&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="ref">REF&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/blog/2022/02/17/dockershim-faq/">Thursday, February 17, 2022 - Updated: Dockershim Removal FAQ&lt;/a>&lt;/p></description></item><item><title>kubeadm startup Kubernetes more than v1.20.0 (centos7+containerd+ipvs+calico)</title><link>http://cugbtang.github.io/post/kubernetes/series-kubernetes-3/</link><pubDate>Tue, 01 Mar 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/kubernetes/series-kubernetes-3/</guid><description>&lt;p>这篇文章的作者部署的是kubernetes v1.23，但其实是基于kubernetes对CRI的改动执行的较为流行的方案。&lt;/p>
&lt;p>我绝的主要是针对Docker的支持问题，因为在1.24中才正式将docker-shim剔除。以下列举了较为流行的部署方案：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>kubernetes &amp;lt; 1.20 + centos7 + docker + iptables + flannel&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;lt; 1.20 + centos7 + docker + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1.20 &amp;lt;kubernetes &amp;lt; 1.24 + centos7 + docker + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;gt; 1.24 + centos7 + containerd + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;gt; 1.24 + centos7 + cri-o + ipvs + calico&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kubernetes &amp;gt; 1.24 + centos7 + cri-dockerd + docker + ipvs + calico&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.frognew.com/2021/12/kubeadm-install-kubernetes-1.23.html#1%E5%87%86%E5%A4%87">转载声明：使用kubeadm部署Kubernetes 1.23&lt;/a>&lt;/p>
&lt;p>kubeadm是Kubernetes官方提供的用于快速安部署Kubernetes集群的工具，伴随Kubernetes每个版本的发布都会同步更新，kubeadm会对集群配置方面的一些实践做调整，通过实验kubeadm可以学习到Kubernetes官方在集群配置上一些新的最佳实践。&lt;/p>
&lt;h2 id="1准备">1.准备&lt;/h2>
&lt;h3 id="11-系统配置">1.1 系统配置&lt;/h3>
&lt;p>在安装之前，需要先做好如下准备。3台CentOS 7.9主机如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cat /etc/hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.96.151 node1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.96.152 node2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.96.153 node3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;strong>各个主机&lt;/strong>上完成下面的系统配置。&lt;/p>
&lt;ul>
&lt;li>yum:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#备份本地 yum 源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取阿里 yum 源配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#清理 yum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum clean all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#更新软件版本并且更新现有软件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum -y update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>防火墙：&lt;/li>
&lt;/ul>
&lt;p>如果各个主机启用了防火墙策略，需要开放Kubernetes各个组件所需要的端口，可以查看&lt;a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/">Installing kubeadm&lt;/a>中的&amp;quot;Check required ports&amp;quot;一节开放相关端口或者关闭主机的防火墙。&lt;/p>
&lt;ul>
&lt;li>禁用SELINUX：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">setenforce &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">vi /etc/selinux/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SELINUX&lt;/span>&lt;span class="o">=&lt;/span>disabled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>加载需要的内核模块&lt;/li>
&lt;/ul>
&lt;p>创建/etc/modules-load.d/containerd.conf配置文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; /etc/modules-load.d/containerd.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">overlay
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">br_netfilter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行以下命令使配置生效:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">modprobe overlay
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">modprobe br_netfilter
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建/etc/sysctl.d/99-kubernetes-cri.conf配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt; EOF &amp;gt; /etc/sysctl.d/99-kubernetes-cri.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.bridge.bridge-nf-call-iptables = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">net.ipv4.ip_forward = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">user.max_user_namespaces=28633
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行以下命令使配置生效:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>配置服务器支持开启ipvs的前提条件&lt;/li>
&lt;/ul>
&lt;p>由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">ip_vs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ip_vs_rr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ip_vs_wrr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ip_vs_sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nf_conntrack_ipv4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在各个服务器节点上执行以下脚本:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cat &amp;gt; /etc/sysconfig/modules/ipvs.modules &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs_rr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs_wrr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- ip_vs_sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">modprobe -- nf_conntrack_ipv4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">755&lt;/span> /etc/sysconfig/modules/ipvs.modules &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> bash /etc/sysconfig/modules/ipvs.modules &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> lsmod &lt;span class="p">|&lt;/span> grep -e ip_vs -e nf_conntrack_ipv4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注：内核4版本以上 nf_conntrack 替换 nf_conntrack_ipv4&lt;/p>
&lt;/blockquote>
&lt;p>上面脚本创建了的&lt;code>/etc/sysconfig/modules/ipvs.modules&lt;/code>文件，保证在节点重启后能自动加载所需模块。 使用&lt;code>lsmod | grep -e ip_vs -e nf_conntrack_ipv4&lt;/code>命令查看是否已经正确加载所需的内核模块。&lt;/p>
&lt;p>接下来还需要确保各个节点上已经安装了ipset软件包，为了便于查看ipvs的代理规则，最好安装一下管理工具ipvsadm。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">yum install -y ipset ipvsadm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果以上前提条件如果不满足，则即使kube-proxy的配置开启了ipvs模式，也会退回到iptables模式。&lt;/p>
&lt;h3 id="12-部署容器运行时containerd">1.2 部署容器运行时Containerd&lt;/h3>
&lt;p>在各个服务器节点上安装容器运行时Containerd。&lt;/p>
&lt;p>下载Containerd的二进制包:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">wget https://github.com/containerd/containerd/releases/download/v1.5.8/cri-containerd-cni-1.5.8-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>cri-containerd-cni-1.5.8-linux-amd64.tar.gz&lt;/code>压缩包中已经按照官方二进制部署推荐的目录结构布局好。 里面包含了systemd配置文件，containerd以及cni的部署文件。 将解压缩到系统的根目录&lt;code>/&lt;/code>中:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">tar -zxvf cri-containerd-cni-1.5.8-linux-amd64.tar.gz -C /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/systemd/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/systemd/system/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/systemd/system/containerd.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/crictl.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/cni/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/cni/net.d/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etc/cni/net.d/10-containerd-net.conflist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/sbin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/sbin/runc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/critest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/containerd-shim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/containerd-shim-runc-v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/ctd-decoder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/containerd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/containerd-shim-runc-v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/containerd-stress
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/ctr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usr/local/bin/crictl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">opt/cni/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">opt/cni/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">opt/cni/bin/bridge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意经测试cri-containerd-cni-1.5.8-linux-amd64.tar.gz包中包含的runc在CentOS 7下的动态链接有问题，这里从runc的github上单独下载runc，并替换上面安装的containerd中的runc&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">wget https://github.com/opencontainers/runc/releases/download/v1.1.0-rc.1/runc.amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来生成containerd的配置文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir -p /etc/containerd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">containerd config default &amp;gt; /etc/containerd/config.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据文档&lt;a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/">Container runtimes &lt;/a>中的内容，对于使用systemd作为init system的Linux的发行版，使用systemd作为容器的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定，因此这里配置各个节点上containerd的cgroup driver为systemd。&lt;/p>
&lt;p>修改前面生成的配置文件&lt;code>/etc/containerd/config.toml&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>plugins.&lt;span class="s2">&amp;#34;io.containerd.grpc.v1.cri&amp;#34;&lt;/span>.containerd.runtimes.runc&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span>plugins.&lt;span class="s2">&amp;#34;io.containerd.grpc.v1.cri&amp;#34;&lt;/span>.containerd.runtimes.runc.options&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">SystemdCgroup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再修改&lt;code>/etc/containerd/config.toml&lt;/code>中的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>plugins.&lt;span class="s2">&amp;#34;io.containerd.grpc.v1.cri&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># sandbox_image = &amp;#34;k8s.gcr.io/pause:3.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">sandbox_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;registry.aliyuncs.com/google_containers/pause:3.6&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置containerd开机启动，并启动containerd&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">systemctl &lt;span class="nb">enable&lt;/span> containerd --now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用crictl测试一下，确保可以打印出版本信息并且没有错误信息输出:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">crictl version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Version: 0.1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RuntimeName: containerd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RuntimeVersion: v1.5.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RuntimeApiVersion: v1alpha2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2使用kubeadm部署kubernetes">2.使用kubeadm部署Kubernetes&lt;/h2>
&lt;h3 id="21-安装kubeadm和kubelet">2.1 安装kubeadm和kubelet&lt;/h3>
&lt;p>下面在各节点安装kubeadm和kubelet：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">[kubernetes]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">name=Kubernetes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">enabled=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">gpgcheck=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">repo_gpgcheck=1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">yum makecache fast
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum install kubelet kubeadm kubectl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行&lt;code>kubelet --help&lt;/code>可以看到原来kubelet的绝大多数命令行flag参数都被&lt;code>DEPRECATED&lt;/code>了，官方推荐我们使用&lt;code>--config&lt;/code>指定配置文件，并在配置文件中指定原来这些flag所配置的内容。具体内容可以查看这里&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/">Set Kubelet parameters via a config file&lt;/a>。这也是Kubernetes为了支持动态Kubelet配置（Dynamic Kubelet Configuration）才这么做的，参考&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/">Reconfigure a Node’s Kubelet in a Live Cluster&lt;/a>。&lt;/p>
&lt;p>kubelet的配置文件必须是json或yaml格式，具体可查看&lt;a href="https://github.com/kubernetes/kubelet/blob/release-1.23/config/v1beta1/types.go">这里&lt;/a>。&lt;/p>
&lt;p>Kubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动。 关闭系统的Swap方法如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">swapoff -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载，使用&lt;code>free -m&lt;/code>确认swap已经关闭。&lt;/p>
&lt;p>swappiness参数调整，修改/etc/sysctl.d/99-kubernetes-cri.conf添加下面一行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">vm.swappiness&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行&lt;code>sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf&lt;/code>使修改生效。&lt;/p>
&lt;h3 id="22-使用kubeadm-init初始化集群">2.2 使用kubeadm init初始化集群&lt;/h3>
&lt;p>在各节点开机启动kubelet服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">systemctl &lt;span class="nb">enable&lt;/span> kubelet.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>kubeadm config print init-defaults --component-configs KubeletConfiguration&lt;/code>可以打印集群初始化默认的使用的配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">apiVersion: kubeadm.k8s.io/v1beta3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bootstrapTokens:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- groups:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - system:bootstrappers:kubeadm:default-node-token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> token: abcdef.0123456789abcdef
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ttl: 24h0m0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usages:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - signing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - authentication
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: InitConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localAPIEndpoint:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> advertiseAddress: 1.2.3.4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bindPort: &lt;span class="m">6443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nodeRegistration:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> criSocket: /var/run/dockershim.sock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> imagePullPolicy: IfNotPresent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> taints: null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiServer:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timeoutForControlPlane: 4m0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiVersion: kubeadm.k8s.io/v1beta3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">certificatesDir: /etc/kubernetes/pki
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clusterName: kubernetes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">controllerManager: &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dns: &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etcd:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dataDir: /var/lib/etcd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">imageRepository: k8s.gcr.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: ClusterConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubernetesVersion: 1.23.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networking:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dnsDomain: cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> serviceSubnet: 10.96.0.0/12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">scheduler: &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiVersion: kubelet.config.k8s.io/v1beta1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">authentication:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> anonymous:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enabled: &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webhook:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cacheTTL: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enabled: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x509:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clientCAFile: /etc/kubernetes/pki/ca.crt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">authorization:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mode: Webhook
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webhook:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cacheAuthorizedTTL: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cacheUnauthorizedTTL: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroupDriver: systemd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clusterDNS:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 10.96.0.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clusterDomain: cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cpuManagerReconcilePeriod: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">evictionPressureTransitionPeriod: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fileCheckFrequency: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">healthzBindAddress: 127.0.0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">healthzPort: &lt;span class="m">10248&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">httpCheckFrequency: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">imageMinimumGCAge: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: KubeletConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">logging:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> flushFrequency: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> options:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> json:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> infoBufferSize: &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> verbosity: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memorySwap: &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nodeStatusReportFrequency: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nodeStatusUpdateFrequency: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rotateCertificates: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">runtimeRequestTimeout: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shutdownGracePeriod: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shutdownGracePeriodCriticalPods: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">staticPodPath: /etc/kubernetes/manifests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">streamingConnectionIdleTimeout: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">syncFrequency: 0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">volumeStatsAggPeriod: 0s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从默认的配置中可以看到，可以使用&lt;code>imageRepository&lt;/code>定制在集群初始化时拉取k8s所需镜像的地址。基于默认配置定制出本次使用kubeadm初始化集群所需的配置文件kubeadm.yaml：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">apiVersion: kubeadm.k8s.io/v1beta3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: InitConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localAPIEndpoint:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> advertiseAddress: 192.168.96.151
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bindPort: &lt;span class="m">6443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nodeRegistration:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> criSocket: /run/containerd/containerd.sock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> taints:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - effect: PreferNoSchedule
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key: node-role.kubernetes.io/master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: ClusterConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubernetesVersion: v1.22.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">imageRepository: registry.aliyuncs.com/google_containers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networking:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> podSubnet: 10.244.0.0/16
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiVersion: kubelet.config.k8s.io/v1beta1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: KubeletConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroupDriver: systemd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">failSwapOn: &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiVersion: kubeproxy.config.k8s.io/v1alpha1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kind: KubeProxyConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mode: ipvs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里定制了&lt;code>imageRepository&lt;/code>为阿里云的registry，避免因gcr被墙，无法直接拉取镜像。&lt;code>criSocket&lt;/code>设置了容器运行时为containerd。 同时设置kubelet的&lt;code>cgroupDriver&lt;/code>为systemd，设置kube-proxy代理模式为ipvs。&lt;/p>
&lt;p>在开始初始化集群之前可以使用&lt;code>kubeadm config images pull --config kubeadm.yaml&lt;/code>预先在各个服务器节点上拉取所k8s需要的容器镜像。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubeadm config images pull --config kubeadm.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>config/images&lt;span class="o">]&lt;/span> Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>config/images&lt;span class="o">]&lt;/span> Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>config/images&lt;span class="o">]&lt;/span> Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>config/images&lt;span class="o">]&lt;/span> Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.23.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>config/images&lt;span class="o">]&lt;/span> Pulled registry.aliyuncs.com/google_containers/pause:3.6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>config/images&lt;span class="o">]&lt;/span> Pulled registry.aliyuncs.com/google_containers/etcd:3.5.1-0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>config/images&lt;span class="o">]&lt;/span> Pulled registry.aliyuncs.com/google_containers/coredns:v1.8.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来使用kubeadm初始化集群，选择node1作为Master Node，在node1上执行下面的命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubeadm init --config kubeadm.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>init&lt;span class="o">]&lt;/span> Using Kubernetes version: v1.23.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> Running pre-flight checks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> Pulling images required &lt;span class="k">for&lt;/span> setting up a Kubernetes cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> This might take a minute or two, depending on the speed of your internet connection
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>preflight&lt;span class="o">]&lt;/span> You can also perform this action in beforehand using &lt;span class="s1">&amp;#39;kubeadm config images pull&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Using certificateDir folder &lt;span class="s2">&amp;#34;/etc/kubernetes/pki&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;ca&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;apiserver&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> apiserver serving cert is signed &lt;span class="k">for&lt;/span> DNS names &lt;span class="o">[&lt;/span>kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local node1&lt;span class="o">]&lt;/span> and IPs &lt;span class="o">[&lt;/span>10.96.0.1 192.168.96.151&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;apiserver-kubelet-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;front-proxy-ca&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;front-proxy-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/ca&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/server&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> etcd/server serving cert is signed &lt;span class="k">for&lt;/span> DNS names &lt;span class="o">[&lt;/span>localhost node1&lt;span class="o">]&lt;/span> and IPs &lt;span class="o">[&lt;/span>192.168.96.151 127.0.0.1 ::1&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/peer&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> etcd/peer serving cert is signed &lt;span class="k">for&lt;/span> DNS names &lt;span class="o">[&lt;/span>localhost node1&lt;span class="o">]&lt;/span> and IPs &lt;span class="o">[&lt;/span>192.168.96.151 127.0.0.1 ::1&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;etcd/healthcheck-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;apiserver-etcd-client&amp;#34;&lt;/span> certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>certs&lt;span class="o">]&lt;/span> Generating &lt;span class="s2">&amp;#34;sa&amp;#34;&lt;/span> key and public key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Using kubeconfig folder &lt;span class="s2">&amp;#34;/etc/kubernetes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;admin.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;kubelet.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;controller-manager.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubeconfig&lt;span class="o">]&lt;/span> Writing &lt;span class="s2">&amp;#34;scheduler.conf&amp;#34;&lt;/span> kubeconfig file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-start&lt;span class="o">]&lt;/span> Writing kubelet environment file with flags to file &lt;span class="s2">&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-start&lt;span class="o">]&lt;/span> Writing kubelet configuration to file &lt;span class="s2">&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-start&lt;span class="o">]&lt;/span> Starting the kubelet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Using manifest folder &lt;span class="s2">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="s2">&amp;#34;kube-apiserver&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="s2">&amp;#34;kube-controller-manager&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>control-plane&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="s2">&amp;#34;kube-scheduler&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>etcd&lt;span class="o">]&lt;/span> Creating static Pod manifest &lt;span class="k">for&lt;/span> &lt;span class="nb">local&lt;/span> etcd in &lt;span class="s2">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>wait-control-plane&lt;span class="o">]&lt;/span> Waiting &lt;span class="k">for&lt;/span> the kubelet to boot up the control plane as static Pods from directory &lt;span class="s2">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>. This can take up to 4m0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>apiclient&lt;span class="o">]&lt;/span> All control plane components are healthy after 16.003580 seconds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>upload-config&lt;span class="o">]&lt;/span> Storing the configuration used in ConfigMap &lt;span class="s2">&amp;#34;kubeadm-config&amp;#34;&lt;/span> in the &lt;span class="s2">&amp;#34;kube-system&amp;#34;&lt;/span> Namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet&lt;span class="o">]&lt;/span> Creating a ConfigMap &lt;span class="s2">&amp;#34;kubelet-config-1.23&amp;#34;&lt;/span> in namespace kube-system with the configuration &lt;span class="k">for&lt;/span> the kubelets in the cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NOTE: The &lt;span class="s2">&amp;#34;kubelet-config-1.23&amp;#34;&lt;/span> naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just &lt;span class="s2">&amp;#34;kubelet-config&amp;#34;&lt;/span>. Kubeadm upgrade will handle this transition transparently.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>upload-certs&lt;span class="o">]&lt;/span> Skipping phase. Please see --upload-certs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mark-control-plane&lt;span class="o">]&lt;/span> Marking the node node1 as control-plane by adding the labels: &lt;span class="o">[&lt;/span>node-role.kubernetes.io/master&lt;span class="o">(&lt;/span>deprecated&lt;span class="o">)&lt;/span> node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mark-control-plane&lt;span class="o">]&lt;/span> Marking the node node1 as control-plane by adding the taints &lt;span class="o">[&lt;/span>node-role.kubernetes.io/master:PreferNoSchedule&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> Using token: o7d0h6.i9taufdl7u1un4va
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow Node Bootstrap tokens to get nodes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order &lt;span class="k">for&lt;/span> nodes to get long term certificate credentials
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> configured RBAC rules to allow certificate rotation &lt;span class="k">for&lt;/span> all node client certificates in the cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>bootstrap-token&lt;span class="o">]&lt;/span> Creating the &lt;span class="s2">&amp;#34;cluster-info&amp;#34;&lt;/span> ConfigMap in the &lt;span class="s2">&amp;#34;kube-public&amp;#34;&lt;/span> namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>kubelet-finalize&lt;span class="o">]&lt;/span> Updating &lt;span class="s2">&amp;#34;/etc/kubernetes/kubelet.conf&amp;#34;&lt;/span> to point to a rotatable kubelet client certificate and key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>addons&lt;span class="o">]&lt;/span> Applied essential addon: CoreDNS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>addons&lt;span class="o">]&lt;/span> Applied essential addon: kube-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your Kubernetes control-plane has initialized successfully!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To start using your cluster, you need to run the following as a regular user:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Alternatively, &lt;span class="k">if&lt;/span> you are the root user, you can run:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>/etc/kubernetes/admin.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">You should now deploy a pod network to the cluster.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Run &lt;span class="s2">&amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34;&lt;/span> with one of the options listed at:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> https://kubernetes.io/docs/concepts/cluster-administration/addons/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Then you can join any number of worker nodes by running the following on each as root:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubeadm join 192.168.96.151:6443 --token o7d0h6.i9taufdl7u1un4va &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --discovery-token-ca-cert-hash sha256:6c55b14e9d71ef098ad0e8f249d85004c41b48063dbcd7692997930f9637f22b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面记录了完成的初始化输出的内容，根据输出的内容基本上可以看出手动初始化安装一个Kubernetes集群所需要的关键步骤。 其中有以下关键内容：&lt;/p>
&lt;ul>
&lt;li>&lt;code>[certs]&lt;/code>生成相关的各种证书&lt;/li>
&lt;li>&lt;code>[kubeconfig]&lt;/code>生成相关的kubeconfig文件&lt;/li>
&lt;li>&lt;code>[kubelet-start]&lt;/code> 生成kubelet的配置文件&amp;quot;/var/lib/kubelet/config.yaml&amp;quot;&lt;/li>
&lt;li>&lt;code>[control-plane]&lt;/code>使用&lt;code>/etc/kubernetes/manifests&lt;/code>目录中的yaml文件创建apiserver、controller-manager、scheduler的静态pod&lt;/li>
&lt;li>&lt;code>[bootstraptoken]&lt;/code>生成token记录下来，后边使用&lt;code>kubeadm join&lt;/code>往集群中添加节点时会用到&lt;/li>
&lt;li>下面的命令是配置常规用户如何使用kubectl访问集群：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>最后给出了将节点加入集群的命令&lt;code>kubeadm join 192.168.96.151:6443 --token o7d0h6.i9taufdl7u1un4va \ --discovery-token-ca-cert-hash sha256:6c55b14e9d71ef098ad0e8f249d85004c41b48063dbcd7692997930f9637f22b&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>查看一下集群状态，确认个组件都处于healthy状态，结果出现了错误:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl get cs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Warning: v1 ComponentStatus is deprecated in v1.19+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS MESSAGE ERROR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">controller-manager Unhealthy Get &lt;span class="s2">&amp;#34;http://127.0.0.1:10252/healthz&amp;#34;&lt;/span>: dial tcp 127.0.0.1:10252: connect: connection refused
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">scheduler Unhealthy Get &lt;span class="s2">&amp;#34;http://127.0.0.1:10251/healthz&amp;#34;&lt;/span>: dial tcp 127.0.0.1:10251: connect: connection refused
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etcd-0 Healthy &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;health&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>controller-manager和scheduler为不健康状态，修改&lt;code>/etc/kubernetes/manifests/&lt;/code>下的静态pod配置文件&lt;code>kube-controller-manager.yaml&lt;/code>和&lt;code>kube-scheduler.yaml&lt;/code>，删除这两个文件中命令选项中的&lt;code>- --port=0&lt;/code>这行，重启kubelet，再次查看一切正常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl get cs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Warning: v1 ComponentStatus is deprecated in v1.19+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS MESSAGE ERROR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">scheduler Healthy ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">controller-manager Healthy ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etcd-0 Healthy &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;health&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;reason&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>集群初始化如果遇到问题，可以使用&lt;code>kubeadm reset&lt;/code>命令进行清理。&lt;/p>
&lt;h3 id="23-安装包管理器helm-3">2.3 安装包管理器helm 3&lt;/h3>
&lt;p>Helm是Kubernetes的包管理器，后续流程也将使用Helm安装Kubernetes的常用组件。 这里先在master节点node1上按照helm。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">wget https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -zxvf helm-v3.7.2-linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv linux-amd64/helm /usr/local/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行&lt;code>helm list&lt;/code>确认没有错误输出。&lt;/p>
&lt;h3 id="24-部署pod-network组件calico">2.4 部署Pod Network组件Calico&lt;/h3>
&lt;p>选择calico作为k8s的Pod网络组件，下面使用helm在k8s集群中按照calico。&lt;/p>
&lt;p>下载&lt;code>tigera-operator&lt;/code>的helm chart:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">wget https://github.com/projectcalico/calico/releases/download/v3.21.2/tigera-operator-v3.21.2-1.tgz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看这个chart的中可定制的配置:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">helm show values tigera-operator-v3.21.2-1.tgz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">imagePullSecrets: &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">installation:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enabled: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kubernetesProvider: &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiServer:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enabled: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">certs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cert:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commonName:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> typha:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cert:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commonName:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> caBundle:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Configuration for the tigera operator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tigeraOperator:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: tigera/operator
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> version: v1.23.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> registry: quay.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calicoctl:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: quay.io/docker.io/calico/ctl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tag: v3.21.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定制的&lt;code>values.yaml&lt;/code>如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 可针对上面的配置进行定制,例如calico的镜像改成从私有库拉取。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 这里只是个人本地环境测试k8s新版本，因此保留value.yaml为空即可&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用helm安装calico：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">helm install calico tigera-operator-v3.21.2-1.tgz -f values.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等待并确认所有pod处于Running状态:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">watch kubectl get pods -n calico-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calico-kube-controllers-7f58dbcbbd-kdnlg 1/1 Running &lt;span class="m">0&lt;/span> 2m34s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calico-node-nv794 1/1 Running &lt;span class="m">0&lt;/span> 2m34s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">calico-typha-65f579bc5d-4pbfz 1/1 Running &lt;span class="m">0&lt;/span> 2m34s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看一下calico向k8s中添加的api资源:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl api-resources &lt;span class="p">|&lt;/span> grep calico
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bgpconfigurations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> BGPConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bgppeers crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> BGPPeer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">blockaffinities crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> BlockAffinity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caliconodestatuses crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> CalicoNodeStatus
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clusterinformations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> ClusterInformation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">felixconfigurations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> FelixConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">globalnetworkpolicies crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> GlobalNetworkPolicy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">globalnetworksets crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> GlobalNetworkSet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hostendpoints crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> HostEndpoint
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipamblocks crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPAMBlock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipamconfigs crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPAMConfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipamhandles crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPAMHandle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ippools crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPPool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipreservations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> IPReservation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubecontrollersconfigurations crd.projectcalico.org/v1 &lt;span class="nb">false&lt;/span> KubeControllersConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networkpolicies crd.projectcalico.org/v1 &lt;span class="nb">true&lt;/span> NetworkPolicy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networksets crd.projectcalico.org/v1 &lt;span class="nb">true&lt;/span> NetworkSet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些api资源是属于calico的，因此不建议使用kubectl来管理，推荐按照calicoctl来管理这些api资源。 将calicoctl安装为kubectl的插件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd /usr/local/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -o kubectl-calico -O -L &amp;#34;https://github.com/projectcalico/calicoctl/releases/download/v3.21.2/calicoctl&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x kubectl-calico
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>验证插件正常工作:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl calico -h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="25-验证k8s-dns是否可用">2.5 验证k8s DNS是否可用&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl run curl --image=radial/busyboxplus:curl -it
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">If you don&amp;#39;t see a command prompt, try pressing enter.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[ root@curl:/ ]$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进入后执行&lt;code>nslookup kubernetes.default&lt;/code>确认解析正常:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">nslookup kubernetes.default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: 10.96.0.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: kubernetes.default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="26-向kubernetes集群中添加node节点">2.6 向Kubernetes集群中添加Node节点&lt;/h3>
&lt;p>下面将node2, node3添加到Kubernetes集群中，分别在node2, node3上执行:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubeadm join 192.168.96.151:6443 --token o7d0h6.i9taufdl7u1un4va \ --discovery-token-ca-cert-hash sha256:6c55b14e9d71ef098ad0e8f249d85004c41b48063dbcd7692997930f9637f22b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>node2和node3加入集群很是顺利，在master节点上执行命令查看集群中的节点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl get node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS ROLES AGE VERSION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node1 Ready control-plane,master 29m v1.23.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node2 Ready &amp;lt;none&amp;gt; 5m28s v1.23.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node3 Ready &amp;lt;none&amp;gt; 5m4s v1.23.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3kubernetes常用组件部署">3.Kubernetes常用组件部署&lt;/h2>
&lt;h3 id="31-使用helm部署ingress-nginx">3.1 使用Helm部署ingress-nginx&lt;/h3>
&lt;p>为了便于将集群中的服务暴露到集群外部，需要使用Ingress。接下来使用Helm将ingress-nginx部署到Kubernetes上。 Nginx Ingress Controller被部署在Kubernetes的边缘节点上。&lt;/p>
&lt;p>这里将node1(192.168.96.151)作为边缘节点，打上Label：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl label node node1 node-role.kubernetes.io/edge=
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下载ingress-nginx的helm chart:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wget https://github.com/kubernetes/ingress-nginx/releases/download/helm-chart-4.0.13/ingress-nginx-4.0.13.tgz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看&lt;code>ingress-nginx-4.0.13.tgz&lt;/code>这个chart的可定制配置:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">helm show values ingress-nginx-4.0.13.tgz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对values.yaml配置定制如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">controller&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ingressClassResource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">controllerValue&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;k8s.io/ingress-nginx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">admissionWebhooks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicaCount&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># registry: k8s.gcr.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># image: ingress-nginx/controller&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># tag: &amp;#34;v1.1.0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">registry&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">unreachableg/k8s.gcr.io_ingress-nginx_controller&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;v1.1.0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">digest&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sha256:4f5df867e9367f76acfc39a0f85487dc63526e27735fa82fc57d6a652bafbbf6&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostNetwork&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nodeSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">node-role.kubernetes.io/edge&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">affinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">podAntiAffinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">labelSelector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">nginx-ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">component&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">In&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">controller&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">topologyKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetes.io/hostname&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tolerations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node-role.kubernetes.io/master&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">NoSchedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node-role.kubernetes.io/master&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">operator&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">effect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PreferNoSchedule&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>nginx ingress controller的副本数replicaCount为1，将被调度到node1这个边缘节点上。这里并没有指定nginx ingress controller service的externalIPs，而是通过&lt;code>hostNetwork: true&lt;/code>设置nginx ingress controller使用宿主机网络。 因为k8s.gcr.io被墙，这里替换成unreachableg/k8s.gcr.io_ingress-nginx_controller提前拉取一下镜像:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">crictl pull unreachableg/k8s.gcr.io_ingress-nginx_controller:v1.1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">helm install ingress-nginx ingress-nginx-4.0.13.tgz --create-namespace -n ingress-nginx -f values.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl get pod -n ingress-nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ingress-nginx-controller-7f574989bc-xwbf4 1/1 Running 0 117s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试访问&lt;code>http://192.168.96.151&lt;/code>返回默认的nginx 404页，则部署完成。&lt;/p>
&lt;h3 id="32-使用helm部署dashboard">3.2 使用Helm部署dashboard&lt;/h3>
&lt;p>先部署metrics-server：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.2/components.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改components.yaml中的image为&lt;code>docker.io/unreachableg/k8s.gcr.io_metrics-server_metrics-server:v0.5.2&lt;/code>。 修改components.yaml中容器的启动参数，加入&lt;code>--kubelet-insecure-tls&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl apply -f components.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>metrics-server的pod正常启动后，等一段时间就可以使用&lt;code>kubectl top&lt;/code>查看集群和pod的metrics信息:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl top node --use-protocol-buffers=true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME CPU(cores) CPU% MEMORY(bytes) MEMORY%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node1 219m 5% 3013Mi 39%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node2 102m 2% 1576Mi 20%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node3 110m 2% 1696Mi 21%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl top pod -n kube-system --use-protocol-buffers=true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME CPU(cores) MEMORY(bytes)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">coredns-59d64cd4d4-9mclj 4m 17Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">coredns-59d64cd4d4-fj7xr 4m 17Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">etcd-node1 25m 154Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-apiserver-node1 80m 465Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-controller-manager-node1 17m 61Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-hhlhc 1m 21Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-nrhq7 1m 19Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-proxy-phmrw 1m 17Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-scheduler-node1 4m 24Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubernetes-dashboard-5cb95fd47f-6lfnm 3m 36Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">metrics-server-9ddcc8ddf-jvlzs 5m 21Mi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来使用helm部署k8s的dashboard，添加chart repo:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm repo update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看chart的可定制配置:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">helm show values kubernetes-dashboard/kubernetes-dashboard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对value.yaml定制配置如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubernetesui/dashboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v2.4.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nginx.ingress.kubernetes.io/ssl-redirect&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nginx.ingress.kubernetes.io/backend-protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTPS&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">k8s.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example-com-tls-secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">k8s.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metricsScraper&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>先创建存放&lt;code>k8s.example.com&lt;/code>ssl证书的secret:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl create secret tls example-com-tls-secret \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --cert=cert.pem \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --key=key.pem \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -n kube-system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用helm部署dashboard:&lt;/p>
&lt;p>helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard &lt;br>
-n kube-system &lt;br>
-f values.yaml&lt;/p>
&lt;p>确认上面的命令部署成功。&lt;/p>
&lt;p>创建管理员sa:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl create serviceaccount kube-dashboard-admin-sa -n kube-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl create clusterrolebinding kube-dashboard-admin-sa \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--clusterrole=cluster-admin --serviceaccount=kube-system:kube-dashboard-admin-sa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>获取集群管理员登录dashboard所需token:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl -n kube-system get secret | grep kube-dashboard-admin-sa-token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-dashboard-admin-sa-token-rcwlb kubernetes.io/service-account-token 3 68s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl describe -n kube-system secret/kube-dashboard-admin-sa-token-rcwlb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: kube-dashboard-admin-sa-token-rcwlb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: kube-system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Annotations: kubernetes.io/service-account.name: kube-dashboard-admin-sa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kubernetes.io/service-account.uid: fcdf27f6-f6f9-4f76-b64e-edc91fb1479b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Type: kubernetes.io/service-account-token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">====
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace: 11 bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">token: eyJhbGciOiJSUzI1NiIsImtpZCI6IkYxWTd5aDdzYWsyeWJVMFliUUhJMXI4YWtMZFd4dGFDT1N4eEZoam9HLUEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlLWRhc2hib2FyZC1hZG1pbi1zYS10b2tlbi1yY3dsYiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlLWRhc2hib2FyZC1hZG1pbi1zYSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImZjZGYyN2Y2LWY2ZjktNGY3Ni1iNjRlLWVkYzkxZmIxNDc5YiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTprdWJlLWRhc2hib2FyZC1hZG1pbi1zYSJ9.R3l19_Nal4B2EktKFSJ7CgOqAngG_MTgzHRRjWdREN7dLALyfiRXYIgZQ90hxM-a9z2sPXBzfJno4OGP4fPX33D8h_4fgxfpVLjKqjdlZ_HAks_6sV9PBzDNXb_loNW8ECfsleDgn6CZin8Vx1w7sgkoEIKq0H-iZ8V9pRV0fTuOZcB-70pV_JX6H6WBEOgRIAZswhAoyUMvH1qNl47J5xBNwKRgcqP57NCIODo6FiClxfY3MWo2vz44R5wYCuBJJ70p6aBWixjDSxnp5u9mUP0zMF_igICl_OfgKuPyaeuIL83U8dS5ovEwPPGzX5mHUgaPH7JLZmKRNXJqLhTweA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ca.crt: 1066 bytes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用上面的token登录k8s dashboard。&lt;/p>
&lt;p>&lt;a href="https://blog.frognew.com/images/2021/06/k8s-1.21-dashboard.png">&lt;img src="https://blog.frognew.com/images/2021/06/k8s-1.21-dashboard.png" alt="dashboard">&lt;/a>&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>calico: &lt;a href="https://www.jianshu.com/p/4b175e733cd3">BIRD is not ready: BGP not established&lt;/a>&lt;/p>
&lt;p>一种是通过正则指定网卡，类似这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">IP_AUTODETECTION_METHOD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;interface=ens.*&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="n">ens&lt;/span> &lt;span class="err">根据实际网卡开头配置&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另一种是从部署节点到到达目的节点的,类似这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Using IP addresses&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">IP_AUTODETECTION_METHOD&lt;/span>&lt;span class="o">=&lt;/span>can-reach&lt;span class="o">=&lt;/span>8.8.8.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">IP6_AUTODETECTION_METHOD&lt;/span>&lt;span class="o">=&lt;/span>can-reach&lt;span class="o">=&lt;/span>2001:4860:4860::8888
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Using domain names&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">IP_AUTODETECTION_METHOD&lt;/span>&lt;span class="o">=&lt;/span>can-reach&lt;span class="o">=&lt;/span>www.google.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">IP6_AUTODETECTION_METHOD&lt;/span>&lt;span class="o">=&lt;/span>can-reach&lt;span class="o">=&lt;/span>www.google.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是通过 Installation 安装的，需要修改一个CRD Installation&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">Installing kubeadm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm//">Creating a cluster with kubeadm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/containerd/containerd">https://github.com/containerd/containerd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2">https://pkg.go.dev/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.projectcalico.org/">https://docs.projectcalico.org/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-1/</link><pubDate>Tue, 15 Feb 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-1/</guid><description>&lt;h1 id="go-的io">Go 的IO&lt;/h1>
&lt;h2 id="首要问题内核中的缓冲和进程中的缓冲">首要问题，内核中的缓冲和进程中的缓冲&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>内核中的缓冲&lt;/p>
&lt;p>无论进程是否提供缓冲，内核都是提供缓冲的，系统对磁盘的读写都会提供一个缓冲（page/buffer cache），将数据写入到页/块缓冲进行排队，当页/块缓冲达到一定的量时，才能把数据写入磁盘。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进程中的缓冲&lt;/p>
&lt;p>是指对输入输出流进行了改进，提供了流缓冲。当调用一个函数向磁盘写数据时，先把数据写入缓冲区，当达到某个条件后，如流缓冲满了，或者刷新流缓冲，这时候才会把数据一次送往内核提供的页/块缓冲区中，再经页/块化重写入磁盘。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="operating-system-----linux的文件io系统">Operating System &amp;mdash; linux的文件I/O系统&lt;/h2>
&lt;ul>
&lt;li>引言&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>操作系统首先是一个系统，一般由不同的模块组成，往往主要功能是xxx的&lt;strong>增删改查&lt;/strong>功能。操作系统主要是管理硬件和提供给我们一个舒适的开发环境的作用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>操作系统可以分为多个&lt;strong>子系统&lt;/strong>（VFS算一个），各个子系统又有多个&lt;strong>模块&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为什么处理器设有两种模式？&lt;/p>
&lt;p>内核态和用户态，&lt;strong>安全第一&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>虚拟内存。其实本质上很简单，就是操作系统将程序常用的数据放到内存里加速访问，不常用的数据放在磁盘上。 这一切对用户程序来说完全是透明的，用户程序可以假装所有数据都在内存里，然后通过虚拟内存地址去访问数据。在这背后，操作系统会自动将数据在主存和磁盘之间进行交换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/1ffde2de153f">操作系统对内存的管理机&lt;/a>&lt;/p>
&lt;p>突然想到一个哲学问题，跟生活是相关的。像我们平时生活一样，总是尽可能的把每个东西用尽 用好 用到它的最大极限。同理， Go 语言的内存管理是参考 tcmalloc 实现的，它其实就是利用好了 OS 管理内存的这些特点，来最大化内存分配性能的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/7405b4e11ee2">Go 语言是如何利用底层的这些特性来优化内存的？&lt;/a>&lt;/p>
&lt;ul>
&lt;li>内存分配大多时候都是&lt;strong>在用户态&lt;/strong>完成的，不需要频繁进入内核态。&lt;/li>
&lt;li>每个 P 都有独立的 span cache，多个 CPU 不会并发读写同一块内存，进而减少 CPU L1 cache 的 cacheline 出现 dirty 情况，增大 cpu cache 命中率。&lt;/li>
&lt;li>内存碎片的问题，Go 是自己在用户态管理的，在 OS 层面看是没有碎片的，使得操作系统层面对碎片的管理压力也会降低。&lt;/li>
&lt;li>mcache 的存在使得内存分配不需要加锁。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Linux中VFS &amp;mdash;&amp;gt; 文件IO系统&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/XcNevS9PrLdy6IW.png" alt="">&lt;/p>
&lt;p>​ 如上图所示，page cache的本质是由 Linux 内核管理的内存区域。我们通过 mmap 以及 buffered IO 将文件读取到内存空间。实际上，都是读取到 page cache中。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>page cache&lt;/p>
&lt;blockquote>
&lt;p>除了 Direct IO，与磁盘相关的文件读写都有使用到 page cache技术&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>kernel 2.6以后（引入了虚拟内存），page cache 面向文件&lt;/li>
&lt;li>文件I/O （系统I/O）操作只和page cache交互&lt;/li>
&lt;li>用在所有&lt;strong>以文件为单元&lt;/strong>的场景中，比如网络文件系统&lt;/li>
&lt;li>address_space 作为文件系统和页缓存的中间适配器，用来指示一个文件在page cache中已经缓存了的物理页&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>如何查看OS的 page cache?&lt;/p>
&lt;p>通过读取 /proc/meminfo 文件，能够实时获取系统内存情况：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ cat /proc/meminfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Buffers: &lt;span class="m">1224&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cached: &lt;span class="m">111472&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SwapCached: &lt;span class="m">36364&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Active: &lt;span class="m">6224232&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Inactive: &lt;span class="m">979432&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Active&lt;span class="o">(&lt;/span>anon&lt;span class="o">)&lt;/span>: &lt;span class="m">6173036&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Inactive&lt;span class="o">(&lt;/span>anon&lt;span class="o">)&lt;/span>: &lt;span class="m">927932&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Active&lt;span class="o">(&lt;/span>file&lt;span class="o">)&lt;/span>: &lt;span class="m">51196&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Inactive&lt;span class="o">(&lt;/span>file&lt;span class="o">)&lt;/span>: &lt;span class="m">51500&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Shmem: &lt;span class="m">10000&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SReclaimable: &lt;span class="m">43532&lt;/span> kB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据上面的数据，你可以简单得出这样的公式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">page cache = buffers + cached + swap = active + inactive + share + swap
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>为什么 swap 和 buffers 也是 page cache的一部分？&lt;/p>
&lt;p>因为当匿名页 Inactive(anon)以及 Active(anon) 先被交换到磁盘（out）后，然后再加载回（in）内存中，由于读入到内存后原来地 swap file 还在，所以 swap cached 也可以认为是 File-backed page，即属于 page cache。过程如下图所示：&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/DNl5Ov3rgIc6ZjQ.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>page 和 page cache&lt;/p>
&lt;p>page 是内核内存管理分配的基本单位（4KB）&lt;/p>
&lt;p>page cache 由多个page构成（4KB的整数倍）&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：并不是所有 page 都被组织成为 page cache&lt;/p>
&lt;p>Linux 系统上供用户可访问的内存分为两个类型：&lt;/p>
&lt;ol>
&lt;li>File-backed pages: 文件备份页，也就是page cache中的 page，对应于磁盘上的若干数据块；对于这些页最大的问题是脏页回盘&lt;/li>
&lt;li>Anonymous pages: 匿名页不对应磁盘上的任何磁盘数据块，他们是进程的运行内存空间，比如方法栈、局部变量等属性&lt;/li>
&lt;/ol>
&lt;p>两种类型在 swap 机制下的性能比较：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>File-backed pages的内存回收代价较低。page cache 通常对应于一个文件上的若干顺序块， 因此可以通过顺序IO的方式落盘。另一方面，如果 page cache 上没有进行写操作（即没有脏页），甚至不会将page cache 回盘，因为数据的内容完全可以通过再次读取磁盘文件得到。&lt;/p>
&lt;p>page cache 的主要难点在于脏页回盘，怎么个难法呢？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Anonymous pages 的内存会后代价较高。因为这种pages 通常随机地写入持久化交换设备。另一方面，无论是否有写操作，为了确保数据不丢失，Anonymous pages在swap时必须持久化到磁盘。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>swap 与 缺页中断&lt;/p>
&lt;p>&lt;a href="https://lwn.net/Articles/690079/">swap 机制&lt;/a>指地是当物理内存不够用，内存管理单元（MMU）需要提供&lt;strong>调度算法&lt;/strong>来回收相关内存空间，然后将清理出来地内存空间给当前内存申请方。&lt;/p>
&lt;p>swap 存在地本质原因是 Linux 系统提供了虚拟内存管理机制。每个进程都认为自己独占内存空间，因此所有进程地内存空间之和远远大于物理内存。所有进程的内存空间之和超过物理内存的部分就需要交换到磁盘上。&lt;/p>
&lt;p>OS以 page 为单位管理内存，当进程发现需要访问的数据不在内存时，OS可能会将数据以页的方式加载到内存中，上述过程被称为缺页中断。当OS发生缺页中断时，就会通过系统调用将 page 再次读到内存中。&lt;/p>
&lt;p>但主内存的空间时有限的，当主内存中不包含可以使用的空间时，OS会选择合适的物理内存逐页驱逐回磁盘，为新的内存页让出位置，选择待驱逐页的过程在OS中叫做页面替换（page replacement）,替换操作又会触发 swap 机制。&lt;/p>
&lt;p>如果物理内存足够大，那么可能不需要 swap 机制，但是 swap 在这种情况下还是有一定优势：对于有发生内存泄漏几率的应用程序（进程）, swap交换分区更是重要，这可以确保内存泄漏不至于导致物理内存不够用，最终导致系统崩溃。但内存泄漏会引起频繁的 swap，此时会非常影响OS的性能。&lt;/p>
&lt;p>Linux 通过一个 swappiness 参数来控制 swap 机制：这个参数可为 0~100，控制系统swap的优先级。&lt;/p>
&lt;ol>
&lt;li>高数值，较高频率的swap，进程不活跃时将其转换出物理内存&lt;/li>
&lt;li>低数值，较低频率的swap，这可以确保交互式不因为内存空间频繁地交换到磁盘而提高响应延迟。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>page cache 和 buffer cache&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~ free -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> total used free shared buffers cached
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mem: &lt;span class="m">128956&lt;/span> &lt;span class="m">96440&lt;/span> &lt;span class="m">32515&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">5368&lt;/span> &lt;span class="m">39900&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-/+ buffers/cache: &lt;span class="m">51172&lt;/span> &lt;span class="m">77784&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Swap: &lt;span class="m">16002&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">16001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中，cached 表示当前的页缓存（page cache）占用量，用于缓存文件的页数据；页是逻辑上的概念，因此page cache 是与文件系统同级的&lt;/p>
&lt;p>buffers 表示当前的块缓存（buffer cache）占用量，用于缓存块设备的块数据；块是物理上的概念，因此buffer cache是与块设备驱动程序同级的。&lt;/p>
&lt;p>page cache 和 buffer cache的共同目的都是加速数据IO。写数据时，首先写到缓存，将写入的页标记为 dirty，然后向外部存储 flush，也就是缓存写机制中的 write-back（另一种是 write-through，Linux默认情况下不采用）；读数据时，首先读取缓存，如果命中，再去外部存储读取，并且将读取来的数据页加入缓存。OS&lt;strong>总是积极地&lt;/strong>将所有空闲内存都用做 page cache和 buffer cache，当内存不够用时，也会用LRU等算法淘汰缓存页。&lt;/p>
&lt;p>在Linux 2.4 内核之前，page cache 和 buffer cache是完全分离的。但是，块设备大多是磁盘，磁盘上的数据又大多通过文件系统来组织，这种设计导致很多数据被缓存了两次，浪费内存。所以，**在2.4版本之后，两块缓存近似融合在了一起，如果一个文件的页加载到了 page cache，那么同时 buffer cache只需要维护块指向页的指针就可以了。**只有那么没有用文件表示的块，或者绕过了OS直接操作的块（如dd命令），才会真正放到 buffer cache中。因此，我们现在提起 page cache，基本上都同时指 page cache 和 buffer cache 两者。&lt;/p>
&lt;p>下图近似地给出 32位 Linux系统中可能地一种 page cache结构：&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/EQ6xXHyPtrSldbf.png" alt="">&lt;/p>
&lt;p>block size = 1KB&lt;/p>
&lt;p>page size = 4KB&lt;/p>
&lt;p>page cache中的每个文件都是一棵&lt;strong>基数树&lt;/strong>（radix tree,本质上是多差搜索树），树的每个节点都是一个页。根据文件内的偏移量就可以快速定位到所在的页，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/U7RhXsNSZfCOj1Y.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>page cache与预读&lt;/p>
&lt;p>OS为基于page cache的读缓存机制提供预读机制（PAGE_READAHEAD）,eg:&lt;/p>
&lt;ol>
&lt;li>用户线程仅仅请求读取磁盘上文件A的offset为0-3KB范围内的数据，由于磁盘的基本读写单位为 block = 4KB，于是OS至少会读0-4KB的内容，这恰好可以在一个page中装下。&lt;/li>
&lt;li>但是OS处于&lt;a href="https://spongecaptain.cool/SimpleClearFileIO/1.%20page%20cache.html">局部性原理&lt;/a>会选择将磁盘块 offset[4KB,8KB)、[8KB,12KB)、[12KB,16KB)都加载到内存，于是额外在内存中申请了3个page。如下如图所示OS的预读机制：&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/WmBhwcnCUtoNdMQ.gif" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>page cache与文件持久化的一致性&lt;/p>
&lt;p>现代 Linux 的page cache正如其名，是对磁盘上的 page 的内存缓存，同时可以用于读/写操作。&lt;strong>任何系统引入缓存，就会引发一致性问题&lt;/strong>：内存中的数据与磁盘中的数据不一致，如最常见后端架构中的redis缓存与mysql数据库就存在一致性的问题。&lt;/p>
&lt;p>Linux 提供多种机制来保证数据一致性，但无论是单机上的内存与磁盘一致性，还是分布式组件中节点1与节点2、3的数据一致性问题，理解的关键是 trade-off：吞吐量与数据一致性保证是一对矛盾。&lt;/p>
&lt;p>首先，需要我们理解一下文件的数据，文件 = 元数据+数据。&lt;/p>
&lt;blockquote>
&lt;p>元数据=文件大小+创建时间+访问时间+属主属组等信息&lt;/p>
&lt;/blockquote>
&lt;p>Linux 采用以下两种方式实现文件一致性：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Write Through(写穿)：向用户层提供特定接口，应用程序可主动调用接口来保证文件一致性；&lt;/p>
&lt;p>以牺牲系统IO吞吐量为代价，向上层应用确保一旦写入，数据就已经落盘，不会丢失。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Write Back(写回)：系统中存在定期任务（表现形式为内核线程），周期性地同步文件系统中文件脏数据块，这就是默认的Linux一致性方案；&lt;/p>
&lt;p>在系统发生宕机的情况下无法确保数据已经落盘，因此存在数据丢失的问题。不过，在程序挂了，如被 kill -9, OS会确保page cache 中的数据落盘。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>两种方法都依赖系统调用，主要分为三种系统调用，可以分别由用户进程与内核进程发起：&lt;/p>
&lt;ol>
&lt;li>fsync(int fd)，将fd 代表的&lt;strong>文件的&lt;/strong>脏数据和脏元数据全部刷新到磁盘中&lt;/li>
&lt;li>fdatasync(int fd)，将 fd 代表的文件的脏数据刷新至磁盘，同时对必要的（文件大小，而文件修改时间等不属于必要信息）元数据刷新至磁盘中。&lt;/li>
&lt;li>sync()，对&lt;strong>系统中所有的&lt;/strong>脏的文件数据、元数据都刷新至磁盘中&lt;/li>
&lt;/ol>
&lt;p>描述一下内核线程的相关特性：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建的针对&lt;strong>回写任务&lt;/strong>的内核线程数由系统中持久存储设备决定，为每个存储设备创建单独的刷新线程；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关于&lt;strong>多线程的架构&lt;/strong>问题，Linux内核采取了 Lighthttp 的做法。即系统中存在一个管理线程和多个刷新线程（每个持久存储设备对应一个刷新线程）。管理线程监控设备上的脏页面情况，若设备一段时间内没有产生脏页面，就销毁设备上的刷新线程；若监测到设备上有脏页面需要回写且尚未为该设备创建刷新线程，那么创建刷新线程处理脏页面回写。而刷新线程的任务较为单调，只负责将设备中的脏页面回写至持久存储设备中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刷新线程刷新设备上脏页面大致设计如下：&lt;/p>
&lt;p>每个设备保存脏文件链表，保存的是该设备上存储的脏文件的inode节点。所谓的回写文件脏页面即回写该 inode 链表上的某些文件的脏页面；&lt;/p>
&lt;p>系统中存在多个回写时机。第一，应用程序主动调用回写接口；第二，管理线程周期性地唤醒设备上的回写线程进行回写；第三，某些应用程序/内核任务发现内存不足时要回收部分缓存页面而事先进行脏页面回写，设计一个统一的框架来管理这些回写任务非常有必要。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>优势，好处，特点，独特。。。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>加快数据访问&lt;/p>
&lt;/li>
&lt;li>
&lt;p>减少IO次数，提高系统磁盘IO吞吐量&lt;/p>
&lt;p>得益于 page cache的缓存以及预读能力，而程序又往往符合局部性原理。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>劣势，缺点，不足。。。&lt;/p>
&lt;ol>
&lt;li>最直接的缺点就是需要占用&lt;strong>额外&lt;/strong>物理内存空间，物理内存在比较紧张的时候可能导致频繁的 swap 操作，最终导致系统的磁盘IO负载上升。（还是那个观点，工业4.0时代，多用点而内存会带来人们的美好生活）&lt;/li>
&lt;li>对应用层&lt;strong>没有提供&lt;/strong>很好的管理API，几乎是透明管理。应用层即使想优化 page cache的使用策略也很难进行。因为一些应用选择在用户空间实现自己的 page 管理，而不使用 page cache，例如 mysql 的 innoDB存储引擎以 16KB的页进行管理。（事实是提供了，但某人觉得满足不了他的美好生活，看来人们的美好生活是日益增长的）&lt;/li>
&lt;li>某些场景下&lt;a href="https://spongecaptain.cool/SimpleClearFileIO/2.%20DMA%20%E4%B8%8E%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF.html">比 Direct IO多一次磁盘IO&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>零拷贝&lt;/p>
&lt;p>历史变迁：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>​ 没有任何优化技术的数据四次拷贝与四次上下文切换&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/pG4a8lrRYcZ5SQs.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DMA参与下的数据四次拷贝&lt;/p>
&lt;p>DMA 也有其局限性，DMA 仅仅能用于设备之间交换数据时进行数据拷贝，但是系统内部的数据拷贝还需要 CPU 进行，例如 CPU 需要负责内核空间数据与用户空间数据之间的拷贝（内存内部的拷贝） 。&lt;/p>
&lt;p>read buffer == page cache&lt;/p>
&lt;p>socket buffer == socket 缓冲区&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/VvQ9Sn67kPTGIx3.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不同的零拷贝技术适用于不同的应用场景&lt;/p>
&lt;ul>
&lt;li>
&lt;p>DMA 技术回顾：DMA 负责内存与其他组件之间的数据拷贝，CPU 仅需负责管理，而无需负责全程的数据拷贝；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 page cache 的 zero copy：&lt;/p>
&lt;/li>
&lt;li>
&lt;ol>
&lt;li>sendfile：一次代替 read/write 系统调用，通过使用 DMA 技术以及传递文件描述符，实现了 zero copy&lt;/li>
&lt;li>mmap：仅代替 read 系统调用，将内核空间地址映射为用户空间地址，write 操作直接作用于内核空间。通过 DMA 技术以及地址映射技术，用户空间与内核空间无须数据拷贝，实现了 zero copy&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>不使用 page cache 的 Direct I/O：读写操作直接在磁盘上进行，不使用 page cache 机制，通常结合用户空间的用户缓存使用。通过 DMA 技术直接与磁盘/网卡进行数据交互，实现了 zero copy&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>零拷贝&lt;strong>思想&lt;/strong>（ 不是不进行拷贝，而是 CPU 不再全程负责数据拷贝时的搬运工作 ）的一个具体实现。&lt;/p>
&lt;p>一种内存映射文件的方法，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一映射关系。&lt;/p>
&lt;p>零拷贝的特点是 CPU 不全程负责内存中的数据写入其他组件，CPU 仅仅起到管理的作用 。&lt;/p>
&lt;p>具体实现：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>sendfile&lt;/strong>（ 用户从磁盘读取一些文件数据后&lt;strong>不需要经过任何计算与处理&lt;/strong>就通过网络传输出去 ）&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/HehQIWMnpdSzAZB.jpg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>mmap&lt;/strong>，利用 &lt;code>mmap()&lt;/code> 替换 &lt;code>read()&lt;/code>，配合 &lt;code>write()&lt;/code> 调用的整个流程如下：&lt;/p>
&lt;ol>
&lt;li>用户进程调用 &lt;code>mmap()&lt;/code>，从用户态陷入内核态，将内核缓冲区映射到用户缓存区；&lt;/li>
&lt;li>DMA 控制器将数据从硬盘拷贝到内核缓冲区（可见其使用了 Page Cache 机制）；&lt;/li>
&lt;li>&lt;code>mmap()&lt;/code> 返回，上下文从内核态切换回用户态；&lt;/li>
&lt;li>用户进程调用 &lt;code>write()&lt;/code>，尝试把文件数据写到内核里的套接字缓冲区，再次陷入内核态；&lt;/li>
&lt;li>CPU 将内核缓冲区中的数据拷贝到的套接字缓冲区；&lt;/li>
&lt;li>DMA 控制器将数据从套接字缓冲区拷贝到网卡完成数据传输；&lt;/li>
&lt;li>&lt;code>write()&lt;/code> 返回，上下文从内核态切换回用户态。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>splice&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>直接 Direct I/O&lt;/strong>（自缓存应用程序，数据库管理系统就是这类的一个代表）&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/nailwsNUbyM5xf1.jpg" alt="">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>不同的零拷贝技术适用于不同的应用&lt;strong>场景&lt;/strong> 。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>把mmap单独拿出来说&lt;/p>
&lt;p>用户空间mmap&amp;mdash;&amp;gt;内核空间mmap&amp;mdash;&amp;gt;缺页异常&lt;/p>
&lt;p>对比，&lt;a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html">从内核文件系统看文件读写过程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>案例&lt;/p>
&lt;ol>
&lt;li>
&lt;p>kafaka&lt;/p>
&lt;p>使用 mmap 来对接收到的数据进行持久化，使用 sendfile 从持久化介质中读取数据然后对外发送是一对常用的组合。但是注意，你无法利用 sendfile 来持久化数据，利用 mmap 来实现 CPU 全程不参与数据搬运的数据拷贝。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="">mysql 的零拷贝技术&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>总而言之，常规文件操作需要从磁盘到页缓存再到用户主存的两次数据拷贝。而mmap操控文件，只需要从&lt;strong>磁盘到用户主存&lt;/strong>的一次数据拷贝过程。&lt;/p>
&lt;p>说白了，mmap的关键点是实现了用户空间和内核空间的数据直接交互而省去了不同空间数据不通的繁琐过程 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mmap&lt;/p>
&lt;p>一种内存映射文件的方法。将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对应关系。实现这样的映射关系后，进程就可以采用指针的方式读写这一段内存，而OS会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read、write等系统调用函数。相反，内核空间对这段区域的修改也直接反映到用户空间，从而可以实现不同进程间的文件共享。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/uhnNDGws3xR24Tk.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>特点&lt;/p>
&lt;ol>
&lt;li>mmap 向应用程序提供的内存访问接口是内存地址连续的，但是对应的磁盘文件的 block 可以不是地址连续的&lt;/li>
&lt;li>mmap 提供的内存空间是虚拟空间，而不是物理空间，因此完全可以分配远远大于物理内存大小的虚拟空间，如16G内存主机可以分配1000G的mmap内存空间&lt;/li>
&lt;li>mmap 负责映射文件逻辑上一段连续的数据（物理上可以不连续存储）映射为连续内存，而这里的文件可以是磁盘文件、驱动假造出来的文件以及设备&lt;/li>
&lt;li>mmap 由OS负责管理，对同一个文件地址的映射将被所有线程共享，OS确保线程安全及线程可见性&lt;/li>
&lt;/ol>
&lt;p>mmap 的设计很有启发性。基于磁盘的读写单位是 block(4KB)，而基于内存的读写单元是&lt;strong>地址&lt;/strong>。换言之，CPU进行一次磁盘读写操作涉及的数据量至少是4KB。但是，进行一次内存操作涉及的数据量是基于地址的，也就是通常的 64bit 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模型&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/25/m9QcSfVAJ1dEigv.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>利用 DMA 技术来取代 CPU 来在内存与其他组件之间的数据拷贝，例如从磁盘到内存，从内存到网卡；&lt;/li>
&lt;li>用户空间的 mmap file 使用虚拟内存，实际上并不占据物理内存，只有在内核空间的 kernel buffer cache 才占据实际的物理内存；&lt;/li>
&lt;li>&lt;code>mmap()&lt;/code> 函数需要配合 &lt;code>write()&lt;/code> 系统调动进行配合操作，这与 &lt;code>sendfile()&lt;/code> 函数有所不同，后者一次性代替了 &lt;code>read()&lt;/code> 以及 &lt;code>write()&lt;/code>；因此 mmap &lt;strong>也至少&lt;/strong>需要 4 次上下文切换；&lt;/li>
&lt;li>mmap 仅仅能够避免内核空间到用户空间的全程 CPU 负责的数据拷贝，但是&lt;strong>内核空间内部&lt;/strong>还是需要全程 CPU 负责的数据拷贝&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>流程&lt;/p>
&lt;ol>
&lt;li>用户进程调用 &lt;code>mmap()&lt;/code>，从用户态陷入内核态，将内核缓冲区映射到用户缓存区；&lt;/li>
&lt;li>DMA 控制器将数据从硬盘拷贝到内核缓冲区（&lt;strong>可见其使用了 Page Cache 机制&lt;/strong>）；&lt;/li>
&lt;li>&lt;code>mmap()&lt;/code> 返回，上下文从内核态切换回用户态；&lt;/li>
&lt;li>用户进程调用 &lt;code>write()&lt;/code>，尝试把文件数据写到内核里的套接字缓冲区，再次陷入内核态；&lt;/li>
&lt;li>CPU 将内核缓冲区中的数据拷贝到的套接字缓冲区；&lt;/li>
&lt;li>DMA 控制器将数据从套接字缓冲区拷贝到网卡完成数据传输；&lt;/li>
&lt;li>&lt;code>write()&lt;/code> 返回，上下文从内核态切换回用户态。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>优势&lt;/p>
&lt;ol>
&lt;li>
&lt;p>简化用户进程编程&lt;/p>
&lt;p>基于缺页异常的懒加载&lt;/p>
&lt;p>数据一致性由OS确保&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读写效率提高：避免内核空间到用户空间的数据拷贝&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免只读操作时的swap操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>节约内存&lt;/p>
&lt;p>用户空间与内核空间实际上公用同一份数据&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>适用场景，非常受限&lt;/p>
&lt;ol>
&lt;li>多个线程以&lt;strong>只读的方式&lt;/strong>同时访问一个文件，这是因为 mmap 机制下多线程共享了同一物理内存空间，因此节约了内存；&lt;/li>
&lt;li>mmap 非常适合用于&lt;strong>进程间通信&lt;/strong>，这是因为对同一文件对应的 mmap 分配的物理内存天然多线程共享，并可以依赖于操作系统的同步原语；&lt;/li>
&lt;li>mmap 虽然比 sendfile 等机制多了一次 CPU 全程参与的内存拷贝，但是用户空间与内核空间并不需要数据拷贝，因此在正确使用情况下并不比 sendfile 效率差；&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>不适合的场景&lt;/p>
&lt;ol>
&lt;li>由于 mmap 使用时&lt;strong>必须实现指定好&lt;/strong>内存映射的大小，因此 mmap 并不适合变长文件；&lt;/li>
&lt;li>如果&lt;strong>更新频繁&lt;/strong>，mmap 避免两态拷贝的优势就被摊还，最终还是落在了大量的脏页回写及由此引发的随机 I/O 上，所以在随机写很多的情况下，mmap 方式在效率上不一定会比带缓冲区的一般写快；&lt;/li>
&lt;li>读/写&lt;strong>小文件&lt;/strong>（例如 16K 以下的文件），mmap 与通过 read 系统调用相比有着更高的开销与延迟；同时 mmap 的&lt;strong>刷盘由系统全权控制&lt;/strong>，但是在小数据量的情况下由应用本身手动控制更好；&lt;/li>
&lt;li>mmap 受限于操作系统内存大小：例如在 32-bits 的操作系统上，虚拟内存总大小也就 2GB，但由于 mmap 必须要在内存中找到一块连续的地址块，此时你就无法对 4GB 大小的文件完全进行 mmap，在这种情况下你必须分多块分别进行 mmap，但是此时地址内存地址已经不再连续，使用 mmap 的意义大打折扣，而且引入了额外的复杂性；&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>参考&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html">认真分析mmap: 是什么 为什么 怎么用&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.zhihu.com/question/48161206">Linux中 mmap() 函数的内存映射问题理解？&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://stackoverflow.com/questions/258091/when-should-i-use-mmap-for-file-access">When should I use mmap for file access&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/308054212">Linux IO原理和Zero-copy技术全面揭秘&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="go-的io-1">Go 的IO&lt;/h2>
&lt;p>它的 io 和 bufio 是进程中（也可以说是&lt;strong>用户态&lt;/strong>）的缓冲。&lt;/p>
&lt;h3 id="go-和-io的不解之缘">Go 和 IO的不解之缘&lt;/h3>
&lt;p>Go 是一种高性能的编译型语言，天然支持高并发，用户级别封装协程，号称支持百万的协程并发，这个量级不是线程可比的。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>那Go支持如此高并发的秘诀在于？&lt;/p>
&lt;p>&lt;strong>执行体调度得当&lt;/strong>。CPU不停的在不同执行体（goroutine）之间反复横跳。CPU一直在装填和运行不同执行体的指令，G1 不行就搞G2，一刻都不能停，这样才能使得大量的执行体齐头并进，系统才能完成如此高并发的吞吐。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>那Go适合CPU密集型的程序，还是IO密集型的程序呢？&lt;/p>
&lt;p>**IO密集型。**首先，反推逻辑，CPU密集型就意味着每个执行体都是急需CPU的，G1都吃不饱，切到G2去干嘛，所以CPU密集型的程序最好的情况就是不调度，绑核都来不及呢。想要提高这种程序的性能，就是加钱，买核。&lt;/p>
&lt;p>IO设备和CPU是不同的独立设备。这两者之间的处理可以是并行运行的。Go程序的协程调度可以很好的利用这个关系。让CPU执行程序指令，只负责发送IO，一旦IO被设备接收，CPU不等待完成，就可以处理其他的指令，IO的完成以异步事件的形式触发。这样，IO设备的处理过程和CPU的执行就并行起来了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任何IO都适配Go么？&lt;/p>
&lt;p>Go 语言级别把&lt;strong>网络IO做了异步化&lt;/strong>，但是文件IO还是同步的调用&lt;/p>
&lt;ol>
&lt;li>网络fd可以用epoll池来管理事件，实现异步IO&lt;/li>
&lt;li>文件fd不能用epoll池来管理事件，只能同步IO&lt;/li>
&lt;/ol>
&lt;p>文件想要实现异步IO，当前Linux下有种方式：&lt;/p>
&lt;ul>
&lt;li>AIO: 但Go没有封装实现&lt;/li>
&lt;li>io_uring: 内核版本要求高&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="go的io长什么样子">Go的IO长什么样子&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>IO接口描述&lt;/p>
&lt;p>&lt;code>io/io.go&lt;/code>不涉及具体的IO实现，只有&lt;strong>语义接口&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Reader&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Writer&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>按照接口的定义维度，大致可以分为3大类：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基础类型&lt;/p>
&lt;p>Reader、Writer、Closer。。。等，描述了最原始的Go的IO的样子。如果你写代码的时候，要实现这些接口，千万要把标准库里的注释读三遍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>组合类型&lt;/p>
&lt;p>往往把最基本的接口组合起来，使用Go的embeding语法糖，比如：ReaderCloser、WriteCloser等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进阶类型&lt;/p>
&lt;p>基于基础接口，加上一些有趣的实现。比如：TeeReader、LimitReader、MultiReader&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>IO 通用函数&lt;/p>
&lt;p>io库还有一些基于以上接口的函数，&lt;/p>
&lt;ul>
&lt;li>Copy&lt;/li>
&lt;li>CopyN&lt;/li>
&lt;li>CopyBuffer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>io/ioutil&lt;/p>
&lt;p>顾名思义，这是一个工具类型的库，util嘛 啥都要有，相当于平时的快捷键。&lt;/p>
&lt;p>这就是个工具库，应付一些简单的场景：&lt;/p>
&lt;p>ReadFile、WriteFile、ReadDir&amp;hellip;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="io-的姿势多种多样">IO 的姿势多种多样&lt;/h3>
&lt;p>哈哈，这位博主的理解很特别，Go 标准io库定义了基础的语义接口，那具体实现呢？&lt;/p>
&lt;ol>
&lt;li>字节数组可以是 Reader / Writer ？&lt;/li>
&lt;li>内存结构体可以是 Reader 吗？&lt;/li>
&lt;li>文件可以是 Reader / Writer 吗？&lt;/li>
&lt;li>字符串可以是 Reader ？&lt;/li>
&lt;li>IO 能聚合来提高效率吗？&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>都可以&lt;/strong>！Go帮我们做好了一切！&lt;/p>
&lt;p>io库的拓扑&lt;/p>
&lt;p>IO行为都是以io库为中心发散的。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2021/09/24/KY9iy2JV7xo5WpP.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>io 和 字节的故事： bytes 库&lt;/p>
&lt;p>一句话，内存块可以作为读写的数据流。&lt;/p>
&lt;p>bytes.Reader 可以把[]byte转换成Reader&lt;/p>
&lt;p>bytes.Buffer可以把[]byte转换成Reader、Writer&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">buffer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">readerFromBytes&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">bytes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buffer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Discard&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">readerFromBytes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// n == 1024, err == nil
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;n=%v,err=%v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>io和字符串的故事：strings库&lt;/p>
&lt;p>strings.Reader能够把字符串转换成Reader, 这个也特别有意思，直接能把字符串作为读源。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">readerFromBytes&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Discard&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">readerFromBytes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;n=%v,err=%v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>io和网络的故事：net库&lt;/p>
&lt;p>网络可以作为读写源，抽象成Reader、Writer的形式。&lt;/p>
&lt;p>服务端：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">handleConn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">conn&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Conn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">buf&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4096&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pong: &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;:9999&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;err:%v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Accept&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;err:%v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nf">handleConn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>net.Listen 创建一个监听套接字，在Go里面封装成了 net.Listener&lt;strong>类型&lt;/strong>&lt;/li>
&lt;li>Accept 函数返回一个 net.Conn，代表一条网络连接，net.Conn 即是Reader，又是Writer，到了之后各自处理即可&lt;/li>
&lt;/ol>
&lt;p>客户端：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Dial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;:9999&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world\n&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>net.Dail 传入服务器端地址和网络协议类型，即可返回一条和服务端通信的网络连接，返回的结构为 net.Conn&lt;/li>
&lt;li>net.Conn既可作为读端，也可为写端&lt;/li>
&lt;/ol>
&lt;p>以上无论是net.Listener，还是net.Conn 都是基于系统调用 socket 之上的一层封装。底层使用的是类似的系统调用：&lt;/p>
&lt;ul>
&lt;li>syscall.Socket&lt;/li>
&lt;li>syscall.Connect&lt;/li>
&lt;li>syscall.Listen&lt;/li>
&lt;li>syscall.GetsocketInt&lt;/li>
&lt;/ul>
&lt;p>Go 针对网络fd都会做哪些封装呢？&lt;/p>
&lt;ol>
&lt;li>创建还是用 socket 调用创建的 fd，创建出来就会立马设置为 nonblock 模式，Go的网络fd天然要使用IO多路复用的方式来走IO&lt;/li>
&lt;li>把 socket fd 丢到 epoll 池里（通过poll.runtime_pollOpen 把 socket 套接字加到epoll池里，底层调用的还是epollctl），监听事件&lt;/li>
&lt;li>封装好读写事件到来的函数回调&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>io和文件的故事： os库&lt;/p>
&lt;p>文件IO，这个是我们最常见的IO，文件可以作为读端，也可以作为写端。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> // 如下，把 test.data 的数据读出来丢到垃圾桶
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fd, err := os.OpenFile(&amp;#34;test.data&amp;#34;, os.O_RDWR, 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> panic(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> io.Copy(ioutil.Discard, fd)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里返回了一个File类型，不难想象这个是基于文件fd的一层封装。这里面做了什么呢？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>调用系统调用 syscall.Open 拿到文件的fd，顺便设置了垃圾回收时候的析构函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stdin、stdout、stderr&lt;/p>
&lt;p>Go把这三个也都抽象成了读写源，这三个类型的变量其实就是File类型的变量，定义在源码 src/os/file.go中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Stdin&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">NewFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;/dev/stdin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Stdout&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">NewFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;/dev/stdout&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Stderr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">NewFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stderr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;/dev/stderr&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>标准输入就可以和方便的作为读端（ &lt;code>Reader&lt;/code> ），标准输出可以作为写端（ &lt;code>Writer&lt;/code> ）&lt;/p>
&lt;p>eg：&lt;strong>用一行代码实现一个最简单的 echo 回显的程序&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 一行代码实现回显
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>缓存io的故事： bufio库&lt;/p>
&lt;p>&lt;strong>Reader/Writer 可以是缓冲 IO 的数据流&lt;/strong>&lt;/p>
&lt;p>Go缓冲IO是在&lt;strong>底层IO&lt;/strong>之上的一层buffer&lt;/p>
&lt;p>形象描述的话，可以说是&lt;strong>用户内存空间的page cache&lt;/strong>&lt;/p>
&lt;p>在 c 语言，有人肯定用过 &lt;code>fopen&lt;/code> 打开的文件（所谓的标准IO）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nf">fopen&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">mode&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>C 语言的缓冲IO有三种模式：&lt;/p>
&lt;ul>
&lt;li>全缓冲： 只有填满 buffer，才会真正的调用底层IO&lt;/li>
&lt;li>行缓冲：不用等填满buffer，遇到换行符，就会把IO下发下去&lt;/li>
&lt;li>不缓冲： bypass的模式，每次都是直接掉底层IO&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>四种方式，将数据写入文件&lt;/p>
&lt;ul>
&lt;li>
&lt;p>os包 f.Write([]byte)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">f&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">File&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">wireteString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;你好,tcy&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">wireteString&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err3&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;./output.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//创建文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">n2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err3&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//写入文件(字节数组) os方式
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>io包的io.WriteString(f, wireteString)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">wireteString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;你好,tcy&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wireteString&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//写入文件(字符串),io方式,n为几个字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sync&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//Sync递交文件的当前内容进行稳定的存储。一般来说，这表示将文件系统的最近写入的数据在内存中的拷贝刷新到硬盘中稳定保存
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>ioutil包的ioutil.WriteFile&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">st&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">wireteString&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">err2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;./output.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">st&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//写入文件(字节数组),如果文件不存在将按给出的权限创建文件，否则在写入数据之前清空文件。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>bufio包中的bufio.NewWriter(f)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var f *os.File
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">w := bufio.NewWriter(f) //创建新的 Writer 对象,NewReader创建一个具有默认大小缓冲、从r读取的*Reader
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n4, err3 := w.WriteString(&amp;#34;你好,tcy&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fmt.Printf(&amp;#34;写入 %d 个字节n&amp;#34;, n4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">w.Flush() //Flush方法将缓冲中的数据写入下层的io.Writer接口。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f.Close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/35277219">https://zhuanlan.zhihu.com/p/35277219&lt;/a>&lt;/p></description></item><item><title>Jenkins, hot backup</title><link>http://cugbtang.github.io/post/devops/series-jenkins-3/</link><pubDate>Tue, 01 Feb 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-jenkins-3/</guid><description>&lt;h2 id="jenkins-数据热备">jenkins 数据热备&lt;/h2>
&lt;blockquote>
&lt;p>rsync : 增量备份&lt;/p>
&lt;p>inotify： 实时通知&lt;/p>
&lt;/blockquote>
&lt;h2 id="理论">理论&lt;/h2>
&lt;h3 id="一rsync">一、rsync&lt;/h3>
&lt;blockquote>
&lt;p>与传统的 cp、tar 备份方式相比，rsync 具有安全性高、备份迅速、支持&lt;strong>增量备份&lt;/strong>等优点，通过 rsync 可以解决对实时性要求不高的数据备份需求，例如定期的备份文件服务器数据到远端服务器，对本地磁盘定期做数据镜像等，随着应用系统规模的不断扩大，对数据的安全性和可靠性也提出的更好的要求。&lt;/p>
&lt;p>rsync 在高端业务系统中也逐渐暴露出了很多不足：&lt;/p>
&lt;p>​ 首先，rsync 同步数据时，需要扫描所有文件后进行比对，进行差量传输。如果&lt;strong>文件数量&lt;/strong>达到了百万甚至千万量级，扫描所有文件将是非常耗时的。而且正在发生变化的往往是其中很少的一部分，这是非常低效的方式。&lt;/p>
&lt;p>​ 其次，rsync &lt;strong>不能实时&lt;/strong>的去监测、同步数据，虽然它可以通过 linux 守护进程的方式进行触发同步，但是两次触发动作一定会有时间差，这样就导致了服务端和客户端数据可能出现不一致，无法在应用故障时完全的恢复数据。基于以上原因，rsync+inotify 组合出现了！&lt;/p>
&lt;/blockquote>
&lt;h3 id="二rsyncinotify">二、rsync+inotify&lt;/h3>
&lt;blockquote>
&lt;p>Inotify 是一种强大的、细粒度的、异步的文件系统&lt;strong>事件监控&lt;/strong>机制，linux 内核从 2.6.13 起，加入了 Inotify支持，通过 Inotify 可以监控文件系统中添加、删除，修改、移动等各种细微事件，利用这个内核接口，第三方软件就可以监控文件系统下文件的各种变化情况，而 inotify-tools 就是这样的一个第三方软件。 inotify 可以监控文件系统的各种变化，当文件有任何变动时，就触发rsync 同步，这样刚好解决了同步数据的实时性问题。&lt;/p>
&lt;/blockquote>
&lt;h3 id="三rsyncsersync">三、rsync+sersync&lt;/h3>
&lt;blockquote>
&lt;p>1、sersync是基于Inotify开发的，类似于Inotify-tools的工具&lt;/p>
&lt;p>2、sersync可以记录下被监听目录中发生变化的（包括增加、删除、修改）具体某一个文件或某一个目录的名字，然后使用rsync同步的时候，只同步发生变化的这个文件或者这个目录。&lt;/p>
&lt;/blockquote>
&lt;h2 id="四小结">四、小结：&lt;/h2>
&lt;ul>
&lt;li>rsync+inotify-tools与rsync+sersync这两种架构有什么区别？&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>rsync+Inotify-tools&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Inotify-tools只能记录下被监听的目录发生了变化（包括增加、删除、修改），并&lt;strong>没有把具体&lt;/strong>是哪个文件或者哪个目录发生了变化&lt;strong>记录&lt;/strong>下来；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rsync 在同步的时候，并不知道具体是哪个文件或者哪个目录发生了变化，每次都是对整个目录进行同步(应该是扫描)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，当数据量很大时，整个目录同步非常耗时（rsync要对整个目录遍历查找对比文件），因此，效率很低。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>rsync+sersync&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sersync可以&lt;strong>记录&lt;/strong>下被监听目录中发生变化的（包括增加、删除、修改）具体某一个文件或某一个目录的名字；&lt;/p>
&lt;ul>
&lt;li>rsync在同步的时候，只同步发生变化的这个文件或者这个目录（每次发生变化的数据相对整个同步目录数据来说是很小的，rsync在遍历查找比对文件时，速度很快），因此，效率很高。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>​ 当同步的目录数据量不大时，&lt;strong>建议&lt;/strong>使用 rsync+Inotify-tools；当数据量很大（几百G甚至1T以上）、文件很多时，建议使用 rsync+sersync。&lt;/p>
&lt;h2 id="实践">实践&lt;/h2>
&lt;blockquote>
&lt;p>说明：&lt;/p>
&lt;p>操作系统：CentOS 7.x&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>源服务器：36.111.140.109 （Sersync+web）&lt;/p>
&lt;p>目标服务器： 36.111.140.99、(Rsync+web)&lt;/p>
&lt;p>目的：把源服务器上/home/Sync目录实时同步到目标服务器的/home/Sync下&lt;/p>
&lt;/blockquote>
&lt;h3 id="方案一同机热备到不同的文件目录">方案一、同机热备到不同的文件目录&lt;/h3>
&lt;blockquote>
&lt;p>Rsync+Inotify-tools 架构&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/cugbtang/image-repo/master/PicGo/20220318111839.png" alt="image-20220318111831407">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">yum install -y rsync inotify-tools
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim /usr/bin/inotify2rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 运行脚本的用户对相关路径有读写权限就行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">src&lt;/span>&lt;span class="o">=&lt;/span>/jenkins/jenkins_job
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">dst&lt;/span>&lt;span class="o">=&lt;/span>/jenkins1/jenkins_job
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/inotifywait -mrq --timefmt &lt;span class="s1">&amp;#39;%d/%m/%y %H:%M&amp;#39;&lt;/span> --format &lt;span class="s1">&amp;#39;%T %w%f%e&amp;#39;&lt;/span> -e modify,delete,create,attrib &lt;span class="nv">$src&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#/usr/bin/rsync -vzrtopg --delete --progress --password-file=/etc/rsyncd.secrects $src $dst&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rsync -av --exclude lost+found/ --exclude backup/ &lt;span class="nv">$src&lt;/span> &lt;span class="nv">$dst&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">files&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> was rsynced&amp;#34;&lt;/span> &amp;gt;&amp;gt; /var/log/rsync.log &lt;span class="m">2&lt;/span> &amp;gt;&lt;span class="p">&amp;amp;&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方案二不同机器热备-rsyncinotify-tools-架构2">方案二、不同机器热备 rsync+Inotify-tools 架构&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>jenkins 主节点无法高可用（官方说的），针对两套主 jenkins 的&lt;strong>互备方案&lt;/strong>，强调磁盘是为了一定要热备到ssd上，保证性能&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/cugbtang/image-repo/master/PicGo/20220318113041.png" alt="image-20220318113041057">&lt;/p>
&lt;blockquote>
&lt;p>rsync 的解决方案解析：&lt;/p>
&lt;ul>
&lt;li>左边是&lt;strong>原来的&lt;/strong>，一般的rsync的cs架构（client &amp;amp; server）同步模式，数据源服务器上安装rsync server，由server统一控制可以传输的数据的内容，例如权限，目录，文件数等，发起传输的是rsync client，即看起来就是将数据从源服务器拉取到备份服务器。&lt;/li>
&lt;li>右边的是加上inotify-tools的&lt;strong>同步模式&lt;/strong>，在数据源服务器上安装rsync client，在备份源服务器上安装rsync server，也是由server统一控制传输的数据内容，但是这里是数据源服务器作为了client端，因为发起传输的是rsync client，所以这里看起来就是将数据从源服务器推送到备份服务器。&lt;/li>
&lt;li>从逻辑上cs的架构 c 和 s 变成了相反位置，但是传输的模式依然是从 s 传输到 c 。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/cugbtang/image-repo/master/PicGo/20220317144123.jpeg" alt="blog_rsync_(bs)_introduce_20150206.jpg">&lt;/p>
&lt;p>目标服务器（热备服务器 == rsync服务端）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo yum install -y rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置开机启动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;/usr/bin/rsync --daemon --config=/etc/rsyncd.conf&amp;#39;&lt;/span> &amp;gt;&amp;gt; /etc/rc.d/rc.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF | sudo tee /etc/rsyncd.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#同步目录的所属用户，有权限操作的都可以
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">uid = Sync
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#同步目录的所属组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">gid = Sync
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#不打开chroot
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">use chroot = no
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#超时时间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">timeout = 800
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#日志文件位置，启动rsync后自动产生这个文件，无需提前创建
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">log file =/var/log/rsyncd.log
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#pid文件的存放位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">pid file =/var/run/rsyncd.pid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#支持max connections参数的锁文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">lock file =/var/run/rsync.lock
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#rsync启动时欢迎信息页面文件位置（文件内容自定义）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">motd file =/etc/rsyncd.Motd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#默认端口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">port = 873 
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#设置rsync服务端文件为读写权限
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">read only =no 
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#不显示rsync服务端资源列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">list = no
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#最大连接数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">max connections = 200
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#执行数据同步的用户名，可以设置多个，用英文状态下逗号隔开
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">auth users = Sync
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#允许进行数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">hosts allow = 2.2.2.2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#禁止数据同步的客户端IP地址，可以设置多个，用英文状态下逗号隔开
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">hosts deny = *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#用户认证配置文件，里面保存用户名称和密码，后面会创建这个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">secrets file = /etc/rsync.pass
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#定义模块
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">[Sync]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> #rsync服务端数据目录路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> path = /jenkins1/jenkins_job/
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> #模块描述
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> comment = Sync
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#配置文件，添加以下内容，添加允许传输用户和密码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#格式，用户名:密码，可以设置多个，每行一个用户名:密码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF | sudo tee /etc/rsync.pass
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">Sync:THW7DLBQ82tBKfIf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#设置文件所有者读取、写入权限
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">chmod 600 /etc/rsyncd.conf 
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#设置文件所有者读取、写入权限
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#这个密码文件只能是这个权限，服务端会做检测
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">chmod 600 /etc/rsync.pass 
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#启动
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">systemctl enable rsyncd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">systemctl restart rsyncd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"># 服务端的rsync开启873端口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#vi /etc/sysconfig/iptables  #编辑防火墙配置文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">-A RH-Firewall-1-INPUT -m state --state NE&lt;/span>W -m tcp -ptcp --dport &lt;span class="m">873&lt;/span> -j ACCEPT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>源服务器（主服务器 == rsync客户端）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 客户端的Rsync可以不用开启873端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yum install -y rsync inotify-tools
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#设置文件权限，只设置文件所有者具有读取、写入权限即可&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch /jenkins/rsync.passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;THW7DLBQ82tBKfIf&amp;#39;&lt;/span> &amp;gt; /jenkins/rsync.passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">600&lt;/span> /jenkins/rsync.passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 测试&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p /jenkins/ceshi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#在源服务器上创建测试文件夹，然后在源服务器运行下面1行命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># /jenkins/ceshi 最后带不带/有很大区别&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rsync -avH --port&lt;span class="o">=&lt;/span>&lt;span class="m">873&lt;/span> --progress--delete  /jenkins/ceshi Sync@2.2.2.2::Sync --password-file&lt;span class="o">=&lt;/span>/jenkins/rsync.passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;/jenkins/jenkins_job&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">passwordfile&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;/jenkins/rsync.passwd&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;2.2.2.2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">rsync_module&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Sync&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/inotifywait -mrq --timefmt &lt;span class="s1">&amp;#39;%d/%m/%y %H:%M&amp;#39;&lt;/span> --format &lt;span class="s1">&amp;#39;%T %w %f&amp;#39;&lt;/span> -e modify,delete,create,attrib &lt;span class="si">${&lt;/span>&lt;span class="nv">src&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> DATE TIME DIR file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /usr/bin/rsync -vzrtopg --delete --progress &lt;span class="si">${&lt;/span>&lt;span class="nv">src&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">user&lt;/span>&lt;span class="si">}&lt;/span>@&lt;span class="si">${&lt;/span>&lt;span class="nv">host&lt;/span>&lt;span class="si">}&lt;/span>::&lt;span class="si">${&lt;/span>&lt;span class="nv">rsync_module&lt;/span>&lt;span class="si">}&lt;/span> --password-file&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">passwordfile&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">file&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> was rsynced at &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">DATE&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">_&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">TIME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> in &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; /var/log/rsync.log 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方案三不同机器热备-rsyncinotify-tools-架构3">方案三、不同机器热备 rsync+Inotify-tools 架构&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/h3>
&lt;ol>
&lt;li>服务器A（主服务器）&lt;/li>
&lt;li>服务器B（从服务器/备份服务器）&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>服务器B&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#在服务器B上安装rsync&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /app/local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget http://rsync.samba.org/ftp/rsync/src/rsync-3.1.1.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar zxf rsync-3.1.1.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> rsync-3.1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#设置rsync的配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi /etc/rsyncd.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#服务器B上的rsyncd.conf文件内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">uid&lt;/span>&lt;span class="o">=&lt;/span>root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gid&lt;/span>&lt;span class="o">=&lt;/span>root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#最大连接数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">max &lt;span class="nv">connections&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">36000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#默认为true，修改为no，增加对目录文件软连接的备份 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">use &lt;span class="nv">chroot&lt;/span>&lt;span class="o">=&lt;/span>no
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#定义日志存放位置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">log &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>/var/log/rsyncd.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#忽略无关错误&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ignore &lt;span class="nv">errors&lt;/span> &lt;span class="o">=&lt;/span> yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#设置rsync服务端文件为读写权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> &lt;span class="nv">only&lt;/span> &lt;span class="o">=&lt;/span> no
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#认证的用户名与系统帐户无关在认证文件做配置，如果没有这行则表明是匿名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">auth &lt;span class="nv">users&lt;/span> &lt;span class="o">=&lt;/span> rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#密码认证文件，格式(虚拟用户名:密码）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">secrets &lt;span class="nv">file&lt;/span> &lt;span class="o">=&lt;/span> /etc/rsync.pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#这里是认证的模块名，在client端需要指定，可以设置多个模块和路径&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>rsync&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#自定义注释&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">comment&lt;/span> &lt;span class="o">=&lt;/span> rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#同步到B服务器的文件存放的路径&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/app/data/site/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>img&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">comment&lt;/span> &lt;span class="o">=&lt;/span> img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/app/data/site/img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#创建rsync认证文件 可以设置多个，每行一个用户名:密码，注意中间以“:”分割&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;rsync:rsync&amp;#34;&lt;/span> &amp;gt; /etc/rsync.pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#设置文件所有者读取、写入权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">600&lt;/span> /etc/rsyncd.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">600&lt;/span> /etc/rsync.pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#启动服务器B上的rsync服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#rsync --daemon -v&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rsync --daemon
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#监听端口873&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">netstat -an &lt;span class="p">|&lt;/span> grep &lt;span class="m">873&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lsof -i tcp:873
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rsync &lt;span class="m">31445&lt;/span> root 4u IPv4 &lt;span class="m">443872&lt;/span> 0t0 TCP *:rsync &lt;span class="o">(&lt;/span>LISTEN&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rsync &lt;span class="m">31445&lt;/span> root 5u IPv6 &lt;span class="m">443873&lt;/span> 0t0 TCP *:rsync &lt;span class="o">(&lt;/span>LISTEN&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#设置rsync为服务启动项（可选）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;/usr/local/bin/rsync --daemon&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/rc.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#要 Kill rsync 进程，不要用 kill -HUP {PID} 的方式重启进程，以下3种方式任选&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#ps -ef|grep rsync|grep -v grep|awk &amp;#39;{print $2}&amp;#39;|xargs kill -9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#cat /var/run/rsyncd.pid | xargs kill -9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkill rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#再次启动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/rsync --daemon
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>服务器A&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装rsync&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /app/local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget http://rsync.samba.org/ftp/rsync/src/rsync-3.1.1.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar zxf rsync-3.1.1.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> rsync-3.1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装inotify-tools&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /app/local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar zxf inotify-tools-3.14.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> inotify-tools-3.14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure --prefix&lt;span class="o">=&lt;/span>/app/local/inotify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装sersync&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /app/local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget https://sersync.googlecode.com/files/sersync2.5.4_64bit_binary_stable_final.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar zxf sersync2.5.4_64bit_binary_stable_final.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv /app/local/GNU-Linux-x86/ /app/local/sersync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /app/local/sersync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#配置下密码文件，因为这个密码是要访问服务器B需要的密码和上面服务器B的密码必须一致&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;rsync&amp;#34;&lt;/span> &amp;gt; /app/local/sersync/user.pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#修改权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">600&lt;/span> /app/local/sersync/user.pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#修改confxml.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi /app/local/sersync/confxml.xml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;head&lt;/span> &lt;span class="na">version=&lt;/span>&lt;span class="s">&amp;#34;2.5&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;host&lt;/span> &lt;span class="na">hostip=&lt;/span>&lt;span class="s">&amp;#34;localhost&amp;#34;&lt;/span> &lt;span class="na">port=&lt;/span>&lt;span class="s">&amp;#34;8008&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/host&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;debug&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;fileSystem&lt;/span> &lt;span class="na">xfs=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;filter&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;exclude&lt;/span> &lt;span class="na">expression=&lt;/span>&lt;span class="s">&amp;#34;(.*)\.php&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;exclude&lt;/span> &lt;span class="na">expression=&lt;/span>&lt;span class="s">&amp;#34;^data/*&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/filter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;inotify&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;delete&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;createFolder&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;createFile&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;closeWrite&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;moveFrom&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;moveTo&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;attrib&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;modify&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/inotify&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;sersync&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;localpath&lt;/span> &lt;span class="na">watch=&lt;/span>&lt;span class="s">&amp;#34;/home/&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- 这里填写服务器A要同步的文件夹路径--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;remote&lt;/span> &lt;span class="na">ip=&lt;/span>&lt;span class="s">&amp;#34;8.8.8.8&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;rsync&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- 这里填写服务器B的IP地址和模块名--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/localpath&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;rsync&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;commonParams&lt;/span> &lt;span class="na">params=&lt;/span>&lt;span class="s">&amp;#34;-artuz&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;auth&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="na">users=&lt;/span>&lt;span class="s">&amp;#34;rsync&amp;#34;&lt;/span> &lt;span class="na">passwordfile=&lt;/span>&lt;span class="s">&amp;#34;/app/local/sersync/user.pass&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- rsync+密码文件 这里填写服务器B的认证信息--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;userDefinedPort&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="na">port=&lt;/span>&lt;span class="s">&amp;#34;874&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>&lt;span class="c">&amp;lt;!-- port=874 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;timeout&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="na">time=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>&lt;span class="c">&amp;lt;!-- timeout=100 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;ssh&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/rsync&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;failLog&lt;/span> &lt;span class="na">path=&lt;/span>&lt;span class="s">&amp;#34;/tmp/rsync_fail_log.sh&amp;#34;&lt;/span> &lt;span class="na">timeToExecute=&lt;/span>&lt;span class="s">&amp;#34;60&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>&lt;span class="c">&amp;lt;!--default every 60mins execute once--&amp;gt;&amp;lt;!-- 修改失败日志记录（可选）--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;crontab&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="na">schedule=&lt;/span>&lt;span class="s">&amp;#34;600&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>&lt;span class="c">&amp;lt;!--600mins--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;crontabfilter&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/crontabfilter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/crontab&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;plugin&lt;/span> &lt;span class="na">start=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/sersync&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/head&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#运行sersync&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nohup /app/local/sersync/sersync2 -r -d -o /app/local/sersync/confxml.xml &amp;gt;/app/local/sersync/rsync.log 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-d:启用守护进程模式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r:在监控前，将监控目录与远程主机用rsync命令推送一遍
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-n: 指定开启守护线程的数量，默认为10个
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-o:指定配置文件，默认使用confxml.xml文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加一个保障&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># vi  /home/crontab/check_sersync.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#!/bin/sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sersync&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/sersync/sersync2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">confxml&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/sersync/confxml.xml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">status&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>ps aux &lt;span class="p">|&lt;/span>grep &lt;span class="s1">&amp;#39;sersync2&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>grep -v &lt;span class="s1">&amp;#39;grep&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>wc -l&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">$status&lt;/span> -eq &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$sersync&lt;/span> -d-r -o &lt;span class="nv">$confxml&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span> 0&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="排错4">排错&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/h3>
&lt;h2 id="文献">文献&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://blog.51cto.com/canonind/1843994">CentOS7下Rsync+sersync实现数据实时同步&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://segmentfault.com/a/1190000002558330">关于rsync+inotify-tools实时同步模式&lt;/a>](&lt;a href="https://segmentfault.com/a/1190000002558330">https://segmentfault.com/a/1190000002558330&lt;/a>)&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://hub.fastgit.xyz/wsgzao/sersync">sersync&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="https://blog.51cto.com/wjw7702/1148808">Rsync常见错误及命令详细参数&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Jenkins, Q&amp;A</title><link>http://cugbtang.github.io/post/devops/series-jenkins-2/</link><pubDate>Sat, 15 Jan 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-jenkins-2/</guid><description>&lt;h2 id="1镜像选择--jenkinsciblueocean----why">1、镜像选择 &lt;code>jenkinsci/blueocean&lt;/code> , why?&lt;/h2>
&lt;ul>
&lt;li>安装blue ocean插件前&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.loli.net/2021/10/27/r1wjF2aUuZ7vm9M.png" alt="">&lt;/p>
&lt;ul>
&lt;li>安装blue ocean插件后&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.loli.net/2021/10/27/3aJV4YNPRjdCtI1.png" alt="">&lt;/p>
&lt;h2 id="2启动参数都表示什么">2、启动参数都表示什么？&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker run &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --rm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -u root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 8080:8080 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v jenkins-data:/var/jenkins_home &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v /var/run/docker.sock:/var/run/docker.sock &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$HOME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>:/home &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> jenkinsci/blueocean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-p 8080:8080 &lt;/code> 映射（例如“发布”）jenkinsci/blueocean 容器的端口8080到主机上的端口8080。 第一个数字代表主机上的端口，而最后一个代表容器的端口。因此，如果您为此选项指定 -p 49000:8080 ，您将通过端口49000访问主机上的Jenkins。&lt;/li>
&lt;li>&lt;code>-p 50000:50000&lt;/code>（可选）将 jenkinsci/blueocean 容器的端口50000 映射到主机上的端口50000。 如果您在其他机器上设置了一个或多个基于JNLP的Jenkins代理程序，而这些代理程序又与 jenkinsci/blueocean 容器交互（充当“主”Jenkins服务器，或者简称为“Jenkins主”）， 则这是必需的。默认情况下，基于JNLP的Jenkins代理通过TCP端口50000与Jenkins主站进行通信。 您可以通过“ 配置全局安全性” 页面更改Jenkins主服务器上的端口号。如果您要将您的Jenkins主机的JNLP代理端口的TCP端口 值更改为51000（例如），那么您需要重新运行Jenkins（通过此 docker run … 命令）并指定此“发布”选项 -p 52000:51000，其中后一个值与Jenkins master上的这个更改值相匹配，第一个值是Jenkins主机的主机上的端口号， 通过它，基于JNLP的Jenkins代理与Jenkins主机进行通信 - 例如52000。&lt;/li>
&lt;li>&lt;code>-v jenkins-data:/var/jenkins_home&lt;/code>（可选，但强烈建议）映射在容器中的/var/jenkins_home 目录到具有名字 jenkins-data 的volume。 如果这个卷不存在，那么这个 docker run 命令会自动为你创建卷。 如果您希望每次重新启动Jenkins（通过此 docker run … 命令）时保持Jenkins状态，则此选项是必需的 。 如果你没有指定这个选项，那么在每次重新启动后，Jenkins将有效地重置为新的实例。
注意: 所述的 jenkins-data 卷也可以 docker volume create命令创建： docker volume create jenkins-data 代替映射 /var/jenkins_home 目录转换为Docker卷，还 可以将此目录映射到计算机本地文件系统上的目录。 例如，指定该选项 -v $HOME/jenkins:/var/jenkins_home 会将容器的 /var/jenkins_home 目录映射到 本地计算机上目录中的 jenkins 子目录， 该$HOME目录通常是 /Users/&lt;!-- raw HTML omitted -->/jenkins 或/home/&lt;!-- raw HTML omitted -->/jenkins 。&lt;/li>
&lt;li>&lt;code>-v /var/run/docker.sock:/var/run/docker.sock&lt;/code>（可选 /var/run/docker.sock 表示Docker守护程序通过其监听的基于Unix的套接字。 该映射允许 jenkinsci/blueocean 容器与Docker守护进程通信，如果jenkinsci/blueocean容器需要实例化其他Docker容器，则该守护进程是必需的。 如果运行声明式管道，其语法包含agent部分用 docker 例如， agent { docker { &amp;hellip; } } 此选项是必需的。&lt;/li>
&lt;/ul></description></item><item><title>Jenkins, how to play?</title><link>http://cugbtang.github.io/post/devops/series-jenkins-1/</link><pubDate>Sat, 01 Jan 2022 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/devops/series-jenkins-1/</guid><description>&lt;h1 id="how-to-play-jenkins">how to play jenkins?&lt;/h1>
&lt;blockquote>
&lt;p>社区源码、文档&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>等托管在 GitHub 上。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>其中基础设施部分在 &lt;a href="https://github.com/jenkins-infra">&lt;code>jenkins-infra&lt;/code>&lt;/a>；&lt;/p>
&lt;p>核心库以及插件在 &lt;a href="https://github.com/jenkinsci/">&lt;code>jenkinsci&lt;/code>&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>；&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Jenkins 中文本地化相关的项目在 &lt;a href="https://github.com/jenkins-zh">&lt;code>jenkins-zh&lt;/code>&lt;/a>&lt;/p>
&lt;p>集中玩耍地地方&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;h2 id="搜集玩法">搜集玩法&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>1、官方建议容器化部署（docker/kubernetes）&lt;/p>
&lt;blockquote>
&lt;p>建议使用的Docker映像是&lt;a href="https://hub.docker.com/r/jenkinsci/blueocean/">&lt;code>jenkinsci/blueocean&lt;/code> image&lt;/a>(来自 the &lt;a href="https://hub.docker.com/">Docker Hub repository&lt;/a>)。 该镜像包含当前的&lt;a href="https://www.jenkins.io/download">长期支持 (LTS) 的Jenkins版本&lt;/a> （可以投入使用） ，捆绑了所有Blue Ocean插件和功能。这意味着你不需要单独安装Blue Ocean插件。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -u root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --rm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -d &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 8080:8080 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 50000:50000 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v jenkins-data:/var/jenkins_home &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v /var/run/docker.sock:/var/run/docker.sock &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> jenkinsci/blueocean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>能玩一段时间了。。。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2、前面都是铺垫，玩了一段时间，发现原生镜像中缺这少那的，尤其是插件，看看&lt;strong>官方&lt;/strong>怎么说：&lt;/p>
&lt;blockquote>
&lt;p>Keep in mind that the process described above will automatically download the official Jenkins Docker image if this hasn’t been done before.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>Create Dockerfile with the following content:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">FROM jenkinsci/blueocean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y lsb-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://download.docker.com/linux/debian/gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deb [arch=&lt;/span>&lt;span class="k">$(&lt;/span>dpkg --print-architecture&lt;span class="k">)&lt;/span>&lt;span class="s2"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> https://download.docker.com/linux/debian \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="k">$(&lt;/span>lsb_release -cs&lt;span class="k">)&lt;/span>&lt;span class="s2"> stable&amp;#34;&lt;/span> &amp;gt; /etc/apt/sources.list.d/docker.list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y docker-ce-cli
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER jenkins
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN jenkins-plugin-cli --plugins &lt;span class="s2">&amp;#34;blueocean:1.25.3 docker-workflow:1.28&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Build a new docker image from this Dockerfile and assign the image a meaningful name, e.g. &amp;ldquo;myjenkins-blueocean:2.319.3-1&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker build -t myjenkins-blueocean:2.319.3-1 .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>3、同时，也可以站在巨人的肩膀上，有一些实践者把&lt;strong>常用的插件&lt;/strong>已经内置到镜像发布了，比如 &lt;code>kubespheredev/ks-jenkins&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>4、程序员用界面？命令行起飞&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.jenkins.io/zh/blog/2019/08/30/jenkins-cli/">利用 jcli 管理 Jenkins&lt;/a>&lt;/p>
&lt;p>vs&lt;/p>
&lt;p>&lt;a href="https://www.jenkins.io/doc/book/managing/cli/">原生Jenkins CLI &lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 例如，本地敏捷调试&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget -q https://ghproxy.com/https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz&lt;span class="p">|&lt;/span>tar -zxvf &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mv jcli /usr/local/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jcli config gen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 都走默认就🆗&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jcli center start -m docker --image kubespheredev/ks-jenkins --version 2.249.1 --c-user root --port &lt;span class="m">8080&lt;/span> --setup-wizard&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>5、国内插件源&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>https://updates.jenkins-zh.cn/update-center.json&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>6、划重点，就是 &lt;strong>pipeline&lt;/strong>（前面的插件已经铺垫过）。what？？？&lt;/p>
&lt;blockquote>
&lt;h4 id="pipeline--持续交付即代码">pipeline ==~ “持续交付即代码”&lt;/h4>
&lt;p>Jenkins Pipeline 的定义通常被写入到一个文本文件（称为 &lt;code>Jenkinsfile&lt;/code> ）中，该文件可以被放入项目的源代码控制库中。&lt;/p>
&lt;p>official recommended how to play: &lt;strong>all in Jenkinsfile!!!&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started">get started with Pipeline&lt;/a> - covers how to &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#defining-a-pipeline">define a Jenkins Pipeline&lt;/a> (i.e. your &lt;code>Pipeline&lt;/code>) through &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#through-blue-ocean">Blue Ocean&lt;/a>, through the &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#through-the-classic-ui">classic UI&lt;/a> or in &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#defining-a-pipeline-in-scm">SCM&lt;/a>,&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/jenkinsfile">create and use a &lt;code>Jenkinsfile&lt;/code>&lt;/a> - covers use-case scenarios on how to craft and construct your &lt;code>Jenkinsfile&lt;/code>,&lt;/li>
&lt;li>work with &lt;a href="https://www.jenkins.io/doc/book/pipeline/multibranch">branches and pull requests&lt;/a>,&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/docker">use Docker with Pipeline&lt;/a> - covers how Jenkins can invoke Docker containers on agents/nodes (from a &lt;code>Jenkinsfile&lt;/code>) to build your Pipeline projects,&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/shared-libraries">extend Pipeline with shared libraries&lt;/a>,&lt;/li>
&lt;li>use different &lt;a href="https://www.jenkins.io/doc/book/pipeline/development">development tools&lt;/a> to facilitate the creation of your Pipeline, and&lt;/li>
&lt;li>work with &lt;a href="https://www.jenkins.io/doc/book/pipeline/syntax">Pipeline syntax&lt;/a> - this page is a comprehensive reference of all Declarative Pipeline syntax.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>（片段生成器+声明式+。。。反正就是生成）https://jenkins地址/job/test/pipeline-syntax/&lt;/p>
&lt;p>+&lt;/p>
&lt;p>&lt;a href="https://www.jenkins.io/doc/book/pipeline/">【官方词典】&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/cugbtang/image-repo/master/PicGo/20220302150355.png" alt="image-20220302150354810">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>7、&lt;strong>官方&lt;/strong>把架子打好了，让我们发挥是吧，那有木有前辈累计的模板，或者我有新颖的使用方式方法想分享给大家呢：&lt;/p>
&lt;blockquote>
&lt;p>enjoy your play:&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/jenkinsci/pipeline-examples">【官方例子】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/devops-ws">【DevOps Workspace】&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8、又玩了一段时间，发现jenkins最好是作为自动化的引擎，通过接口集成到 PASS 上。&lt;/p>
&lt;blockquote>
&lt;p>Use Pipeline through API&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/go-atomci/workflow">one example&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="都在玩儿plugin">都在玩儿plugin&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>插件下载问题，更改了国内镜像源，还总是下载失败？&lt;/p>
&lt;blockquote>
&lt;p>1、设置代理&lt;/p>
&lt;p>2、手动修改 jenkins/updates/default.json 中url &amp;mdash;&amp;gt; &lt;a href="https://mirrors.tuna.tsinghua.edu.cn">https://mirrors.tuna.tsinghua.edu.cn&lt;/a>&lt;/p>
&lt;p>3、&lt;a href="https://github.com/jenkins-zh/jenkins-formulas">Jenkins Customize&lt;/a> 更新&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Jenkins Configuration as Code&lt;/p>
&lt;blockquote>
&lt;p>虽然新部署的 Jenkins 实例自动为我们安装了所有所需的插件，并配置好了初始化 Job 等工作，但在开始使用它之前，我们仍需要完成一系列手动工作，如配置 Jenkins 的 “Configure System” 页面&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果你是一名 Jenkins 管理员，那么你一定不会对这个页面感到陌生，每次部署完一个新的 Jenkins 实例，在可以使用之前，我们往往都需要在该页面作出一些相应的配置。该页面除了包含 Jenkins 自身的一些基本配置信息外，同时还包括了当前系统中所安装的插件的配置信息。也就是说，当你的 Jenkins 安装的插件越多，该页面的配置项就有可能会越多。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="l">云时代 这个插件用处就少些了，所有的配置都放在打包在镜像中了&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin">generic-webhook-trigger-plugin&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>it can trigger on ant webhook&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="最佳实践">最佳实践&lt;/h2>
&lt;h3 id="1multi-branch--library">1、multi-branch + library&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="">jenkins library + &lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="2webhooklibrary">2、webhook+library&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cugbtang/jenkinslibrary-zeyangli">generic-webhook对接各种webhook封装到library中，打通端到端自动化&lt;/a>&lt;/li>
&lt;li>往后就是不断积累library的日子了。。。&lt;/li>
&lt;/ul>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jenkins-zh/jenkins-zh/wiki">【introduction not offical】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/">【jenkins offical】&lt;/a> ===&amp;gt; &lt;a href="https://github.com/jenkinsci/">【github】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jenkins-zh/jenkins-zh/issues">【国人都在玩】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jenkinsci/helm-charts">【Jenkins Community Kubernetes Helm Charts】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos">【plugin: Jenkins Configuration as Code】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/cugbtang/jenkinslibrary-zeyangli">【jenkinslibrary-zeyangli】&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://github.com/jenkins-zh/jenkins-zh/wiki">https://github.com/jenkins-zh/jenkins-zh/wiki&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://github.com/jenkinsci/">https://github.com/jenkinsci/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://github.com/jenkins-zh/jenkins-zh/issues">https://github.com/jenkins-zh/jenkins-zh/issues&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title/><link>http://cugbtang.github.io/post/engineer/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/engineer/api/</guid><description>&lt;h1 id="api工程化基于proto的idl管理和文档生成">API工程化：基于Proto的IDL管理和文档生成&lt;/h1>
&lt;p>在现代软件开发中，API工程化变得愈发重要。使用Proto作为接口定义语言（IDL），可以帮助团队更好地管理API和生成相关文档。本文将介绍一种基于Proto的IDL管理方式以及如何生成API文档。&lt;/p>
&lt;h2 id="proto的管理方式">Proto的管理方式&lt;/h2>
&lt;p>在管理Proto文件时，可以采用多种方式，包括代码仓库、独立仓库、集中仓库和镜像仓库。其中，集中仓库的方式被提倡，有以下优点：&lt;/p>
&lt;ul>
&lt;li>方便跨部门协作：将所有Proto文件放在同一个仓库中，可以方便不同团队之间的协作。&lt;/li>
&lt;li>版本管理：使用git对Proto文件进行版本控制，确保修改和变更可追溯。&lt;/li>
&lt;li>规范化检查：使用API lint工具对Proto文件进行规范化检查，确保符合规范和最佳实践。&lt;/li>
&lt;li>API设计评审：通过提交变更的diff，进行API设计评审，提高代码质量和设计性能。&lt;/li>
&lt;li>权限管理：通过设定目录的OWNERS文件，对不同团队或个人设置读写权限，保护API的安全性。&lt;/li>
&lt;/ul>
&lt;p>另外，可以使用Proto的git submodule方式，将Proto文件作为仓库的子模块进行管理。这种方式可以实现以下功能：&lt;/p>
&lt;ul>
&lt;li>将Proto文件作为代码仓库的一部分，保持其作为源数据的唯一性。&lt;/li>
&lt;li>使用本地构建工具protoc依赖go module下的相对路径，方便在不同项目中引用Proto文件。&lt;/li>
&lt;li>基于分支创建新的Proto文件，通过切换子模块分支生成相关代码，确保各个版本之间的兼容性。&lt;/li>
&lt;li>维护Makefile来处理Proto文件的编译和构建工作，统一化处理流程。&lt;/li>
&lt;li>使用声明式依赖方式，在yaml文件中指定protoc版本和Proto文件的依赖关系。&lt;/li>
&lt;/ul>
&lt;h2 id="idl项目结构">IDL项目结构&lt;/h2>
&lt;p>良好的IDL项目结构能够提高团队协作和代码维护的效率。建议将目录结构和package对齐，以便更好地组织和管理Proto文件以及生成的代码。&lt;/p>
&lt;p>典型的IDL项目结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">├── api/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── user/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── user.proto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── order/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── order.proto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── common/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── common.proto
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── pkg/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── user/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── user.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── order/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── order.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── common/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── common.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个结构中，&lt;code>api/&lt;/code>目录存放所有的Proto文件，按照业务功能划分为子目录。&lt;code>pkg/&lt;/code>目录存放生成的代码，与&lt;code>api/&lt;/code>目录一一对应。通过这种结构，可以清晰地区分Proto文件和生成的代码，便于团队进行开发和维护。&lt;/p>
&lt;h2 id="idl错误处理">IDL错误处理&lt;/h2>
&lt;p>在编写API时，处理错误是非常重要的一部分。为了使不同的API、协议和错误上下文之间保持一致的体验，建议使用简单的协议无关错误模型。具体做法包括：&lt;/p>
&lt;ul>
&lt;li>使用一小组标准错误，覆盖大量资源。&lt;/li>
&lt;li>合理传播错误：如果你的API服务依赖其他服务，不应该盲目地将这些服务的错误传播给客户端。推荐的做法包括：
&lt;ul>
&lt;li>隐藏实现详细信息和机密信息，避免暴露敏感数据。&lt;/li>
&lt;li>根据错误责任方调整错误处理，对于感兴趣的翻译错误提供有意义的信息，对于不感兴趣的错误提供通用的&amp;quot;Unknown&amp;quot;错误提示。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>通过以上方式，可以统一错误处理的规范，并提供更好的错误信息给客户端，提高用户体验和调试效率。&lt;/p>
&lt;h2 id="idl文档生成">IDL文档生成&lt;/h2>
&lt;p>为了方便使用和理解API，生成API文档是必不可少的。可以使用基于OpenAPI插件和Proto注释的方式生成文档，具体步骤如下：&lt;/p>
&lt;ul>
&lt;li>在Proto文件中添加注释，描述每个接口的用途、参数和返回值等信息。&lt;/li>
&lt;li>使用OpenAPI插件，解析Proto文件和注释，生成OpenAPI规范的yaml文件。&lt;/li>
&lt;li>在项目的Makefile中添加生成API文档的脚本，执行&lt;code>make api&lt;/code>命令即可生成对应的OpenAPI文档。&lt;/li>
&lt;li>可以通过GitLab或VS Code插件直接查看和编辑生成的OpenAPI文档，方便团队进行微服务治理、调试和测试等工作。&lt;/li>
&lt;/ul>
&lt;p>通过以上方式，团队可以轻松生成和维护API文档，提高开发效率和团队协作能力。&lt;/p>
&lt;p>本文介绍了基于Proto的IDL管理和文档生成的方法，包括Proto的管理方式、IDL项目结构、错误处理和文档生成等内容。通过合理规划和使用这些方法，可以提高API工程化水平，推动团队的协作和开发效率。&lt;/p>
&lt;p>总结：&lt;/p>
&lt;p>在API工程化中，Proto的管理方式、IDL项目结构、错误处理和文档生成是非常重要的一部分。通过集中管理Proto文件、规范项目结构、统一错误处理和生成易于理解的API文档，可以提高团队的开发效率和 API的质量。同时，不断优化和改进这些方法，可以实现持续集成和交付，适应快速迭代的开发环境。希望本文对您有所启发，让您的API工程化之路更加顺利！&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV17m4y1f7qc/?spm_id_from=333.880.my_history.page.click&amp;amp;vd_source=9573f6b9b39a65fed99157eefcfdfb74">API工程化分享 - 毛剑&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/go-kratos/kratos">https://github.com/go-kratos/kratos&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto#L112">https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto#L112&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pkg/errors">https://github.com/pkg/errors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/cBXZjg_R8MLFDJyFtpjVVQ">https://mp.weixin.qq.com/s/cBXZjg_R8MLFDJyFtpjVVQ&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>http://cugbtang.github.io/post/engineer/engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/engineer/engineering/</guid><description>&lt;h2 id="mvc-vs-ddd">MVC vs DDD&lt;/h2>
&lt;ul>
&lt;li>MVC&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在MVC架构中，控制器负责决定流量的传递路径，从用户请求开始，通过控制器、模型和视图之间的协作，最终将结果返回给用户。控制器作为中心协调器，负责控制整个流程的顺序和逻辑。&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>1、控制器（Controller）接收到前端发送的HTTP请求。控制器主要负责解析请求参数、验证输入，并将请求转发给相应的服务。
2、模型（Model）是应用程序中的核心部分，它包含业务逻辑和数据。控制器将请求传递给模型，并调用相应的方法来执行业务逻辑。模型可以从数据访问层获取数据，对数据进行验证和处理，并返回结果给控制器。
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>DDD&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>DDD强调以业务为核心，通过将业务逻辑封装在领域模型中，并在不同层之间使用明确的边界和接口进行交互，以实现更好的可维护性和可扩展性&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>1、应用服务层（Application Service）：应用服务层类似于服务层[多个DO]，在这里处理外部请求并协调领域对象的操作。它负责将请求转发给相应的应用领域服务，并处理领域对象之间的协作和交互。
2、领域层（Domain Layer）：领域层是业务逻辑的核心，类似于业务逻辑层[一个DO,多个data接口]。它包含领域模型（Domain Model）和领域服务（Domain Service）。领域模型是用于解决特定领域问题的对象模型，其中包括实体（Entity）、值对象（Value Object）、聚合根（Aggregate Root）等概念。领域服务是没有状态的操作，用于完成跨实体或聚合根的操作。
3、基础设施层（Infrastructure Layer）：基础设施层类似于数据访问层（data）[现实一个data接口]，它负责与外部系统进行交互，包括数据库、缓存、消息队列等。基础设施层提供对这些外部系统的访问封装，并为领域层提供必要的技术支持。
4、应用领域服务（Application Domain Service）：应用领域服务是应用服务层和领域层之间的接口，负责协调应用服务和领域模型之间的交互。它将请求从应用服务层传递给领域模型，并根据需要执行一些额外的业务操作。
&lt;/code>&lt;/pre>
&lt;p>请求处理流程： 请求从应用服务层进入，经过应用领域服务的处理后传递给领域层，领域层根据领域模型和领域服务进行业务逻辑的处理，可能涉及到领域对象之间的交互和数据的访问。最终，结果通过应用领域服务返回给应用服务层，然后返回给客户端。&lt;/p></description></item><item><title/><link>http://cugbtang.github.io/post/go/compile/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/go/compile/readme/</guid><description>&lt;h2 id="introduction-to-the-go-compiler">Introduction to the Go compiler&lt;/h2>
&lt;p>&lt;code>cmd/compile&lt;/code> contains the main packages that form the Go compiler. The compiler
may be logically split in four phases, which we will briefly describe alongside
the list of packages that contain their code.&lt;/p>
&lt;p>You may sometimes hear the terms &amp;ldquo;front-end&amp;rdquo; and &amp;ldquo;back-end&amp;rdquo; when referring to
the compiler. Roughly speaking, these translate to the first two and last two
phases we are going to list here. A third term, &amp;ldquo;middle-end&amp;rdquo;, often refers to
much of the work that happens in the second phase.&lt;/p>
&lt;p>Note that the &lt;code>go/*&lt;/code> family of packages, such as &lt;code>go/parser&lt;/code> and
&lt;code>go/types&lt;/code>, are mostly unused by the compiler. Since the compiler was
initially written in C, the &lt;code>go/*&lt;/code> packages were developed to enable
writing tools working with Go code, such as &lt;code>gofmt&lt;/code> and &lt;code>vet&lt;/code>.
However, over time the compiler&amp;rsquo;s internal APIs have slowly evolved to
be more familiar to users of the &lt;code>go/*&lt;/code> packages.&lt;/p>
&lt;p>It should be clarified that the name &amp;ldquo;gc&amp;rdquo; stands for &amp;ldquo;Go compiler&amp;rdquo;, and has
little to do with uppercase &amp;ldquo;GC&amp;rdquo;, which stands for garbage collection.&lt;/p>
&lt;ul>
&lt;li>经典的编译原理flow
&lt;img src="%E7%BB%8F%E5%85%B8%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86flow.png" alt="Alt text">&lt;/li>
&lt;li>the go compile flow
&lt;img src="the-go-compile-flow.png" alt="Alt text">&lt;/li>
&lt;/ul>
&lt;h3 id="1-parsing">1. Parsing&lt;/h3>
&lt;ul>
&lt;li>&lt;code>cmd/compile/internal/syntax&lt;/code> (lexer, parser, syntax tree)&lt;/li>
&lt;/ul>
&lt;p>In the first phase of compilation, source code is tokenized (lexical analysis, 操作符会被转换为_IncOp),
parsed (syntax analysis,采用了标准的自上而下的递归下降（Top-Down Recursive-Descent）算法), and a syntax tree is constructed for each source
file.&lt;/p>
&lt;p>Each syntax tree is an exact representation of the respective source file, with
nodes corresponding to the various elements of the source such as expressions,
declarations, and statements. The syntax tree also includes position information
which is used for error reporting and the creation of debugging information.&lt;/p>
&lt;h3 id="2-type-checking">2. Type checking&lt;/h3>
&lt;ul>
&lt;li>&lt;code>cmd/compile/internal/types2&lt;/code> (type checking)&lt;/li>
&lt;/ul>
&lt;p>The types2 package is a port of &lt;code>go/types&lt;/code> to use the syntax package&amp;rsquo;s
AST instead of &lt;code>go/ast&lt;/code>.&lt;/p>
&lt;h3 id="3-ir-construction-noding">3. IR construction (&amp;ldquo;noding&amp;rdquo;)&lt;/h3>
&lt;ul>
&lt;li>&lt;code>cmd/compile/internal/types&lt;/code> (compiler types)&lt;/li>
&lt;li>&lt;code>cmd/compile/internal/ir&lt;/code> (compiler AST)&lt;/li>
&lt;li>&lt;code>cmd/compile/internal/typecheck&lt;/code> (AST transformations)&lt;/li>
&lt;li>&lt;code>cmd/compile/internal/noder&lt;/code> (create compiler AST)&lt;/li>
&lt;/ul>
&lt;p>The compiler middle end uses its own AST definition and representation of Go
types carried over from when it was written in C. All of its code is written in
terms of these, so the next step after type checking is to convert the syntax
and types2 representations to ir and types. This process is referred to as
&amp;ldquo;noding.&amp;rdquo;&lt;/p>
&lt;p>There are currently two noding implementations:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>irgen (aka &amp;ldquo;-G=3&amp;rdquo; or sometimes &amp;ldquo;noder2&amp;rdquo;) is the implementation used starting
with Go 1.18, and&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unified IR is another, in-development implementation (enabled with
&lt;code>GOEXPERIMENT=unified&lt;/code>), which also implements import/export and inlining.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Up through Go 1.18, there was a third noding implementation (just
&amp;ldquo;noder&amp;rdquo; or &amp;ldquo;-G=0&amp;rdquo;), which directly converted the pre-type-checked
syntax representation into IR and then invoked package typecheck&amp;rsquo;s
type checker. This implementation was removed after Go 1.18, so now
package typecheck is only used for IR transformations.&lt;/p>
&lt;h3 id="4-middle-end">4. Middle end&lt;/h3>
&lt;ul>
&lt;li>&lt;code>cmd/compile/internal/deadcode&lt;/code> (dead code elimination)&lt;/li>
&lt;li>&lt;code>cmd/compile/internal/inline&lt;/code> (function call inlining)&lt;/li>
&lt;li>&lt;code>cmd/compile/internal/devirtualize&lt;/code> (devirtualization of known interface method calls)&lt;/li>
&lt;li>&lt;code>cmd/compile/internal/escape&lt;/code> (escape analysis)&lt;/li>
&lt;/ul>
&lt;p>Several optimization passes are performed on the IR representation:
dead code elimination, (early) devirtualization, function call
inlining, and escape analysis.&lt;/p>
&lt;h3 id="5-walk">5. Walk&lt;/h3>
&lt;ul>
&lt;li>&lt;code>cmd/compile/internal/walk&lt;/code> (order of evaluation, desugaring)&lt;/li>
&lt;/ul>
&lt;p>The final pass over the IR representation is &amp;ldquo;walk,&amp;rdquo; which serves two purposes:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>It decomposes complex statements into individual, simpler statements,
introducing temporary variables and respecting order of evaluation. This step
is also referred to as &amp;ldquo;order.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It desugars higher-level Go constructs into more primitive ones. For example,
&lt;code>switch&lt;/code> statements are turned into binary search or jump tables, and
operations on maps and channels are replaced with runtime calls.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="6-generic-ssa">6. Generic SSA&lt;/h3>
&lt;ul>
&lt;li>&lt;code>cmd/compile/internal/ssa&lt;/code> (SSA passes and rules)&lt;/li>
&lt;li>&lt;code>cmd/compile/internal/ssagen&lt;/code> (converting IR to SSA)&lt;/li>
&lt;/ul>
&lt;p>In this phase, IR is converted into Static Single Assignment (SSA) form, a
lower-level intermediate representation with specific properties that make it
easier to implement optimizations and to eventually generate machine code from
it.&lt;/p>
&lt;p>During this conversion, function intrinsics are applied. These are special
functions that the compiler has been taught to replace with heavily optimized
code on a case-by-case basis.&lt;/p>
&lt;p>Certain nodes are also lowered into simpler components during the AST to SSA
conversion, so that the rest of the compiler can work with them. For instance,
the copy builtin is replaced by memory moves, and range loops are rewritten into
for loops. Some of these currently happen before the conversion to SSA due to
historical reasons, but the long-term plan is to move all of them here.&lt;/p>
&lt;p>Then, a series of machine-independent passes and rules are applied. These do not
concern any single computer architecture, and thus run on all &lt;code>GOARCH&lt;/code> variants.
These passes include dead code elimination, removal of
unneeded nil checks, and removal of unused branches. The generic rewrite rules
mainly concern expressions, such as replacing some expressions with constant
values, and optimizing multiplications and float operations.&lt;/p>
&lt;h3 id="7-generating-machine-code">7. Generating machine code&lt;/h3>
&lt;ul>
&lt;li>&lt;code>cmd/compile/internal/ssa&lt;/code> (SSA lowering and arch-specific passes)&lt;/li>
&lt;li>&lt;code>cmd/internal/obj&lt;/code> (machine code generation)&lt;/li>
&lt;/ul>
&lt;p>The machine-dependent phase of the compiler begins with the &amp;ldquo;lower&amp;rdquo; pass, which
rewrites generic values into their machine-specific variants. For example, on
amd64 memory operands are possible, so many load-store operations may be combined.&lt;/p>
&lt;p>Note that the lower pass runs all machine-specific rewrite rules, and thus it
currently applies lots of optimizations too.&lt;/p>
&lt;p>Once the SSA has been &amp;ldquo;lowered&amp;rdquo; and is more specific to the target architecture,
the final code optimization passes are run. This includes yet another dead code
elimination pass, moving values closer to their uses, the removal of local
variables that are never read from, and register allocation.&lt;/p>
&lt;p>Other important pieces of work done as part of this step include stack frame
layout, which assigns stack offsets to local variables, and pointer liveness
analysis, which computes which on-stack pointers are live at each GC safe point.&lt;/p>
&lt;p>At the end of the SSA generation phase, Go functions have been transformed into
a series of obj.Prog instructions. These are passed to the assembler
(&lt;code>cmd/internal/obj&lt;/code>), which turns them into machine code and writes out the
final object file. The object file will also contain reflect data, export data,
and debugging information.&lt;/p>
&lt;h3 id="further-reading">Further reading&lt;/h3>
&lt;p>To dig deeper into how the SSA package works, including its passes and rules,
head to &lt;a href="internal/ssa/README.md">cmd/compile/internal/ssa/README.md&lt;/a>.&lt;/p></description></item><item><title/><link>http://cugbtang.github.io/post/go/compile/series-parse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://cugbtang.github.io/post/go/compile/series-parse/</guid><description>&lt;h1 id="parse">parse&lt;/h1>
&lt;p>cmd/compile/internal/syntax (lexer, parser, syntax tree)&lt;/p>
&lt;h2 id="一lexerparse">一、lexer、parse&lt;/h2>
&lt;ul>
&lt;li>token化&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">token&lt;/span> &lt;span class="kt">uint&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//go:generate stringer -type token -linecomment tokens.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span> &lt;span class="nx">token&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">iota&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中有一句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Make sure we have at most 64 tokens so we can use them in a set.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">const&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="kt">uint64&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">tokenCount&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该段代码的目的是确保我们最多只使用 64 个令牌（tokens），以便将它们作为位集合（bit set）使用。&lt;/p>
&lt;p>常量 _ 被赋值为 1 &amp;laquo; (tokenCount - 1)。这里 tokenCount 可能表示用于语法分析或其他操作的令牌数量。通过将 1 左移 tokenCount - 1 位，可以得到一个只有第 tokenCount - 1 位被设置为 1 的数值。&lt;/p>
&lt;p>这个常量的作用是创建一个具有 64 位的位集合，其中只有第 tokenCount - 1 位被设置为 1，而其他位都为 0。这样的位集合可以用来进行位运算和标记操作，例如使用按位与（bitwise AND）将特定位设置为 1，或者使用按位或（bitwise OR）从标志位中提取信息。&lt;/p>
&lt;p>通过控制令牌数目在 64 以内，并将其表示为位集合，在编写解析器或进行其他类型的符号处理时，可以更高效地使用位运算和存储空间。在这种情况下，使用 64 个位作为位集合的大小通常是一种经验性的限制，可以满足大多数常见的情况。&lt;/p>
&lt;ul>
&lt;li>自上而下的递归下降（Top-Down Recursive-Descent）算法&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>自上而下的递归下降算法是根据语法规则从上到下递归地构建语法树或执行语义动作的解析方法。它之所以称为“自上而下”，是因为从整个输入开始的最高级别的非终结符出发，逐步地向下展开和解析，直到达到终结符。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这种算法的核心思想是先构建高层次的语法结构，然后根据具体的语法规则和当前的输入，递归地调用下一层次的解析函数。因此，解析过程自于起始符号的推导，从上到下逐步展开、深入解析，直到达到终结符。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>另一个方面，“递归下降”表示每个非终结符的解析函数内部可以递归地调用其他非终结符的解析函数。每个非终结符对应一个解析函数，这些解析函数按照相应的规则进行递归调用，从而实现对整个语法规则的逐个解析。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">input&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;2 + 3 * (4 - 1)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">index&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">expression&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;解析结果：&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">expression&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">term&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;+&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operator&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">index&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operand&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">term&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">operator&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;+&amp;#39;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">operand&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="nx">operand&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">term&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">factor&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;*&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operator&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">index&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">operand&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">factor&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">operator&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;*&amp;#39;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="nx">operand&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="nx">operand&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">factor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;(&amp;#39;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">index&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">expression&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;)&amp;#39;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">index&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;语法错误：缺少右括号&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">start&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">index&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ContainsRune&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0123456789&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">rune&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">index&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Atoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;语法错误：无效数字&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>变量捕获&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="nx">tool&lt;/span> &lt;span class="nx">compile&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="nx">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="nx">grep&lt;/span> &lt;span class="nx">capturing&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>逃逸分析&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Go 编译器在编译过程中会进行逃逸分析（Escape Analysis）来确定变量的生命周期和内存管理方式。逃逸分析的目标是尽可能地在栈上分配内存，减少对堆的使用，从而提高程序的性能和效率。&lt;/p>
&lt;/blockquote>
&lt;h2 id="学习点">学习点&lt;/h2>
&lt;ul>
&lt;li>基于领域，定义一个赋予意义化的类型&lt;/li>
&lt;li>领域内的常量初始化，利用iota&lt;/li>
&lt;li>善于使用位标识，位运算&lt;/li>
&lt;/ul></description></item></channel></rss>