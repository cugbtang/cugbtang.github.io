<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>test on ✌yesplease's blog</title><link>http://cugbtang.github.io/tags/test/</link><description>Recent content in test on ✌yesplease's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Jan 2024 16:01:23 +0800</lastBuildDate><atom:link href="http://cugbtang.github.io/tags/test/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Web App, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-6/</link><pubDate>Sat, 06 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-6/</guid><description>use the net/http package 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 package main import ( &amp;#34;html/template&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;regexp&amp;#34; ) type Page struct { Title string Body []byte } func (p *Page) save() error { filename := p.</description></item><item><title>Go tools, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-7/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-7/</guid><description>Delve是一个基于命令行的Go语言调试器，它提供了类似于GDB的功能，支持设置断点、单步执行、查看变量值、调用堆栈等操作。相比于GDB，D</description></item><item><title>Go test, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-2/</link><pubDate>Thu, 04 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-2/</guid><description>#go 测试 go test 后面接着的应该是一个包名 go test 可以生成覆盖率的profile文件，这个文件可以被go tool cover工具解析(go tool cover -func=cover.out/go tool cover -html=cover.out) 1、Go top-level</description></item><item><title>Go Effective, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-5/</link><pubDate>Wed, 03 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-5/</guid><description>1、介绍 Effective Go是Go语言官方提供的一份指南，旨在帮助开发人员写出高效、清晰和可读性强的Go代码。下面我会针对每个观点进行阐述，并给出相应的代</description></item><item><title>Go fundamentals, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-4/</link><pubDate>Tue, 02 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-4/</guid><description>Go Fundamentals 介绍如下： 数据类型（Data Types）： Go语言有基本数据类型，包括布尔型、数字型、字符串和字符型。 可以使用var关键字来声明变量，也</description></item><item><title>Go Proverbs, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-3/</link><pubDate>Mon, 01 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-3/</guid><description>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func main() { channel := make(chan int) // 创建一个通道 go func() { value := 42 channel &amp;lt;- value // 将值发送到通道 }() receivedValue := &amp;lt;-channel // 从通道接收值</description></item></channel></rss>