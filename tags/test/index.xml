<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Test on ✌yesplease's blog</title><link>http://cugbtang.github.io/tags/test/</link><description>Recent content in Test on ✌yesplease's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Jan 2024 16:01:23 +0800</lastBuildDate><atom:link href="http://cugbtang.github.io/tags/test/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Web App, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-6/</link><pubDate>Sat, 06 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-6/</guid><description>优雅重启HTTP服务 目的 1、不关闭现有连接（正在运行中的程序） 2、新的进程启动并替代旧进程 3、新的进程接管新的连接 4、连接要随时响应用户的请</description></item><item><title>Go tools, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-7/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-7/</guid><description>Delve是一个基于命令行的Go语言调试器，它提供了类似于GDB的功能，支持设置断点、单步执行、查看变量值、调用堆栈等操作。相比于GDB，D</description></item><item><title>Go 高级编程, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-8/</link><pubDate>Fri, 05 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-8/</guid><description>1. 并发编程 在这一部分主要介绍了Go语言的并发模型和相关的并发编程技术，包括协程、通道、互斥锁、条件变量等。关键知识点包括： 协程的基本用法和实</description></item><item><title>Go test, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-2/</link><pubDate>Thu, 04 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-2/</guid><description>go 测试 go test 后面接着的应该是一个包名 go test 可以生成覆盖率的profile文件，这个文件可以被go tool cover工具解析(go tool cover -func=cover.out/go tool cover -html=cover.out) 1、Go top-level</description></item><item><title>Go Effective, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-5/</link><pubDate>Wed, 03 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-5/</guid><description>1、介绍 Effective Go是Go语言官方提供的一份指南，旨在帮助开发人员写出高效、清晰和可读性强的Go代码。下面我会针对每个观点进行阐述，并给出相应的代</description></item><item><title>Go fundamentals, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-4/</link><pubDate>Tue, 02 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-4/</guid><description>Go Fundamentals 是更多的Go基础知识，涵盖了数据结构（基础数据结构、数组、slice、map）、语言基础（函数、接口、反射）、关键字和并发等方面。掌握这</description></item><item><title>Go Proverbs, how to play?</title><link>http://cugbtang.github.io/post/go/series-go-3/</link><pubDate>Mon, 01 Jan 2024 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/go/series-go-3/</guid><description>需要牢记这些谚语，在使用过程中感受谚语带来的变化 Don&amp;rsquo;t communicate by sharing memory, share memory by communicating. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func main() { channel := make(chan int) // 创建一个通道 go func() { value</description></item></channel></rss>