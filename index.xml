<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>✌yesplease's blog</title><link>http://cugbtang.github.io/</link><description>Recent content on ✌yesplease's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 01 Mar 2018 16:01:23 +0800</lastBuildDate><atom:link href="http://cugbtang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>http://cugbtang.github.io/about/</link><pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate><guid>http://cugbtang.github.io/about/</guid><description>&lt;p>Hugo is a static site engine written in Go.&lt;/p>
&lt;p>It makes use of a variety of open source projects including:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spf13/cobra">Cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/viper">Viper&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/jWalterWeatherman">J Walter Weatherman&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/cast">Cast&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Learn more and contribute on &lt;a href="https://github.com/gohugoio">GitHub&lt;/a>.&lt;/p></description></item><item><title>Jenkins, how to play?</title><link>http://cugbtang.github.io/post/series-1-jenkins/</link><pubDate>Thu, 01 Mar 2018 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/series-1-jenkins/</guid><description>&lt;h1 id="how-to-play-jenkins">how to play jenkins?&lt;/h1>
&lt;blockquote>
&lt;p>社区源码、文档&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>等托管在 GitHub 上。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>其中基础设施部分在 &lt;a href="https://github.com/jenkins-infra">&lt;code>jenkins-infra&lt;/code>&lt;/a>；&lt;/p>
&lt;p>核心库以及插件在 &lt;a href="https://github.com/jenkinsci/">&lt;code>jenkinsci&lt;/code>&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>；&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Jenkins 中文本地化相关的项目在 &lt;a href="https://github.com/jenkins-zh">&lt;code>jenkins-zh&lt;/code>&lt;/a>&lt;/p>
&lt;p>集中玩耍地地方&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;h2 id="搜集玩法">搜集玩法&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>1、官方建议容器化部署（docker/kubernetes）&lt;/p>
&lt;blockquote>
&lt;p>建议使用的Docker映像是&lt;a href="https://hub.docker.com/r/jenkinsci/blueocean/">&lt;code>jenkinsci/blueocean&lt;/code> image&lt;/a>(来自 the &lt;a href="https://hub.docker.com/">Docker Hub repository&lt;/a>)。 该镜像包含当前的&lt;a href="https://www.jenkins.io/download">长期支持 (LTS) 的Jenkins版本&lt;/a> （可以投入使用） ，捆绑了所有Blue Ocean插件和功能。这意味着你不需要单独安装Blue Ocean插件。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -u root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --rm &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -d &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 8080:8080 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 50000:50000 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v jenkins-data:/var/jenkins_home &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -v /var/run/docker.sock:/var/run/docker.sock &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> jenkinsci/blueocean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>能玩一段时间了。。。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2、前面都是铺垫，玩了一段时间，发现原生镜像中缺这少那的，尤其是插件，看看&lt;strong>官方&lt;/strong>怎么说：&lt;/p>
&lt;blockquote>
&lt;p>Keep in mind that the process described above will automatically download the official Jenkins Docker image if this hasn’t been done before.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>Create Dockerfile with the following content:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">FROM jenkinsci/blueocean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y lsb-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://download.docker.com/linux/debian/gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deb [arch=&lt;/span>&lt;span class="k">$(&lt;/span>dpkg --print-architecture&lt;span class="k">)&lt;/span>&lt;span class="s2"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> https://download.docker.com/linux/debian \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="k">$(&lt;/span>lsb_release -cs&lt;span class="k">)&lt;/span>&lt;span class="s2"> stable&amp;#34;&lt;/span> &amp;gt; /etc/apt/sources.list.d/docker.list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y docker-ce-cli
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER jenkins
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN jenkins-plugin-cli --plugins &lt;span class="s2">&amp;#34;blueocean:1.25.3 docker-workflow:1.28&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Build a new docker image from this Dockerfile and assign the image a meaningful name, e.g. &amp;ldquo;myjenkins-blueocean:2.319.3-1&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker build -t myjenkins-blueocean:2.319.3-1 .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>3、同时，也可以站在巨人的肩膀上，有一些实践者把&lt;strong>常用的插件&lt;/strong>已经内置到镜像发布了，比如 &lt;code>kubespheredev/ks-jenkins&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>4、程序员用界面？命令行起飞&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.jenkins.io/zh/blog/2019/08/30/jenkins-cli/">利用 jcli 管理 Jenkins&lt;/a>&lt;/p>
&lt;p>vs&lt;/p>
&lt;p>&lt;a href="https://www.jenkins.io/doc/book/managing/cli/">原生Jenkins CLI &lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 例如，本地敏捷调试&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget -q https://ghproxy.com/https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz&lt;span class="p">|&lt;/span>tar -zxvf &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo mv jcli /usr/local/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jcli config gen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 都走默认就🆗&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jcli center start -m docker --image kubespheredev/ks-jenkins --version 2.249.1 --c-user root --port &lt;span class="m">8080&lt;/span> --setup-wizard&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>5、国内插件源&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>https://updates.jenkins-zh.cn/update-center.json&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>6、划重点，就是 &lt;strong>pipeline&lt;/strong>（前面的插件已经铺垫过）。what？？？&lt;/p>
&lt;blockquote>
&lt;h4 id="pipeline--持续交付即代码">pipeline ==~ “持续交付即代码”&lt;/h4>
&lt;p>Jenkins Pipeline 的定义通常被写入到一个文本文件（称为 &lt;code>Jenkinsfile&lt;/code> ）中，该文件可以被放入项目的源代码控制库中。&lt;/p>
&lt;p>official recommended how to play: &lt;strong>all in Jenkinsfile!!!&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started">get started with Pipeline&lt;/a> - covers how to &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#defining-a-pipeline">define a Jenkins Pipeline&lt;/a> (i.e. your &lt;code>Pipeline&lt;/code>) through &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#through-blue-ocean">Blue Ocean&lt;/a>, through the &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#through-the-classic-ui">classic UI&lt;/a> or in &lt;a href="https://www.jenkins.io/doc/book/pipeline/getting-started#defining-a-pipeline-in-scm">SCM&lt;/a>,&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/jenkinsfile">create and use a &lt;code>Jenkinsfile&lt;/code>&lt;/a> - covers use-case scenarios on how to craft and construct your &lt;code>Jenkinsfile&lt;/code>,&lt;/li>
&lt;li>work with &lt;a href="https://www.jenkins.io/doc/book/pipeline/multibranch">branches and pull requests&lt;/a>,&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/docker">use Docker with Pipeline&lt;/a> - covers how Jenkins can invoke Docker containers on agents/nodes (from a &lt;code>Jenkinsfile&lt;/code>) to build your Pipeline projects,&lt;/li>
&lt;li>&lt;a href="https://www.jenkins.io/doc/book/pipeline/shared-libraries">extend Pipeline with shared libraries&lt;/a>,&lt;/li>
&lt;li>use different &lt;a href="https://www.jenkins.io/doc/book/pipeline/development">development tools&lt;/a> to facilitate the creation of your Pipeline, and&lt;/li>
&lt;li>work with &lt;a href="https://www.jenkins.io/doc/book/pipeline/syntax">Pipeline syntax&lt;/a> - this page is a comprehensive reference of all Declarative Pipeline syntax.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>（片段生成器+声明式+。。。反正就是生成）https://jenkins地址/job/test/pipeline-syntax/&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a href="https://www.jenkins.io/doc/book/pipeline/">【官方词典】&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/cugbtang/image-repo/master/PicGo/20220302150355.png" alt="image-20220302150354810">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>7、&lt;strong>官方&lt;/strong>把架子打好了，让我们发挥是吧，那有木有前辈累计的模板，或者我有新颖的使用方式方法想分享给大家呢：&lt;/p>
&lt;blockquote>
&lt;p>enjoy your play:&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/jenkinsci/pipeline-examples">【官方例子】&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/devops-ws">【DevOps Workspace】&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8、又玩了一段时间，发现jenkins最好是作为自动化的引擎，通过接口集成到 PASS 上。&lt;/p>
&lt;blockquote>
&lt;p>Use Pipeline through API&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/go-atomci/workflow">one example&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="都在玩儿plugin">都在玩儿plugin&lt;/h2>
&lt;ul>
&lt;li>Jenkins Configuration as Code&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>虽然新部署的 Jenkins 实例自动为我们安装了所有所需的插件，并配置好了初始化 Job 等工作，但在开始使用它之前，我们仍需要完成一系列手动工作，如配置 Jenkins 的 “Configure System” 页面&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果你是一名 Jenkins 管理员，那么你一定不会对这个页面感到陌生，每次部署完一个新的 Jenkins 实例，在可以使用之前，我们往往都需要在该页面作出一些相应的配置。该页面除了包含 Jenkins 自身的一些基本配置信息外，同时还包括了当前系统中所安装的插件的配置信息。也就是说，当你的 Jenkins 安装的插件越多，该页面的配置项就有可能会越多。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="l">云时代 这个插件用处就少些了，所有的配置都放在&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/jenkins-zh/jenkins-zh/wiki">https://github.com/jenkins-zh/jenkins-zh/wiki&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/jenkinsci/">https://github.com/jenkinsci/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/jenkins-zh/jenkins-zh/issues">https://github.com/jenkins-zh/jenkins-zh/issues&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos">https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>namespace、cgroups、layerfs support container</title><link>http://cugbtang.github.io/post/namespace-cgroups-layerfs/</link><pubDate>Thu, 01 Mar 2018 16:01:23 +0800</pubDate><guid>http://cugbtang.github.io/post/namespace-cgroups-layerfs/</guid><description>&lt;p>container technology become a necessary for developer during operating the linux system.&lt;/p>
&lt;h2 id="1namespace">1、namespace&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>定义&lt;/p>
&lt;p>namespace是 Linux 内核的一项功能，该功能对内核资源进行分区，以使一组进程看到一组资源，而另一组进程看到另一组资源。namespace 的工作方式通过为一组资源和进程设置相同的 namespace 而起作用，但是这些 namespace 引用了不同的资源。资源可能存在于多个 namespace 中。这些资源可以是进程ID、主机名、用户ID、文件名、与网络访问相关的名称和进程间通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特征&lt;/p>
&lt;p>可以实现在同一主机系统中对进程ID、主机名、用户名ID、文件名、网络和进程间通信等资源的隔离。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">namespace&lt;/th>
&lt;th style="text-align:center">summary&lt;/th>
&lt;th style="text-align:center">kernel&lt;/th>
&lt;th>describe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Mount(mnt)&lt;/td>
&lt;td style="text-align:center">隔离挂载点&lt;/td>
&lt;td style="text-align:center">2.4.19&lt;/td>
&lt;td>隔离不同的进程或进程组看到的挂载点，实现容器内只能看到自己的挂在信息，在容器内的挂载操作不会影响主机的挂载目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Process ID(pid)&lt;/td>
&lt;td style="text-align:center">隔离进程 ID&lt;/td>
&lt;td style="text-align:center">2.6.24&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Network(net)&lt;/td>
&lt;td style="text-align:center">隔离网络设备，端口号等&lt;/td>
&lt;td style="text-align:center">2.6.29&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Interprocess Communication(ipc)&lt;/td>
&lt;td style="text-align:center">隔离 System VIPC 和 POSIX message queues&lt;/td>
&lt;td style="text-align:center">2.6.19&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">UTS Namespace(uts)&lt;/td>
&lt;td style="text-align:center">隔离主机名和域名&lt;/td>
&lt;td style="text-align:center">2.6.19&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">User Namespace(user)&lt;/td>
&lt;td style="text-align:center">隔离用户和用户组&lt;/td>
&lt;td style="text-align:center">3.8&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Control group(cgroup) Namespce&lt;/td>
&lt;td style="text-align:center">隔离 Cgroups 根目录&lt;/td>
&lt;td style="text-align:center">4.6&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Time Namespace&lt;/td>
&lt;td style="text-align:center">隔离系统时间&lt;/td>
&lt;td style="text-align:center">5.6&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="mount-namespace">Mount Namespace&lt;/h3>
&lt;p>使用 unshare 命令可以新建 Mount Namespace，并且在新建的 Mount Namespace 内 mount 是和外部完全隔离的。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>创建一个bash 进程并且新建一个 Mount Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ sudo unshare --mount --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>验证在独立的 namespce 内挂载文件，不影响别的&lt;/p>
&lt;p>在 /tmp 目录下创建一个目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># mkdir /tmp/tmpfs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 mount 命令挂载一个 tmpfs 类型的目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># mount -t tmpfs -o size=20m tmpfs /tmp/tmpfs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 df 命令查看已经挂载的目录信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># df -h&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/dev/sda1 40G 3.8G 37G 10% /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtmpfs 457M &lt;span class="m">0&lt;/span> 457M 0% /dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /dev/shm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /sys/fs/cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M 13M 451M 3% /run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 93M &lt;span class="m">0&lt;/span> 93M 0% /run/user/1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//172.29.0.1/vgt-2469b42ebff188de622646551002b263-6ad5fdbcbf2eaa93bd62f92333a2e6e5 466G 171G 295G 37% /vagrant
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 20M &lt;span class="m">0&lt;/span> 20M 0% /tmp/tmpfs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>新打开一个命令窗口，执行 df 命令查看主机的挂载信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ df -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtmpfs 457M &lt;span class="m">0&lt;/span> 457M 0% /dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /dev/shm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M 13M 451M 3% /run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 464M &lt;span class="m">0&lt;/span> 464M 0% /sys/fs/cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/dev/sda1 40G 3.8G 37G 10% /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//172.29.0.1/vgt-2469b42ebff188de622646551002b263-6ad5fdbcbf2eaa93bd62f92333a2e6e5 466G 171G 295G 37% /vagrant
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 93M &lt;span class="m">0&lt;/span> 93M 0% /run/user/1000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>基本验证完毕。接着我们查看新的mount namespace 信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ls -l /proc/self/ns/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 ipc -&amp;gt; ipc:&lt;span class="o">[&lt;/span>4026531839&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 mnt -&amp;gt; mnt:&lt;span class="o">[&lt;/span>4026532117&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 net -&amp;gt; net:&lt;span class="o">[&lt;/span>4026531956&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 pid -&amp;gt; pid:&lt;span class="o">[&lt;/span>4026531836&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 user -&amp;gt; user:&lt;span class="o">[&lt;/span>4026531837&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:56 uts -&amp;gt; uts:&lt;span class="o">[&lt;/span>4026531838&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>新打开一个命令窗口，使用相同的命令查看主机上的 namespace 信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ ls -l /proc/self/ns/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 ipc -&amp;gt; ipc:&lt;span class="o">[&lt;/span>4026531839&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 mnt -&amp;gt; mnt:&lt;span class="o">[&lt;/span>4026531840&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 net -&amp;gt; net:&lt;span class="o">[&lt;/span>4026531956&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 pid -&amp;gt; pid:&lt;span class="o">[&lt;/span>4026531836&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 user -&amp;gt; user:&lt;span class="o">[&lt;/span>4026531837&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> vagrant vagrant &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 09:57 uts -&amp;gt; uts:&lt;span class="o">[&lt;/span>4026531838&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="pid-namespace">PID Namespace&lt;/h3>
&lt;blockquote>
&lt;p>用来隔离进程，在不同的namespace内可以拥有相同的进程号&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>创建一个 bash 进程，并且新建一个 PID Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ sudo unshare --pid --fork --mount-proc /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在当前的命令行窗口使用 ps aux 命令查看进程信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ps aux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root &lt;span class="m">1&lt;/span> 0.0 0.2 &lt;span class="m">15792&lt;/span> &lt;span class="m">2616&lt;/span> pts/3 S 13:59 0:00 /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root &lt;span class="m">16&lt;/span> 0.0 0.1 &lt;span class="m">55192&lt;/span> &lt;span class="m">1844&lt;/span> pts/3 R+ 14:02 0:00 ps aux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="uts-namespace">UTS Namespace&lt;/h3>
&lt;blockquote>
&lt;p>它允许每个UTS Namespace 拥有一个独立的主机名&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>使用 unshare 命令创建一个 UTS Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@localhost ~&lt;span class="o">]&lt;/span>$ sudo unshare --uts --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 hostname 命令设置主机&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># hostname -b docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>新打开一个命令行窗口，使用相同的命令查看主机的hostname&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@localhost vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># localhost&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="ipc-namespace">IPC Namespace&lt;/h3>
&lt;blockquote>
&lt;p>主要用来隔离进程间通信的。PID Namespace 和 IPC Namespace一起使用可以实现同一 IPC Namespace 内的进程彼此可以通信，不同 IPC Namespace 的进程却不能通信。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>使用 unshare 命令创建一个 IPC Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ sudo unshare --ipc --fork /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>另起一个窗口，查看系统的通信进程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ ipcs -q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------ Message Queues --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key msqid owner perms used-bytes messages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在新的ipc namespace下新建一个进程通信队列&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ipcmk -Q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Message queue id: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看当前ipc namespace 下的系统通信队列列表&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ipcs -q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------ Message Queues --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key msqid owner perms used-bytes messages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x2ae315e9 &lt;span class="m">0&lt;/span> root &lt;span class="m">644&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>再次查看主机的系统通信队列&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ ipcs -q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------ Message Queues --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key msqid owner perms used-bytes messages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="user-namespace">User Namespace&lt;/h3>
&lt;blockquote>
&lt;p>主要用来隔离用户和用户组。可以实现进程在容器内拥有 root 权限， 而在主机上却只是普通用户。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>以普通用户的身份创建一个 User Namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ unshare --user --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">unshare: unshare failed: Invalid argument
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看内核版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ uname -a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Linux docker 3.10.0-1127.el7.x86_64 &lt;span class="c1">#1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查阅资料&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># max_user_namespaces文件记录了允许创建的user namespace数量，我的CentOS 7.5默认是0，修改之&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="m">2147483647&lt;/span> &amp;gt; /proc/sys/user/max_user_namespaces
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 再次运行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ unshare --user -r /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker ~&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行 id 命令查看当前的用户信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">uid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span> &lt;span class="nv">gid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span> &lt;span class="nv">groups&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span>,65534&lt;span class="o">(&lt;/span>nfsnobody&lt;span class="o">)&lt;/span> &lt;span class="nv">context&lt;/span>&lt;span class="o">=&lt;/span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在当前窗口执行 reboot 命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># reboot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Failed to open /dev/initctl: Permission denied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Failed to talk to init daemon.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="net-namespace">Net Namespace&lt;/h3>
&lt;blockquote>
&lt;p>用来隔离网络设备、IP地址和端口等信息。&lt;/p>
&lt;p>可以让每个进程拥有自己独立的IP地址，端口和网卡信息&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>首先查看主机上的ip 信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ ip a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">65536&lt;/span> qdisc noqueue state UNKNOWN group default qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet 127.0.0.1/8 scope host lo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet6 ::1/128 scope host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">1500&lt;/span> qdisc mq state UP group default qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/ether 00:15:5d:25:01:09 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet 172.29.5.132/20 brd 172.29.15.255 scope global noprefixroute dynamic eth0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft 82979sec preferred_lft 82979sec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet6 fe80::215:5dff:fe25:109/64 scope link
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3: docker0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu &lt;span class="m">1500&lt;/span> qdisc noqueue state DOWN group default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/ether 02:42:f0:82:11:e0 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建 net namespace&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ sudo unshare --net --fork /bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 ip a命令查看当前namespace的网络信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ip a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: lo: &amp;lt;LOOPBACK&amp;gt; mtu &lt;span class="m">65536&lt;/span> qdisc noop state DOWN group default qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="为什么-docker-需要-namespace">为什么 docker 需要 namespace?&lt;/h3>
&lt;p>Linux 内核从2002年2.4.19版本开始加入了 Mount Namspace&lt;/p>
&lt;p>内核3.8版本加入了 User Namespace 为容器提供了足够的支持功能&lt;/p>
&lt;p>当 docker 新建一个容器时&lt;/p>
&lt;p>会创建这六种 namespace， 然后将容器中的进程加入这些 namespace之中&lt;/p>
&lt;h1 id="cgroups">Cgroups&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>定义&lt;/p>
&lt;p>全程是 control groups， 是Linux 内核的一个功能。可以实现限制进程或者进程组的资源（cpu、mem、磁盘IO等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特征&lt;/p>
&lt;p>资源限制：限制资源的使用量&lt;/p>
&lt;p>优先级控制： 不同的组可以有不用的资源使用优先级&lt;/p>
&lt;p>审计：计算控制组的资源使用情况&lt;/p>
&lt;p>控制： 控制进程的挂起或恢复&lt;/p>
&lt;/li>
&lt;li>
&lt;p>核心&lt;/p>
&lt;p>subsystem: 一个内核的组件，代表一类资源调度控制器&lt;/p>
&lt;p>cgroup： 表示一组进程和一组带有参数的子系统的关联关系&lt;/p>
&lt;p>hierarchy：由一些列的控制组按照树状结构排列组成的子控制组默认拥有父控制组的属性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="subsystem">subsystem&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>查看当前主机使用了哪些子系统&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>vagrant@docker ~&lt;span class="o">]&lt;/span>$ sudo mount -t cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/systemd &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent&lt;span class="o">=&lt;/span>/usr/lib/systemd/systemd-cgroups-agent,name&lt;span class="o">=&lt;/span>systemd&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/cpuset &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuset&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/cpu,cpuacct &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/perf_event &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,perf_event&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/blkio &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,blkio&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/memory &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,memory&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/hugetlb &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/freezer &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,freezer&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/net_cls,net_prio &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/devices &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,devices&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup on /sys/fs/cgroup/pids &lt;span class="nb">type&lt;/span> cgroup &lt;span class="o">(&lt;/span>rw,nosuid,nodev,noexec,relatime,seclabel,pids&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>以 cpu 子系统为例，演示 cgroups 如何限制进程的 cpu使用时间&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#在cpu子系统下创建测试文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir /sys/fs/cgroup/cpu/mydocker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#查看&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker vagrant&lt;span class="o">]&lt;/span>&lt;span class="c1"># ls /sys/fs/cgroup/cpu/mydocker -l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cgroup.clone_children
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--w--w--w-. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cgroup.event_control
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cgroup.procs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpuacct.stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpuacct.usage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpuacct.usage_percpu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.cfs_period_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.cfs_quota_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.rt_period_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.rt_runtime_us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.shares
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 cpu.stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 notify_on_release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> Feb &lt;span class="m">26&lt;/span> 15:15 tasks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将当前shell进程加入cgroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># echo $$&amp;gt; tasks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看tasks文件内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>mem&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在memory子系统下创建cgroup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># mkdir /sys/fs/cgroup/memory/mydocker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看新建目录中的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># ls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup.clone_children
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup.event_control
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cgroup.procs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.force_empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.slabinfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.tcp.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.kmem.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.failcnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.max_usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.memsw.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.move_charge_at_immigrate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.numa_stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.oom_control
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.pressure_level
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.soft_limit_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.swappiness
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.usage_in_bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memory.use_hierarchy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">notify_on_release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tasks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 限制内存使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># echo 1073741824 &amp;gt; memory.limit_in_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将当前shell写入tasks内&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># echo $$&amp;gt;tasks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># cat tasks&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3356&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3484&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 申请内存，当达到1G时 被杀死&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># memtester 1500M 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memtester version 4.3.0 &lt;span class="o">(&lt;/span>64-bit&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span> 2001-2012 Charles Cazabon.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Licensed under the GNU General Public License version &lt;span class="m">2&lt;/span> &lt;span class="o">(&lt;/span>only&lt;span class="o">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesize is &lt;span class="m">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesizemask is 0xfffffffffffff000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">want 1500MB &lt;span class="o">(&lt;/span>&lt;span class="m">1572864000&lt;/span> bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">got 1500MB &lt;span class="o">(&lt;/span>&lt;span class="m">1572864000&lt;/span> bytes&lt;span class="o">)&lt;/span>, trying mlock ...Killed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改申请大小，完美&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@docker mydocker&lt;span class="o">]&lt;/span>&lt;span class="c1"># memtester 500M 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">memtester version 4.3.0 &lt;span class="o">(&lt;/span>64-bit&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span> 2001-2012 Charles Cazabon.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Licensed under the GNU General Public License version &lt;span class="m">2&lt;/span> &lt;span class="o">(&lt;/span>only&lt;span class="o">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesize is &lt;span class="m">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pagesizemask is 0xfffffffffffff000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">want 500MB &lt;span class="o">(&lt;/span>&lt;span class="m">524288000&lt;/span> bytes&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">got 500MB &lt;span class="o">(&lt;/span>&lt;span class="m">524288000&lt;/span> bytes&lt;span class="o">)&lt;/span>, trying mlock ...locked.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Loop 1/1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Stuck Address : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Random Value : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare XOR : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare SUB : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare MUL : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare DIV : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare OR : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Compare AND : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Sequential Increment: ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Solid Bits : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Block Sequential : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Checkerboard : ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Bit Spread : ok
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>docker 是如何使用cgroups的？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run -ti -m&lt;span class="o">=&lt;/span>1g nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul></description></item></channel></rss>